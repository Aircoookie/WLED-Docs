{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my project WLED! \u2728 A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102! \u2699\ufe0f Features WS2812FX library integrated for over 100 special effects FastLED noise effects and 50 palettes Modern UI with color, effect and segment controls Segments to set different effects and colors to parts of the LEDs Settings page - configuration over network Access Point and station mode - automatic failsafe AP Up to 3 LED outputs per ESP8266 instance and 10 LED outputs per ESP32 instance Support for RGBW strips Up to 250 user presets to save and load colors/effects easily, supports cycling through them. Presets can be used to automatically execute API calls Nightlight function (gradually dims down) Full OTA software updatability (HTTP + ArduinoOTA), password protectable Configurable analog clock + support for the Cronixie kit by Diamex Configurable Auto Brightness limit for safer operation Filesystem-based config for easier backup of presets and settings Native Home-Assistant integration : \ud83d\udca1 Supported light control interfaces WLED app for Android and iOS JSON and HTTP request APIs MQTT Blynk IoT E1.31 , Art-Net , DDP and TPM2.net Hyperion UDP realtime Alexa voice control (including dimming and color) Sync to Philips Hue lights Adalight (PC ambilight via serial) and TPM2 Sync color of multiple WLED devices (UDP notifier) Infrared remotes (24-key RGB, receiver required) Simple timers/schedules (time from NTP, timezones/DST supported) \ud83d\udcf2 Quick start guide and documentation See the getting started page! On this page you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running! \ud83d\uddbc\ufe0f Images \ud83d\udcbe Compatible LED Strips Type Voltage Comments WS2812B 5v WS2813 5v SK6812 5v RGBW APA102 5v C/D WS2801 5v C/D LPD8806 5v C/D TM1814 12v RGBW WS2811 12v 3-LED segments WS2815 12v GS8208 12v Analog/non-addressable any Requires additional circuitry \ud83e\uddca Compatible PC RGB Fans and ARGB accessories Brand Model Comments Corsair HD120 Fan Uses WS2812B, data-in only PCCOOLER Moonlight 5-pack Fans Uses WS2812B, includes Data-out connector to keep each fan uniquely addressable if wired in series like traditional LED strips Any 5v 3-pin ARGB for PC Any PC RGB device that supports the 5v 3-pin ARGB motherboard header should work fine with WLED. All the major motherboard vendors support the Corsair HD120 and PCCOOLER fans listed, so we can safely assume any device that supports motherboard ARGB 5V 3-Pin standard will work with WLED. \u270c\ufe0f Other Licensed under the MIT license Credits here ! Join the Discord server to discuss everything about WLED! Check out the WLED Discourse forum ! You can also send me mails to dev.aircoookie@gmail.com , but please only do so if you want to talk to me privately. If WLED really brightens up your every day, you can Disclaimer: If you are sensitive to photosensitive epilepsy it is not recommended that you use this software. In case you still want to try, don't use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.","title":"Welcome"},{"location":"#welcome-to-my-project-wled","text":"A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102!","title":"Welcome to my project WLED! \u2728"},{"location":"#features","text":"WS2812FX library integrated for over 100 special effects FastLED noise effects and 50 palettes Modern UI with color, effect and segment controls Segments to set different effects and colors to parts of the LEDs Settings page - configuration over network Access Point and station mode - automatic failsafe AP Up to 3 LED outputs per ESP8266 instance and 10 LED outputs per ESP32 instance Support for RGBW strips Up to 250 user presets to save and load colors/effects easily, supports cycling through them. Presets can be used to automatically execute API calls Nightlight function (gradually dims down) Full OTA software updatability (HTTP + ArduinoOTA), password protectable Configurable analog clock + support for the Cronixie kit by Diamex Configurable Auto Brightness limit for safer operation Filesystem-based config for easier backup of presets and settings Native Home-Assistant integration :","title":"\u2699\ufe0f Features"},{"location":"#supported-light-control-interfaces","text":"WLED app for Android and iOS JSON and HTTP request APIs MQTT Blynk IoT E1.31 , Art-Net , DDP and TPM2.net Hyperion UDP realtime Alexa voice control (including dimming and color) Sync to Philips Hue lights Adalight (PC ambilight via serial) and TPM2 Sync color of multiple WLED devices (UDP notifier) Infrared remotes (24-key RGB, receiver required) Simple timers/schedules (time from NTP, timezones/DST supported)","title":"\ud83d\udca1 Supported light control interfaces"},{"location":"#quick-start-guide-and-documentation","text":"See the getting started page! On this page you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running!","title":"\ud83d\udcf2 Quick start guide and documentation"},{"location":"#images","text":"","title":"\ud83d\uddbc\ufe0f Images"},{"location":"#compatible-led-strips","text":"Type Voltage Comments WS2812B 5v WS2813 5v SK6812 5v RGBW APA102 5v C/D WS2801 5v C/D LPD8806 5v C/D TM1814 12v RGBW WS2811 12v 3-LED segments WS2815 12v GS8208 12v Analog/non-addressable any Requires additional circuitry","title":"\ud83d\udcbe Compatible LED Strips"},{"location":"#compatible-pc-rgb-fans-and-argb-accessories","text":"Brand Model Comments Corsair HD120 Fan Uses WS2812B, data-in only PCCOOLER Moonlight 5-pack Fans Uses WS2812B, includes Data-out connector to keep each fan uniquely addressable if wired in series like traditional LED strips Any 5v 3-pin ARGB for PC Any PC RGB device that supports the 5v 3-pin ARGB motherboard header should work fine with WLED. All the major motherboard vendors support the Corsair HD120 and PCCOOLER fans listed, so we can safely assume any device that supports motherboard ARGB 5V 3-Pin standard will work with WLED.","title":"\ud83e\uddca Compatible PC RGB Fans and ARGB accessories"},{"location":"#other","text":"Licensed under the MIT license Credits here ! Join the Discord server to discuss everything about WLED! Check out the WLED Discourse forum ! You can also send me mails to dev.aircoookie@gmail.com , but please only do so if you want to talk to me privately. If WLED really brightens up your every day, you can Disclaimer: If you are sensitive to photosensitive epilepsy it is not recommended that you use this software. In case you still want to try, don't use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.","title":"\u270c\ufe0f Other"},{"location":"about/contributors/","text":"This page is to honor the work of all the people who helped to make WLED what it is today! Direct Contributors to WLED code Everyone you see on the Contributors page and: 8bitbrett made the WiFi auto connect QR code with the Aircoookie/WLED logo! adamo made the animated Discord server logo! @blazoncek makes countless new features and improvements to many parts of WLED! @debsahu provided the HomeAssistant autodiscovery and a lot of help with PIO! @frenck made an amazing, stable and feature-packed native integration with HomeAssistant! @photocromax is helping bringing the Live visualization feature to life and added GIF previews to the doc! @raymiec is currently working on creating the best clients for Android and iOS! @StormPie , the creator of the awesome mobile UI! @timothybrown added MQTT authentication! @viknet365 ported the Meteor effect! @wiesendaniel added the configuration for the PlatformIO IDE! @YeonV provided the initial HomeAssistant MQTT light config! This list is incomplete. Testing, Contributors and Supporters This list has been redacted for privacy reasons. If you've contributed to the project by testing a lot, helping the community, or sending me a gift, feel free to edit this page and add yourself (maintain alphabetical order) \ud83d\ude04 Thank you very much, your help is truly appreciated! Put two spaces behind your name, else the line break will not appear in the final page! @Def3nder @DutchmanNL DrZzs (Justin A.) Dylan L. Fil Quindor (Andries F.) Tonyno Used Libraries and Dependencies ESP8266 / ESP32 Arduino Core NeoPixelBus by Makuna FastLED library ESPAsyncTCP by me-no-dev ESPAsyncUDP by me-no-dev (as of 0.9.0) ESPAsyncWebServer by me-no-dev ArduinoJSON by bblanchon async-mqtt-client by marvinroger WS2812FX by kitesurfer1404 (modified) IRremoteESP8266 by markszabo (optional) Timezone by JChristensen Blynk library (compacted) E1.31 library by forkineye (modified) Espalexa by Aircoookie (modified) Many included FastLED effects are modified versions of kriegsman 's gists! WebServer_tng by bbx10 (ESP32, up to 0.8.3) PubSubClient by knolleary (modified, up to 0.8.3) iro.js colorpicker by James Daniel! Classic UI icons by Linearicons created by Perxis ! If you would like to appear in this list for a contribution you made or be removed from it, feel free to contact me!","title":"Contributors & Credits"},{"location":"about/contributors/#direct-contributors-to-wled-code","text":"Everyone you see on the Contributors page and: 8bitbrett made the WiFi auto connect QR code with the Aircoookie/WLED logo! adamo made the animated Discord server logo! @blazoncek makes countless new features and improvements to many parts of WLED! @debsahu provided the HomeAssistant autodiscovery and a lot of help with PIO! @frenck made an amazing, stable and feature-packed native integration with HomeAssistant! @photocromax is helping bringing the Live visualization feature to life and added GIF previews to the doc! @raymiec is currently working on creating the best clients for Android and iOS! @StormPie , the creator of the awesome mobile UI! @timothybrown added MQTT authentication! @viknet365 ported the Meteor effect! @wiesendaniel added the configuration for the PlatformIO IDE! @YeonV provided the initial HomeAssistant MQTT light config! This list is incomplete.","title":"Direct Contributors to WLED code"},{"location":"about/contributors/#testing-contributors-and-supporters","text":"This list has been redacted for privacy reasons. If you've contributed to the project by testing a lot, helping the community, or sending me a gift, feel free to edit this page and add yourself (maintain alphabetical order) \ud83d\ude04 Thank you very much, your help is truly appreciated! Put two spaces behind your name, else the line break will not appear in the final page! @Def3nder @DutchmanNL DrZzs (Justin A.) Dylan L. Fil Quindor (Andries F.) Tonyno","title":"Testing, Contributors and Supporters"},{"location":"about/contributors/#used-libraries-and-dependencies","text":"ESP8266 / ESP32 Arduino Core NeoPixelBus by Makuna FastLED library ESPAsyncTCP by me-no-dev ESPAsyncUDP by me-no-dev (as of 0.9.0) ESPAsyncWebServer by me-no-dev ArduinoJSON by bblanchon async-mqtt-client by marvinroger WS2812FX by kitesurfer1404 (modified) IRremoteESP8266 by markszabo (optional) Timezone by JChristensen Blynk library (compacted) E1.31 library by forkineye (modified) Espalexa by Aircoookie (modified) Many included FastLED effects are modified versions of kriegsman 's gists! WebServer_tng by bbx10 (ESP32, up to 0.8.3) PubSubClient by knolleary (modified, up to 0.8.3) iro.js colorpicker by James Daniel! Classic UI icons by Linearicons created by Perxis ! If you would like to appear in this list for a contribution you made or be removed from it, feel free to contact me!","title":"Used Libraries and Dependencies"},{"location":"about/privacy-policy/","text":"By using WLED embedded system code, the WLED iOS mobile application, the WLED Android mobile application, web client or associated Services, no personally identifiable data is collected, transmitted and/or stored on external servers. No data is processed in any way not absolutely required for the operation of the Service. Overview of collected data The embedded system internally stores configuration data, including, but not limited to the user's WiFi credentials. This data is deletable by the user. Read access to sensitive data is restricted. Configuration data is not sent to any external system besides the users control device. The mobile apps internally stores data regarding connected devices, including, but not limited to the device's network-local IP addresses. Using the provided Support services (including, but not limited to GitHub, Discord and E-mail), only the information you choose to disclose will be processed. Privacy policies and Terms of Service of service providers apply. In accordance with the Service MIT license, THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. If you have inquiries regarding this Policy please feel free to contact me at: dev.aircoookie@gmail,com","title":"Privacy Policy"},{"location":"about/privacy-policy/#overview-of-collected-data","text":"The embedded system internally stores configuration data, including, but not limited to the user's WiFi credentials. This data is deletable by the user. Read access to sensitive data is restricted. Configuration data is not sent to any external system besides the users control device. The mobile apps internally stores data regarding connected devices, including, but not limited to the device's network-local IP addresses. Using the provided Support services (including, but not limited to GitHub, Discord and E-mail), only the information you choose to disclose will be processed. Privacy policies and Terms of Service of service providers apply. In accordance with the Service MIT license, THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. If you have inquiries regarding this Policy please feel free to contact me at: dev.aircoookie@gmail,com","title":"Overview of collected data"},{"location":"about/roadmap/","text":"These are currently on my list of what COULD be implemented, there is no guarantee if and when they will be available! Create named playlists of presets Custom color palettes Settings pages overhaul Rework of WiFi connection logic (reconnect after WiFi or power outage)","title":"Upcoming Features"},{"location":"advanced/compile-analog/","text":"Moved, see How to Compile WLED .bin file","title":"Compile Analog WLED"},{"location":"advanced/compile-wled/","text":"A lot of people ask how they can compile their own WLED .bin file, whether it be for a custom pins or analog LEDs, so this picture guide will show how to do it. First, download the latest source code from https://github.com/Aircoookie/WLED under the Code dropdown menu. Then download, install and open VSCode (https://code.visualstudio.com/download) and install the PlatformIO IDE extension from the VSCode Settings > Extensions menu. After PlatformIO IDE is installed, restart VSCode and open your unzipped WLED source code folder. Now you need to find which GPIO pins go to which color and make these adjustments in your code. PWM1 - Red PWM2 - Blue PWM3 - Green PWM4 - White1 PWM5 - White2 The best place to find your pins is the Tasmota device repo. https://templates.blakadder.com Above you can see which GPIO pin goes to each PWM channel. Insert this information into the NpbWrapper.h file back in VSCode. Now you can adjust your build flags in the platformio.ini if you want to enable our disable certain things. Now click the PlatformIO logo in the left side bar and find env:esp8285_4CH_MagicHome and then click General > Build It will probably fail the first time. Just click build again. It might fail again. Third times a charm. There we go! The .bin file is located in a hidden folder called .pio in your WLED folder. Since it's in a hidden folder you have to move it out to use it. All that's left to do is flash this .bin file onto your esp chip and then connect it to wifi. Here's a good video tutorial on how to flash a MagicHome controller like the one pictured above. https://www.youtube.com/watch?v=qgBAU39v07k You just need to use the firmware.bin instead. I prefer to use ESPHome-Flasher just because that's what I've had the best luck with. https://github.com/esphome/esphome-flasher/releases","title":"Compile WLED"},{"location":"advanced/custom-features/","text":"Warning Note: this page is now out of date, see updated functionality in the code ( WLED/usermods/EXAMPLE_v2 ) This page is intended for those wishing to modify the WLED code to add their own functionality. Basics Programming is done in the Arduino IDE. There is a special file, usermod.cpp , to write your own code. (however, if you think your code may be relevant to many users, feel free to code it in directly and open a pull request) This file has three empty methods: - userSetup() is called after loading settings but before connecting to WiFi. Use it to start own interfaces if it does not depend on WiFi (IR, Sensors, GPIOs,...). Also you can use it to load custom settings or to specify own server pages with the server.on() method. - userConnected() is called once WiFi is connected. Use it to connect to external servers or init interfaces using wiFi. - userLoop() is called by the main loop() function. Modify WLED values If you know what you're doing, you may choose to change the value of any global variable declared in wled.h . However, for basic color and brightness changes, these are the most important: Variable Name Type Purpose bri byte (0-255) Master Brightness (0 is off, 255 is maximum) col[0] byte (0-255) Red color value col[1] byte (0-255) Green color value col[2] byte (0-255) Blue color value col[3] byte (0-255) White color value After updating the color, you must call the colorUpdated(int) method. If you want to send a notification with the new color to other ESPs, use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE) , otherwise colorUpdated(NOTIFIER_CALL_MODE_NO_NOTIFY) . Timing If you'd just like a simple modification that requires timing (like sending a request every 2 seconds), please never use the delay() function in your userLoop() ! It will block everything else and WLED will become unresponsive and effects won't work! Instead, try this instead: long lastTime = 0 ; int delayMs = 2000 ; //we want to do something every 2 seconds void userLoop () { if ( millis () - lastTime > delayMs ) { lastTime = millis (); //do something you want to do every 2 seconds } } Internal Segments API You can use Segments from your code to set different parts of the strip to different colors or effects. This can be very useful for highly customized installations, clocks, ... To set a segment, use strip.setSegment(id, start, stop); , where id is the segment ID, start is the first LED of the segment and stop is the LED after the last one in the segment. To edit the configuration of a segment, use: WS2812FX :: Segment & seg = strip . getSegment ( id ); //set color (i=0 is primary, i=1 secondary i=2 tertiary) seg . colors [ i ] = (( myWhite << 24 ) | (( myRed & 0xFF ) << 16 ) | (( myGreen & 0xFF ) << 8 ) | (( myBlue & 0xFF ))); //set effect config seg . mode = myFxI ; seg . speed = mySpeed ; seg . intensity = myIntensity ; seg . palette = myPaletteId ; Keep in mind that this will not cause interface updates as of 0.8.6. For that, you still need to use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE) Create custom effects It is possible to create your own effects and add them to the FX library. The relevant files for that are FX.cpp and FX.h . Here is a step-by-step guide on how to make your effect: Take a look at some of the effects in FX.cpp to see how they are implemented! Add your own routine in FX.cpp starting with: uint16_t WS2812FX::mode_custom Add to total number of effects in FX.h line 110: #define MODE_COUNT Add your mode number (ie #define FX_MODE_CUSTOM 110 ) in FX.h around line 200. Add your mode around line 400 of FX.h, like so: _mode[FX_MODE_CUSTOM] = &WS2812FX::mode_custom; Add it to the functions in FX.h around line 600: mode_custom(void), Give it a name at the bottom (10 modes per line) in JSON_mode_names[] . Wrap your name in quotes just like the others. Compile, upload and enjoy! Your new effect will automatically be added to the list in the web ui. If you programmed a nice effect you want to share, submit a pull request! Changing Web UI In order to conserve space, the Web UI interface is represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI. These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally. After that, recreate html_*.h files by running in the repo directory: > npm install > npm run build If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -> Application -> Local Storage) If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: > npm run dev This will start monitoring wled00/data folder for changes. WARNING!! Be careful with changing the javascript in HTML files! For example function GetV() {} must be the last javascript function in the <script> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data . Recompile and flash WLED!","title":"Custom Features"},{"location":"advanced/custom-features/#basics","text":"Programming is done in the Arduino IDE. There is a special file, usermod.cpp , to write your own code. (however, if you think your code may be relevant to many users, feel free to code it in directly and open a pull request) This file has three empty methods: - userSetup() is called after loading settings but before connecting to WiFi. Use it to start own interfaces if it does not depend on WiFi (IR, Sensors, GPIOs,...). Also you can use it to load custom settings or to specify own server pages with the server.on() method. - userConnected() is called once WiFi is connected. Use it to connect to external servers or init interfaces using wiFi. - userLoop() is called by the main loop() function.","title":"Basics"},{"location":"advanced/custom-features/#modify-wled-values","text":"If you know what you're doing, you may choose to change the value of any global variable declared in wled.h . However, for basic color and brightness changes, these are the most important: Variable Name Type Purpose bri byte (0-255) Master Brightness (0 is off, 255 is maximum) col[0] byte (0-255) Red color value col[1] byte (0-255) Green color value col[2] byte (0-255) Blue color value col[3] byte (0-255) White color value After updating the color, you must call the colorUpdated(int) method. If you want to send a notification with the new color to other ESPs, use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE) , otherwise colorUpdated(NOTIFIER_CALL_MODE_NO_NOTIFY) .","title":"Modify WLED values"},{"location":"advanced/custom-features/#timing","text":"If you'd just like a simple modification that requires timing (like sending a request every 2 seconds), please never use the delay() function in your userLoop() ! It will block everything else and WLED will become unresponsive and effects won't work! Instead, try this instead: long lastTime = 0 ; int delayMs = 2000 ; //we want to do something every 2 seconds void userLoop () { if ( millis () - lastTime > delayMs ) { lastTime = millis (); //do something you want to do every 2 seconds } }","title":"Timing"},{"location":"advanced/custom-features/#internal-segments-api","text":"You can use Segments from your code to set different parts of the strip to different colors or effects. This can be very useful for highly customized installations, clocks, ... To set a segment, use strip.setSegment(id, start, stop); , where id is the segment ID, start is the first LED of the segment and stop is the LED after the last one in the segment. To edit the configuration of a segment, use: WS2812FX :: Segment & seg = strip . getSegment ( id ); //set color (i=0 is primary, i=1 secondary i=2 tertiary) seg . colors [ i ] = (( myWhite << 24 ) | (( myRed & 0xFF ) << 16 ) | (( myGreen & 0xFF ) << 8 ) | (( myBlue & 0xFF ))); //set effect config seg . mode = myFxI ; seg . speed = mySpeed ; seg . intensity = myIntensity ; seg . palette = myPaletteId ; Keep in mind that this will not cause interface updates as of 0.8.6. For that, you still need to use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE)","title":"Internal Segments API"},{"location":"advanced/custom-features/#create-custom-effects","text":"It is possible to create your own effects and add them to the FX library. The relevant files for that are FX.cpp and FX.h . Here is a step-by-step guide on how to make your effect: Take a look at some of the effects in FX.cpp to see how they are implemented! Add your own routine in FX.cpp starting with: uint16_t WS2812FX::mode_custom Add to total number of effects in FX.h line 110: #define MODE_COUNT Add your mode number (ie #define FX_MODE_CUSTOM 110 ) in FX.h around line 200. Add your mode around line 400 of FX.h, like so: _mode[FX_MODE_CUSTOM] = &WS2812FX::mode_custom; Add it to the functions in FX.h around line 600: mode_custom(void), Give it a name at the bottom (10 modes per line) in JSON_mode_names[] . Wrap your name in quotes just like the others. Compile, upload and enjoy! Your new effect will automatically be added to the list in the web ui. If you programmed a nice effect you want to share, submit a pull request!","title":"Create custom effects"},{"location":"advanced/custom-features/#changing-web-ui","text":"In order to conserve space, the Web UI interface is represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI. These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally. After that, recreate html_*.h files by running in the repo directory: > npm install > npm run build If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -> Application -> Local Storage) If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: > npm run dev This will start monitoring wled00/data folder for changes. WARNING!! Be careful with changing the javascript in HTML files! For example function GetV() {} must be the last javascript function in the <script> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data . Recompile and flash WLED!","title":"Changing Web UI"},{"location":"advanced/esp32-recovery/","text":"In Platformio IDE open a new terminal and type: pio run -v -t upload When you see the \" Connecting........ \" abort the upload. Below you can see Esptool commands, that was used by Platformio. Now you able to find all files that we need to build the binary (screenshot for visualization): Download the official ESP Flash Download Tool : https://www.espressif.com/en/support/download/other-tools Start it and select Developer Mode > ESP32 Download Tool . Prepare files and memory addresses according picture below: Click button \u201c CombineBin \u201d. Now you have your binary file with Bootloader .","title":"ESP32 Recovery"},{"location":"advanced/home-automation/","text":"It is possible to interface WLED with home automation systems and other 3rd party software. You can use any API WLED provides (JSON, HTTP, UDP, MQTT), JSON is preferred. This page is intended for sample code and configs others use to control WLED from various 3rd party software: HomeAssistant and NodeRED flows Domoticz: Please see here ! openHAB: In openHAB 3 based environments you are able to use the native openHAB WLED Binding , which also supports discovery of your WLED devices. For older openHAB (2.5.x) environmantes the connection can be configured via MQTT broker & Openhab MQTT Binding (2.5x) with configuration files Please find the details here Indigo Domotics: Please see here ! Home Assistant Using native integration: WLED can be configured using the integrations in the Home Assistant frontend. Menu: Configuration -> Integrations . In most cases, the WLED devices will be automatically discovered by Home Assistant. Those automatically discovered WLED devices are listed on the integrations page. If for some reason (e.g., due to lack of mDNS support on your network), the WLED device isn't discovered, it can be added manually. Click on the + sign to add an integration and click on WLED . After completing the configuration flow, the WLED integration will be available. WLED integration documentation Using MQTT Alternatively, MQTT can be used (not recommended). Auto discovery is no longer supported since version 0.9 of WLED. In case you want to configure the device manually: light: - platform: mqtt name: \"Kitchen Floor Lights\" command_topic: \"wled/all\" brightness_command_topic: \"wled/all\" rgb_command_topic: \"wled/all/col\" rgb_command_template: \"{{ '#%02x%02x%02x' | format(red, green, blue)}}\" effect_command_topic : \"wled/all/api\" effect_list: - \"FX=0\" - \"FX=1\" - \"FX=2\" - \"FX=3\" - \"FX=4\" - \"FX=5\" - \"FX=6\" - \"FX=7\" - \"FX=8\" - \"FX=9\" - \"FX=10\" - \"FX=11\" - \"FX=12\" - \"FX=13\" - \"FX=14\" - \"FX=15\" - \"FX=16\" - \"FX=17\" - \"FX=18\" - \"FX=19\" - \"FX=20\" - \"FX=21\" - \"FX=22\" - \"FX=23\" - \"FX=24\" - \"FX=25\" - \"FX=26\" - \"FX=27\" - \"FX=28\" - \"FX=29\" - \"FX=30\" - \"FX=31\" - \"FX=32\" - \"FX=33\" - \"FX=34\" - \"FX=35\" - \"FX=36\" - \"FX=37\" - \"FX=38\" - \"FX=39\" - \"FX=40\" by @acid2000 Config json which is sent via autodiscovery: { \"name\" : \"WLED Light\" , \"stat_t\" : \"wled/840d8e989815/c\" , \"cmd_t\" : \"wled/840d8e989815\" , \"rgb_stat_t\" : \"wled/840d8e989815/c\" , \"rgb_cmd_t\" : \"wled/840d8e989815/col\" , \"bri_cmd_t\" : \"wled/840d8e989815\" , \"bri_stat_t\" : \"wled/840d8e989815/g\" , \"fx_cmd_t\" : \"wled/840d8e989815/api\" , \"fx_stat_t\" : \"wled/840d8e989815/api\" , \"bri_val_tpl\" : \"{{value}}\" , \"rgb_cmd_tpl\" : \"{{'#%02x%02x%02x' | format(red, green, blue)}}\" , \"rgb_val_tpl\" : \"{{value[1:3]|int(base=16)}},{{value[3:5]|int(base=16)}},{{value[5:7]|int(base=16)}}\" , \"qos\" : 0 , \"opt\" : true , \"pl_on\" : \"ON\" , \"pl_off\" : \"OFF\" , \"fx_val_tpl\" : \"{{value}}\" , \"fx_list\" : [ \"[FX=00] Solid\" , \"[FX=01] Blink\" , \"[FX=02] Breathe\" , \"[FX=03] Wipe\" , \"[FX=04] Wipe Random\" , \"[FX=05] Random Colors\" , \"[FX=06] Sweep\" , \"[FX=07] Dynamic\" , \"[FX=08] Colorloop\" , \"[FX=09] Rainbow\" , \"[FX=10] Scan\" , \"[FX=11] Dual Scan\" , \"[FX=12] Fade\" , \"[FX=13] Chase\" , \"[FX=14] Chase Rainbow\" , \"[FX=15] Running\" , \"[FX=16] Saw\" , \"[FX=17] Twinkle\" , \"[FX=18] Dissolve\" , \"[FX=19] Dissolve Rnd\" , \"[FX=20] Sparkle\" , \"[FX=21] Dark Sparkle\" , \"[FX=22] Sparkle+\" , \"[FX=23] Strobe\" , \"[FX=24] Strobe Rainbow\" , \"[FX=25] Mega Strobe\" , \"[FX=26] Blink Rainbow\" , \"[FX=27] Android\" , \"[FX=28] Chase\" , \"[FX=29] Chase Random\" , \"[FX=30] Chase Rainbow\" , \"[FX=31] Chase Flash\" , \"[FX=32] Chase Flash Rnd\" , \"[FX=33] Rainbow Runner\" , \"[FX=34] Colorful\" , \"[FX=35] Traffic Light\" , \"[FX=36] Sweep Random\" , \"[FX=37] Running 2\" , \"[FX=38] Red & Blue\" , \"[FX=39] Stream\" , \"[FX=40] Scanner\" , \"[FX=41] Lighthouse\" , \"[FX=42] Fireworks\" , \"[FX=43] Rain\" , \"[FX=44] Merry Christmas\" , \"[FX=45] Fire Flicker\" , \"[FX=46] Gradient\" , \"[FX=47] Loading\" , \"[FX=48] In Out\" , \"[FX=49] In In\" , \"[FX=50] Out Out\" , \"[FX=51] Out In\" , \"[FX=52] Circus\" , \"[FX=53] Halloween\" , \"[FX=54] Tri Chase\" , \"[FX=55] Tri Wipe\" , \"[FX=56] Tri Fade\" , \"[FX=57] Lightning\" , \"[FX=58] ICU\" , \"[FX=59] Multi Comet\" , \"[FX=60] Dual Scanner\" , \"[FX=61] Stream 2\" , \"[FX=62] Oscillate\" , \"[FX=63] Pride 2015\" , \"[FX=64] Juggle\" , \"[FX=65] Palette\" , \"[FX=66] Fire 2012\" , \"[FX=67] Colorwaves\" , \"[FX=68] BPM\" , \"[FX=69] Fill Noise\" , \"[FX=70] Noise 1\" , \"[FX=71] Noise 2\" , \"[FX=72] Noise 3\" , \"[FX=73] Noise 4\" , \"[FX=74] Colortwinkle\" , \"[FX=75] Lake\" , \"[FX=76] Meteor\" , \"[FX=77] Smooth Meteor\" , \"[FX=78] Railway\" , \"[FX=79] Ripple\" ] }","title":"Home Automation"},{"location":"advanced/home-automation/#domoticz","text":"Please see here !","title":"Domoticz:"},{"location":"advanced/home-automation/#openhab","text":"In openHAB 3 based environments you are able to use the native openHAB WLED Binding , which also supports discovery of your WLED devices. For older openHAB (2.5.x) environmantes the connection can be configured via MQTT broker & Openhab MQTT Binding (2.5x) with configuration files Please find the details here","title":"openHAB:"},{"location":"advanced/home-automation/#indigo-domotics","text":"Please see here !","title":"Indigo Domotics:"},{"location":"advanced/home-automation/#home-assistant","text":"","title":"Home Assistant"},{"location":"advanced/home-automation/#using-native-integration","text":"WLED can be configured using the integrations in the Home Assistant frontend. Menu: Configuration -> Integrations . In most cases, the WLED devices will be automatically discovered by Home Assistant. Those automatically discovered WLED devices are listed on the integrations page. If for some reason (e.g., due to lack of mDNS support on your network), the WLED device isn't discovered, it can be added manually. Click on the + sign to add an integration and click on WLED . After completing the configuration flow, the WLED integration will be available. WLED integration documentation","title":"Using native integration:"},{"location":"advanced/home-automation/#using-mqtt","text":"Alternatively, MQTT can be used (not recommended). Auto discovery is no longer supported since version 0.9 of WLED. In case you want to configure the device manually: light: - platform: mqtt name: \"Kitchen Floor Lights\" command_topic: \"wled/all\" brightness_command_topic: \"wled/all\" rgb_command_topic: \"wled/all/col\" rgb_command_template: \"{{ '#%02x%02x%02x' | format(red, green, blue)}}\" effect_command_topic : \"wled/all/api\" effect_list: - \"FX=0\" - \"FX=1\" - \"FX=2\" - \"FX=3\" - \"FX=4\" - \"FX=5\" - \"FX=6\" - \"FX=7\" - \"FX=8\" - \"FX=9\" - \"FX=10\" - \"FX=11\" - \"FX=12\" - \"FX=13\" - \"FX=14\" - \"FX=15\" - \"FX=16\" - \"FX=17\" - \"FX=18\" - \"FX=19\" - \"FX=20\" - \"FX=21\" - \"FX=22\" - \"FX=23\" - \"FX=24\" - \"FX=25\" - \"FX=26\" - \"FX=27\" - \"FX=28\" - \"FX=29\" - \"FX=30\" - \"FX=31\" - \"FX=32\" - \"FX=33\" - \"FX=34\" - \"FX=35\" - \"FX=36\" - \"FX=37\" - \"FX=38\" - \"FX=39\" - \"FX=40\" by @acid2000 Config json which is sent via autodiscovery: { \"name\" : \"WLED Light\" , \"stat_t\" : \"wled/840d8e989815/c\" , \"cmd_t\" : \"wled/840d8e989815\" , \"rgb_stat_t\" : \"wled/840d8e989815/c\" , \"rgb_cmd_t\" : \"wled/840d8e989815/col\" , \"bri_cmd_t\" : \"wled/840d8e989815\" , \"bri_stat_t\" : \"wled/840d8e989815/g\" , \"fx_cmd_t\" : \"wled/840d8e989815/api\" , \"fx_stat_t\" : \"wled/840d8e989815/api\" , \"bri_val_tpl\" : \"{{value}}\" , \"rgb_cmd_tpl\" : \"{{'#%02x%02x%02x' | format(red, green, blue)}}\" , \"rgb_val_tpl\" : \"{{value[1:3]|int(base=16)}},{{value[3:5]|int(base=16)}},{{value[5:7]|int(base=16)}}\" , \"qos\" : 0 , \"opt\" : true , \"pl_on\" : \"ON\" , \"pl_off\" : \"OFF\" , \"fx_val_tpl\" : \"{{value}}\" , \"fx_list\" : [ \"[FX=00] Solid\" , \"[FX=01] Blink\" , \"[FX=02] Breathe\" , \"[FX=03] Wipe\" , \"[FX=04] Wipe Random\" , \"[FX=05] Random Colors\" , \"[FX=06] Sweep\" , \"[FX=07] Dynamic\" , \"[FX=08] Colorloop\" , \"[FX=09] Rainbow\" , \"[FX=10] Scan\" , \"[FX=11] Dual Scan\" , \"[FX=12] Fade\" , \"[FX=13] Chase\" , \"[FX=14] Chase Rainbow\" , \"[FX=15] Running\" , \"[FX=16] Saw\" , \"[FX=17] Twinkle\" , \"[FX=18] Dissolve\" , \"[FX=19] Dissolve Rnd\" , \"[FX=20] Sparkle\" , \"[FX=21] Dark Sparkle\" , \"[FX=22] Sparkle+\" , \"[FX=23] Strobe\" , \"[FX=24] Strobe Rainbow\" , \"[FX=25] Mega Strobe\" , \"[FX=26] Blink Rainbow\" , \"[FX=27] Android\" , \"[FX=28] Chase\" , \"[FX=29] Chase Random\" , \"[FX=30] Chase Rainbow\" , \"[FX=31] Chase Flash\" , \"[FX=32] Chase Flash Rnd\" , \"[FX=33] Rainbow Runner\" , \"[FX=34] Colorful\" , \"[FX=35] Traffic Light\" , \"[FX=36] Sweep Random\" , \"[FX=37] Running 2\" , \"[FX=38] Red & Blue\" , \"[FX=39] Stream\" , \"[FX=40] Scanner\" , \"[FX=41] Lighthouse\" , \"[FX=42] Fireworks\" , \"[FX=43] Rain\" , \"[FX=44] Merry Christmas\" , \"[FX=45] Fire Flicker\" , \"[FX=46] Gradient\" , \"[FX=47] Loading\" , \"[FX=48] In Out\" , \"[FX=49] In In\" , \"[FX=50] Out Out\" , \"[FX=51] Out In\" , \"[FX=52] Circus\" , \"[FX=53] Halloween\" , \"[FX=54] Tri Chase\" , \"[FX=55] Tri Wipe\" , \"[FX=56] Tri Fade\" , \"[FX=57] Lightning\" , \"[FX=58] ICU\" , \"[FX=59] Multi Comet\" , \"[FX=60] Dual Scanner\" , \"[FX=61] Stream 2\" , \"[FX=62] Oscillate\" , \"[FX=63] Pride 2015\" , \"[FX=64] Juggle\" , \"[FX=65] Palette\" , \"[FX=66] Fire 2012\" , \"[FX=67] Colorwaves\" , \"[FX=68] BPM\" , \"[FX=69] Fill Noise\" , \"[FX=70] Noise 1\" , \"[FX=71] Noise 2\" , \"[FX=72] Noise 3\" , \"[FX=73] Noise 4\" , \"[FX=74] Colortwinkle\" , \"[FX=75] Lake\" , \"[FX=76] Meteor\" , \"[FX=77] Smooth Meteor\" , \"[FX=78] Railway\" , \"[FX=79] Ripple\" ] }","title":"Using MQTT"},{"location":"advanced/mapping/","text":"WLED now has the ability to remap your LED strip programmatically. What is it? This allows us to treat the WLED strip as if it is wired in any way - we can then use the mapping feature to address the strip in any order. This allows for matrix support, serpentine runs and such. How do we do it? Navigate to the edit page for your WLED device by adding /edit to its' address - for example, https://my-led-device.local/edit Use this edit page to create a file called ledmap.json . ledmap.json file needs to be a JSON formatted file with the the key being \"map\" and the value being an array of numbers representing the new order of pixels. The position of values in the array is the \"natural\" order of LEDs and the value entered is the new position. The ArduinoJSON library is * extremely *** white-space sensitive. If your ledmap.json file is not working, check for white-spaces where they should not be. The LED positions are zero-indexed. Examples In the below example (formatted multiple ways), we remap a strip of four LEDs from a physical order of 0 1 2 3 into a new order of 0 2 1 3. {\"map\":[0,2,1,3]} {\"map\":[ 0,2,1,3 ]} {\"map\":[ 0,2, 1,3 ]} This is another example that switches direction every 5 LEDs. It could be formatted any of the three ways demonstrated above. { \"map\" :[ 0 , 1 , 2 , 3 , 4 , 9 , 8 , 7 , 6 , 5 , 10 , 11 , 12 , 13 , 14 , 19 , 18 , 17 , 16 , 15 , 20 , 21 , 22 , 23 , 24 , 29 , 28 , 27 , 26 , 25 ]}","title":"Mapping"},{"location":"advanced/mapping/#what-is-it","text":"This allows us to treat the WLED strip as if it is wired in any way - we can then use the mapping feature to address the strip in any order. This allows for matrix support, serpentine runs and such.","title":"What is it?"},{"location":"advanced/mapping/#how-do-we-do-it","text":"Navigate to the edit page for your WLED device by adding /edit to its' address - for example, https://my-led-device.local/edit Use this edit page to create a file called ledmap.json . ledmap.json file needs to be a JSON formatted file with the the key being \"map\" and the value being an array of numbers representing the new order of pixels. The position of values in the array is the \"natural\" order of LEDs and the value entered is the new position. The ArduinoJSON library is * extremely *** white-space sensitive. If your ledmap.json file is not working, check for white-spaces where they should not be. The LED positions are zero-indexed.","title":"How do we do it?"},{"location":"advanced/mapping/#examples","text":"In the below example (formatted multiple ways), we remap a strip of four LEDs from a physical order of 0 1 2 3 into a new order of 0 2 1 3. {\"map\":[0,2,1,3]} {\"map\":[ 0,2,1,3 ]} {\"map\":[ 0,2, 1,3 ]} This is another example that switches direction every 5 LEDs. It could be formatted any of the three ways demonstrated above. { \"map\" :[ 0 , 1 , 2 , 3 , 4 , 9 , 8 , 7 , 6 , 5 , 10 , 11 , 12 , 13 , 14 , 19 , 18 , 17 , 16 , 15 , 20 , 21 , 22 , 23 , 24 , 29 , 28 , 27 , 26 , 25 ]}","title":"Examples"},{"location":"advanced/remote-access-ifttt/","text":"WLED is an open-source, DIY software. This means all services are hosted locally on your ESP8266. Because of this, you can only control your lights from within your local (home) network. If you need to control WLED from anywhere (the public internet) you can do so in multiple ways, some requiring additional hardware: 1. Use Blynk From version 0.7.1, WLED supports the free IoT cloud Blynk! See this for details! It has a nice app for you to control the lights from anywhere! 2. Use an Amazon Echo device If you have set up your Alexa device to control WLED, you can just use the Alexa App or another Echo device linked to your account to control your lights (on/off and brightness only) 3. Create a Port Forwarding Warning: An insecure HTTP connection is used, please do NOT edit sensitive info like the WiFi settings when connected via the port forwarding! This method offers more flexibility, but is also more involved. Keep in mind this causes anyone with your IP address to have access to your ESP8266! Setting up an OTA lock password is a must to prevent attackers from acquiring your WiFi credentials! To expose WLED to the internet, create a port forwarding for your ESP's IP in your router configuration. If your public IP changes a lot, make sure to also use a dynamic DNS service so your lights are always accessible. Unsure what any of this means or how to do it? Google for \"[your router model] port forwarding\"! Additionally, this opens up many new possibilities for automation! You can use a service like IFTTT Webhooks to send automated WLED API calls that can do anything from turning on the lights at a set time to changing their color if you get a new email! 4. Use hue sync If you have a Philips hue setup and sync WLED to it, you can control your WLED lights in any way it's possible to control your hue lights (hue App, Alexa (including colors), any other service that uses Philips hue API)","title":"Remote Access / IFTTT"},{"location":"advanced/remote-access-ifttt/#1-use-blynk","text":"From version 0.7.1, WLED supports the free IoT cloud Blynk! See this for details! It has a nice app for you to control the lights from anywhere!","title":"1. Use Blynk"},{"location":"advanced/remote-access-ifttt/#2-use-an-amazon-echo-device","text":"If you have set up your Alexa device to control WLED, you can just use the Alexa App or another Echo device linked to your account to control your lights (on/off and brightness only)","title":"2. Use an Amazon Echo device"},{"location":"advanced/remote-access-ifttt/#3-create-a-port-forwarding","text":"Warning: An insecure HTTP connection is used, please do NOT edit sensitive info like the WiFi settings when connected via the port forwarding! This method offers more flexibility, but is also more involved. Keep in mind this causes anyone with your IP address to have access to your ESP8266! Setting up an OTA lock password is a must to prevent attackers from acquiring your WiFi credentials! To expose WLED to the internet, create a port forwarding for your ESP's IP in your router configuration. If your public IP changes a lot, make sure to also use a dynamic DNS service so your lights are always accessible. Unsure what any of this means or how to do it? Google for \"[your router model] port forwarding\"! Additionally, this opens up many new possibilities for automation! You can use a service like IFTTT Webhooks to send automated WLED API calls that can do anything from turning on the lights at a set time to changing their color if you get a new email!","title":"3. Create a Port Forwarding"},{"location":"advanced/remote-access-ifttt/#4-use-hue-sync","text":"If you have a Philips hue setup and sync WLED to it, you can control your WLED lights in any way it's possible to control your hue lights (hue App, Alexa (including colors), any other service that uses Philips hue API)","title":"4. Use hue sync"},{"location":"advanced/security/","text":"WLED was designed in a way that you should be safe to have a router port forwarding to control the system from the public internet. This page will tell you what you can expect by WLEDs security. TLDR - what to do? A: If you just operate WLED within a local network and/or with a secured Access Point (change the default password \"wled1234\"!!) you are fine. If you have configured a port forwarding to control WLED from outside your local subnet, please make sure the setting \"OTA Lock\" is enabled and you have changed the default OTA password \"wledota\"! Also, NEVER edit sensitive data (like WiFi credentials) while connected via the port forwarding! 1: Is the connection itself safe? A: Technically not. The ESP8266 uses unencrypted HTTP traffic. Implementing HTTPS would take too much processing power and memory on this little device. This means an attacker could read your passwords during transmit. Therefore, to be safe, please do NOT change the AP/Client WiFi/OTA password from outside of your LAN via a forwarded port. If you are at home, you should be safe if your WiFi is secured. You can change any other setting while you're away, though. WLED doesn't send your actual password to the settings page, just its length. 2: What do you mean by secure then? A: WLED comes with the ability to carry out a software update via WiFi (OTA). However, no one must be able to flash a malicious new binary firmware to steal your WiFi credentials or make your ESP part of a botnet. Therefore, you should enable the \"OTA Lock\" setting and change its default passphrase \"wledota\". 3: Can I protect the light configuration or the settings page? A: Currently not. This is not sensitive information like your WiFi password. Anyone with your IP and port can control the lights. Open an issue if it should ever happen that somebody plays with your lights. I might consider adding an optional password lock then. For now, it is way too cumbersome for what it does. 4: I want to do a software update, but it says \"OTA lock active\"? A: You need to go to the settings page. Untick the \"OTA Lock\" setting and input your passphrase in the field below it. Now apply the settings and reboot. After that you can carry out the software update. Don't forget to re-enable OTA Lock afterwards! To enable, you don't have to enter the passphrase, unless you want to change it. For the lock to work you need to apply and reboot again. 5: Why is this OTA lock stuff that important? A: Your unencrypted WiFi password is stored in the module's EEPROM. It would be easy to \"update\" the software to a malicious version which sends your password to the attacker. OTA Lock makes sure only those with the passphrase may carry out a software update. And yes, while you can disable OTA lock by doing a factory reset, this would also kill the WiFi connection to the attacker. 6: Anything else? A: A personal tip from me is not to give anyone your IP to control the software who you do not wish to do so on a regular basis. It is not critical from a security standpoint, but it can be very annoying if someone plays with your lights, or even worse, change your AP credentials to the point where you can no longer access the module except via USB.","title":"Security"},{"location":"advanced/security/#tldr-what-to-do","text":"A: If you just operate WLED within a local network and/or with a secured Access Point (change the default password \"wled1234\"!!) you are fine. If you have configured a port forwarding to control WLED from outside your local subnet, please make sure the setting \"OTA Lock\" is enabled and you have changed the default OTA password \"wledota\"! Also, NEVER edit sensitive data (like WiFi credentials) while connected via the port forwarding!","title":"TLDR - what to do?"},{"location":"advanced/security/#1-is-the-connection-itself-safe","text":"A: Technically not. The ESP8266 uses unencrypted HTTP traffic. Implementing HTTPS would take too much processing power and memory on this little device. This means an attacker could read your passwords during transmit. Therefore, to be safe, please do NOT change the AP/Client WiFi/OTA password from outside of your LAN via a forwarded port. If you are at home, you should be safe if your WiFi is secured. You can change any other setting while you're away, though. WLED doesn't send your actual password to the settings page, just its length.","title":"1: Is the connection itself safe?"},{"location":"advanced/security/#2-what-do-you-mean-by-secure-then","text":"A: WLED comes with the ability to carry out a software update via WiFi (OTA). However, no one must be able to flash a malicious new binary firmware to steal your WiFi credentials or make your ESP part of a botnet. Therefore, you should enable the \"OTA Lock\" setting and change its default passphrase \"wledota\".","title":"2: What do you mean by secure then?"},{"location":"advanced/security/#3-can-i-protect-the-light-configuration-or-the-settings-page","text":"A: Currently not. This is not sensitive information like your WiFi password. Anyone with your IP and port can control the lights. Open an issue if it should ever happen that somebody plays with your lights. I might consider adding an optional password lock then. For now, it is way too cumbersome for what it does.","title":"3: Can I protect the light configuration or the settings page?"},{"location":"advanced/security/#4-i-want-to-do-a-software-update-but-it-says-ota-lock-active","text":"A: You need to go to the settings page. Untick the \"OTA Lock\" setting and input your passphrase in the field below it. Now apply the settings and reboot. After that you can carry out the software update. Don't forget to re-enable OTA Lock afterwards! To enable, you don't have to enter the passphrase, unless you want to change it. For the lock to work you need to apply and reboot again.","title":"4: I want to do a software update, but it says \"OTA lock active\"?"},{"location":"advanced/security/#5-why-is-this-ota-lock-stuff-that-important","text":"A: Your unencrypted WiFi password is stored in the module's EEPROM. It would be easy to \"update\" the software to a malicious version which sends your password to the attacker. OTA Lock makes sure only those with the passphrase may carry out a software update. And yes, while you can disable OTA lock by doing a factory reset, this would also kill the WiFi connection to the attacker.","title":"5: Why is this OTA lock stuff that important?"},{"location":"advanced/security/#6-anything-else","text":"A: A personal tip from me is not to give anyone your IP to control the software who you do not wish to do so on a regular basis. It is not critical from a security standpoint, but it can be very annoying if someone plays with your lights, or even worse, change your AP credentials to the point where you can no longer access the module except via USB.","title":"6: Anything else?"},{"location":"advanced/wiring/","text":"Overview RGB LEDs can draw a lot of current (amps). While most people usually worry about the dangers from high voltage, low voltage + high amperage can be dangerous too, as it can easily become a fire hazard in certain circumstances . Depending on your setup size (the number of LEDs you want to drive), use these tips to help guide your wiring. There are plenty of guides out there to help with power supply selection , which is out of scope of this page. Size your power supply to your installation both up and down, so you both provide them with enough current and don't introduce unnecessary risk. It's better to power 30 LEDs from a 10W (2A @5V) power supply than a 100W power supply, as you don't need to worry about the potential for as much energy flowing through small wires. As you increase the number of LEDs, you increase the amps your power supply will need to be able to provide. The more amps you're working with, the more you need to be cautious about your wiring and fusing . For example, if you want to power your LEDs off a sealed lead acid battery (e.g. a car battery), you need to be very careful about current. These kinds of batteries can supply hundreds of amps, so you need to ensure that you use fuses along the way to protect against shorts. If you're using USB pocket chargers on the other hand, they tend to be current limited (most provide only 1-2A max) so you can worry less about fusing there. Make sure to also check out this great list of resources to help you learn ! Small Setups (< 30 RGB LEDs) WLED has a great built-in automatic current-limiting feature, set to 850mA by default. If you have a very small setup (< 30 LEDs), you can use this feature to help simplify your wiring and keep things safe. In most circumstances, it's best to power your LED strip directly from the power supply and wire power to your WLED control board in parallel. {insert diagram here} With the current limiting feature turned on and for very small setups (on the smaller side of 1-30 LEDs), you can power the LED strip directly through the USB port of D1 mini or similar board. That is, power comes in to the control board through the USB port and out to a 5V pin. Each board will be a little different, so it would be wise to verify that you can do this for your specific board. You want to ensure that there are no voltage regulators, diodes, or other components between the 5V pin and the USB port input that are going to be damaged by the high-current draw of the LEDs. You also want to ensure that any PCB traces are big enough that they don't heat up with increased current. Never try to draw more than 1A through a board's USB port like this; the boards really aren't designed for large amounts of current to flow through them. When using this technique, make sure to add strain relief to your wires so that they don't flex and break. The easiest way to do this is to use hot glue. While you want to use plenty of hot glue, just be careful to not cover any components that are going to get hot with hot glue. Medium Setups (30-300 RGB LEDs) For a medium-sized setup of 30-300 LEDs, you should find a power supply that can provide enough current (see the link above) and make sure to power the strip directly. For setups with more than 150 LEDs, you should consider power injection. Power injection Power injection is where you connect multiple wires from your power supply to the strip in multiple places, usually once at the beginning and once at the end. This is needed because the LED strips can only pass a small amount of current through them and you need to ensure that all your power-hungry LEDs get fed enough power. If your LEDs are dim or discolored at one end of the strip, you should add power injection. When doing power injection, make sure your wires are rated for the amperage you wish to send over them. You should also check the voltage drop if you're doing a particularly long run. As a rough guide, you should never use anything thinner than 22AWG wire for power injection. For medium-sized setups, you should add fuses if your power supply is over 100W. Considering an inline fuse on each power injection line. Inline Fuses You should place the fuse as close to the power supply as possible, on the positive lead, so that as much of the current flows through it as possible. That will cause the fuse to blow if the power injection line shorts or if the strip shorts, instead of causing your power injection wire or strip to heat up. Buy a fuse that's rated just over what you expect your LED strip to draw. For example, if you calculate that your LEDs will draw at most 4.5A, buy a 5A fuse. First match your power injection wire size with the inline fuse's wire. If the inline fuse comes with 16AWG wire (it's usually printed on the wire itself in small type), you should use 16AWG or thicker wire for your power injection wire. If you use thinner wire, you weaken the utility of the inline fuse and risk your power injection wire heating up in the case of a failure. To wire in an inline fuse, trim back the positive wire (not ground) of your power injection line enough to allow the inline fuse to be spliced in. Place a cut of heat-shrink tubing over the wire so that the cable can be insulated once your solder joint is complete. Strip and bend both wires of your splice so that they create hooks to mechanically reinforce the joint, then solder. Cover with the heat-shrink tubing and you're done! Now you have a beautiful, professional-looking fused power injection line. Larger Setups (300+ RGB LEDs) The more power you're working with, the more you need to be careful about your wiring. If you're using a 150W or higher power supply or multiple power supplies, check out these tips: Wire ferrules If you're using stranded wire and lever-lock or screw terminals, all your wire \u2192 terminal connections should be terminated with a wire ferrule of the appropriate wire gauge. This is because stranded wires can splay and lose tension over time, creating a weaker connection that could lead to sparking. Loose strands can also cause shorts or break off. The same is true for tinned stranded wires: the solder can deform (especially if it's heated), loosening the screw terminal, and cause a weaker electrical connection or complete failure. That said, untinned stranded wire in a screw terminal actually creates a better connection than tinned stranded wire, so for high current applications where they could possibly heat up, don't tin them if you don't have ferrules. Shrouded wire ferrules also act as strain relief, minimizing mechanical damage if the wire moves at all. This is especially important for any installations that are mobile, could experience vibrations, or are installed/removed seasonally. Multiple power supplies When doing power injection with multiple power supplies never mix two power supplies on the same LED strip. You can connect grounds together, just never the positive rails. This means you need to segment your LEDs based on power supplies, including your power injection. For the same reasons listed below, never connect multiple power supplies to the same strip for power injection purposes, always fork one power supply and route it to the start/mid/end of the same strip. Because multiple power supplies could have subtle variations in their positive voltages (e.g. 12.1V and 12.3V), this could lead to power flowing in ways that aren't expected or which could be damaging to your equipment. In general, wired power supplies don't like to be directly connected to other power supplies unless they are explicitly designed for that purpose. This is not true for cell batteries, which are usually fine with being connected in parallel provided all the battery voltage + chemistry are the same. Even more tips Always check wire gauge + amp ratings and make sure to overcompensate by 2-3\u00d7 more, lower-current wires are better than fewer, higher-current wires Ensure that all strips are fused just above their max current. Fuses should be located as close to the power supply as possible. Make sure all distribution wires are neat, tidy, and mounted to a structure. If it needs to be loose to bridge an air gap, minimize the amount of dangling wire as much as possible. This ensures that if you were to have a wire become disconnected, it'll be easy to see where it is. Did you add fuses? Add fuses. Seriously.","title":"Wiring Protips"},{"location":"advanced/wiring/#overview","text":"RGB LEDs can draw a lot of current (amps). While most people usually worry about the dangers from high voltage, low voltage + high amperage can be dangerous too, as it can easily become a fire hazard in certain circumstances . Depending on your setup size (the number of LEDs you want to drive), use these tips to help guide your wiring. There are plenty of guides out there to help with power supply selection , which is out of scope of this page. Size your power supply to your installation both up and down, so you both provide them with enough current and don't introduce unnecessary risk. It's better to power 30 LEDs from a 10W (2A @5V) power supply than a 100W power supply, as you don't need to worry about the potential for as much energy flowing through small wires. As you increase the number of LEDs, you increase the amps your power supply will need to be able to provide. The more amps you're working with, the more you need to be cautious about your wiring and fusing . For example, if you want to power your LEDs off a sealed lead acid battery (e.g. a car battery), you need to be very careful about current. These kinds of batteries can supply hundreds of amps, so you need to ensure that you use fuses along the way to protect against shorts. If you're using USB pocket chargers on the other hand, they tend to be current limited (most provide only 1-2A max) so you can worry less about fusing there. Make sure to also check out this great list of resources to help you learn !","title":"Overview"},{"location":"advanced/wiring/#small-setups-30-rgb-leds","text":"WLED has a great built-in automatic current-limiting feature, set to 850mA by default. If you have a very small setup (< 30 LEDs), you can use this feature to help simplify your wiring and keep things safe. In most circumstances, it's best to power your LED strip directly from the power supply and wire power to your WLED control board in parallel. {insert diagram here} With the current limiting feature turned on and for very small setups (on the smaller side of 1-30 LEDs), you can power the LED strip directly through the USB port of D1 mini or similar board. That is, power comes in to the control board through the USB port and out to a 5V pin. Each board will be a little different, so it would be wise to verify that you can do this for your specific board. You want to ensure that there are no voltage regulators, diodes, or other components between the 5V pin and the USB port input that are going to be damaged by the high-current draw of the LEDs. You also want to ensure that any PCB traces are big enough that they don't heat up with increased current. Never try to draw more than 1A through a board's USB port like this; the boards really aren't designed for large amounts of current to flow through them. When using this technique, make sure to add strain relief to your wires so that they don't flex and break. The easiest way to do this is to use hot glue. While you want to use plenty of hot glue, just be careful to not cover any components that are going to get hot with hot glue.","title":"Small Setups (&lt; 30 RGB LEDs)"},{"location":"advanced/wiring/#medium-setups-30-300-rgb-leds","text":"For a medium-sized setup of 30-300 LEDs, you should find a power supply that can provide enough current (see the link above) and make sure to power the strip directly. For setups with more than 150 LEDs, you should consider power injection.","title":"Medium Setups (30-300 RGB LEDs)"},{"location":"advanced/wiring/#power-injection","text":"Power injection is where you connect multiple wires from your power supply to the strip in multiple places, usually once at the beginning and once at the end. This is needed because the LED strips can only pass a small amount of current through them and you need to ensure that all your power-hungry LEDs get fed enough power. If your LEDs are dim or discolored at one end of the strip, you should add power injection. When doing power injection, make sure your wires are rated for the amperage you wish to send over them. You should also check the voltage drop if you're doing a particularly long run. As a rough guide, you should never use anything thinner than 22AWG wire for power injection. For medium-sized setups, you should add fuses if your power supply is over 100W. Considering an inline fuse on each power injection line.","title":"Power injection"},{"location":"advanced/wiring/#inline-fuses","text":"You should place the fuse as close to the power supply as possible, on the positive lead, so that as much of the current flows through it as possible. That will cause the fuse to blow if the power injection line shorts or if the strip shorts, instead of causing your power injection wire or strip to heat up. Buy a fuse that's rated just over what you expect your LED strip to draw. For example, if you calculate that your LEDs will draw at most 4.5A, buy a 5A fuse. First match your power injection wire size with the inline fuse's wire. If the inline fuse comes with 16AWG wire (it's usually printed on the wire itself in small type), you should use 16AWG or thicker wire for your power injection wire. If you use thinner wire, you weaken the utility of the inline fuse and risk your power injection wire heating up in the case of a failure. To wire in an inline fuse, trim back the positive wire (not ground) of your power injection line enough to allow the inline fuse to be spliced in. Place a cut of heat-shrink tubing over the wire so that the cable can be insulated once your solder joint is complete. Strip and bend both wires of your splice so that they create hooks to mechanically reinforce the joint, then solder. Cover with the heat-shrink tubing and you're done! Now you have a beautiful, professional-looking fused power injection line.","title":"Inline Fuses"},{"location":"advanced/wiring/#larger-setups-300-rgb-leds","text":"The more power you're working with, the more you need to be careful about your wiring. If you're using a 150W or higher power supply or multiple power supplies, check out these tips:","title":"Larger Setups (300+ RGB LEDs)"},{"location":"advanced/wiring/#wire-ferrules","text":"If you're using stranded wire and lever-lock or screw terminals, all your wire \u2192 terminal connections should be terminated with a wire ferrule of the appropriate wire gauge. This is because stranded wires can splay and lose tension over time, creating a weaker connection that could lead to sparking. Loose strands can also cause shorts or break off. The same is true for tinned stranded wires: the solder can deform (especially if it's heated), loosening the screw terminal, and cause a weaker electrical connection or complete failure. That said, untinned stranded wire in a screw terminal actually creates a better connection than tinned stranded wire, so for high current applications where they could possibly heat up, don't tin them if you don't have ferrules. Shrouded wire ferrules also act as strain relief, minimizing mechanical damage if the wire moves at all. This is especially important for any installations that are mobile, could experience vibrations, or are installed/removed seasonally.","title":"Wire ferrules"},{"location":"advanced/wiring/#multiple-power-supplies","text":"When doing power injection with multiple power supplies never mix two power supplies on the same LED strip. You can connect grounds together, just never the positive rails. This means you need to segment your LEDs based on power supplies, including your power injection. For the same reasons listed below, never connect multiple power supplies to the same strip for power injection purposes, always fork one power supply and route it to the start/mid/end of the same strip. Because multiple power supplies could have subtle variations in their positive voltages (e.g. 12.1V and 12.3V), this could lead to power flowing in ways that aren't expected or which could be damaging to your equipment. In general, wired power supplies don't like to be directly connected to other power supplies unless they are explicitly designed for that purpose. This is not true for cell batteries, which are usually fine with being connected in parallel provided all the battery voltage + chemistry are the same.","title":"Multiple power supplies"},{"location":"advanced/wiring/#even-more-tips","text":"Always check wire gauge + amp ratings and make sure to overcompensate by 2-3\u00d7 more, lower-current wires are better than fewer, higher-current wires Ensure that all strips are fused just above their max current. Fuses should be located as close to the power supply as possible. Make sure all distribution wires are neat, tidy, and mounted to a structure. If it needs to be loose to bridge an air gap, minimize the amount of dangling wire as much as possible. This ensures that if you were to have a wire become disconnected, it'll be easy to see where it is. Did you add fuses? Add fuses. Seriously.","title":"Even more tips"},{"location":"basics/compatible-hardware/","text":"Still under construction, feel free to add to the list! This page lists some third-party hardware and/or tools that are working with WLED! Please use a decent and neutral description when adding things to this list. Tip Lists are in alphabetical order. The posistion of an item in the list does not indicate how good it is or if it will fit your use case. Please carefully compare all items in the category you are interested in, and you should find the one that suits your needs best in just a few minutes! Addressable LED Strips Sorting: 5v data only, 5v Data + Clock, 12v data only Type Voltage Comments SK6812 5v RGBW WS2811 5v usually found in IP68 sealed 12mm pixel strings WS2812B 5v WS2813 5v APA102 5v needs Clock/Data LPD8806 5v needs Clock/Data WS2801 5v needs Clock/Data GS8208 12v TM1814 12v RGBW WS2811 12v usually 3-LED segments, has data-line resistor WS2815 12v has a backup data line Controllers with WLED pre-installed Info Unless otherwise noted, controllers feature everything you need for most WLED setups, except a power supply, wiring and fuses, and of course the LEDs themselves! Name Description Athom Light Strip Controller Simple controller with enclosure for reliaby driving 3 pin 5V LEDs. Uses 2M ESP8266. Cadsbi Motion Smart Ready to use solution with 3 output ports, an external antenna, in a high quality metal enclosure ESPthings.io ET-AL01 DIY board for 5 Analog channels and/or up to 5 Digital LED channels (or a combination of the latter as required), Integrated level shifter, 5v/12/24v compatibility, 4x pull-up/down GPIO, serial interface and power distribution terminals. Can be used with Wemos D1-style ESP8266 or ESP32 boards. IOT4WLED Ready to use hardware for WLED! LedBox V2 LedBox V2 by StanleyProjects is a fully contained, sound reactive, ESP32 based module for controlling 5-12V addressable LED strips (WS2812, SK6812, etc.), supporting both 3-(VDD,DAT,GND) and 4-(VDD,DAT,CLK,GND) pin configuration. It includes a digital MEMS microphone, button and IR control, and a safety resettable fuse, all in a compact 3D printable case. The board comes all setup, flashed with sound reactive WLED fork , and can be purchased here . Luminxa v2.2.2 ESP32 My Baby's Got LED Certified open hardware . Easy plug-and-play WLED board for those that don't want to figure out the hardware - you won't even need a screwdriver to get started. PC power supply ( ATX ) powers three 5V injection points on 8A fuses. For sale now on Tindie ! Full details on the github repo and maker's website . QuinLED Dig-Uno 2021 updated version! DIY/Pre-Assembled board for digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and safety features such as a onboard fuse. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for medium-size WLED projects. QuinLED Dig-Quad 2021 updated version! DIY/Pre-Assembled board for 4 (5) channel digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and power distribution terminals with 5x onboard fuses for easy LED power injection. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for large-size WLED projects with advanced power and output requirements. Simple WLED Board Very simple DIY board, minimum of required components, option for 5V/12V LEDs. Easy to solder (no SMT components). Simple to understand connection schematics and pictures. Can be used with ESP8266 or ESP32 in D1 mini Format. WiFi Controlled Desk Lamp Open source PCB for WLED WLAN Pixel Controller Fully completed and control PCB with level shifter pre-flashed with WLED! WLED Wemos shield DIY board, 100% compatible with WLED project and WLED sound reactive fork . Integrated level shifter, 4 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Exposed pins for Analog and Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here . WLED waterproof controller with external antenna DIY board, designed for use outside permanently and for longer range Wi-Fi connection. No SMD components means it is easier to solder for DIYers. 100% compatible with WLED project. Level shifter, fuse for LED strip, resettable fuse for Wi-Fi module, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Build around ESP-07S module. Firmware is here Controllers WLED can be installed to Warning If the controller does not have a USB port and no firmware supporting wireless updates pre-installed, installing WLED to it requires an FTDI flasher and in some cases, soldering. Name Chip Description SP108e v2 ESP8285 Hardware-Modification required and different versions exists! 8285-based 2M Controller that supports addressable RGBWW LED strips, also with CLK line (like ATA102). 5-24v DC input, 85mm x 45mm x 23mm. Vendors list spledapps 'Led Shop' as the supporting mobile application. Board is silk screened with 'SP108e'. No pads are exposed and a second processor is used to control the LEDs. Pin7 of that processor needs to be grounded to hold it in reset state. Then you can connect GPIO0 to GND and TX, RX, VCC, GND for flashing. Connect GPIO2 to R4 for DATA out and GPIO13 to R3 for CLK out. Flashed via PlatformIO, esptool. OTA updates work. Pics of pinout here: https://github.com/psxde/sp108e-led-controller/raw/main/sp108ev2_inside.png SP501e ESP8285 8285-based 1M Controller that supports both Addressable and PWM-based RGBWW LED strips. Note that recent versions have 2M. 5-24v DC input, 55mm x 26mm, sold under BTF lighting, RGBZone, etc. Vendors all list 'Fairynest' as the supporting mobile application. Board is silk screened with 'SP5XXe' but no other markings. Serial pads are exposed on the back-side of the board with GND and GPIO0 right next to each other and thus Flash access fairly straight forward. GPIO 0 must be pulled to GND at boot and throughout the flashing process. I/O configuration: LEDPIN is 'GPIO03' for Addressable, BTNPIN is GPIO 1. PWM pin out for RGBWW: CW: 14, WW: 12, B: 13, R: 15 and G: 4. Flashed via PlatformIO, ESPHome and Tasmotizer. Pics of board here: https://github.com/Operation760/SP501e-RGB-LED-Controller-/blob/master/SP501e_top_bottom_traced.jpg Flashing Connections: https://github.com/tonyn0/sp501e-flashing/blob/main/sp501e%20flash.png SP511e ESP8285 An ESP8285 2MB controller with 3 case buttons, built in mic, IR receiver, 38 key remote, and dual outputs. The dual outputs are connected to the same data pin. There is a step-by-step guide for Installing WLED on SP511E Controller . Other products WLED can be installed to Name Chip Description Merkury MI-BW210-999W ESP8285 Tuya Style WiFi Led light bulb, Warm White + RGB. There are two versions of this same bulb sold in the same packaging only way to check is to look at the bulb, EBEQPW92 uses PWM led control and is compatible with WLED however EBEQPW06 uses an SM16716 chip and is not currently compatible with WLED. Managed to flash using tuya-convert and a custom WLED build with the following analog pinout: B:4, G:5, R:13, W:14. Extras disabled to allow OTA, OTA only way to flash this, programming headers are not internally available. Shelly RGBW2 ESP8266 For \"analog\" LED use only! Runs on 12-24VDC. One button and one input. Pins: R=12, G=15, B=14, W=4. Finished, commercial product that can be flashed. Binary code fork is here and firmware is here . More info and flashing docs Athom 15W bulb ESP8266 (2M flash) 15W bulb with RGB, warm white, and cold white LEDs. Compatible with all voltages, available form factors E27, B22 and GU10 Raw ESP8266/ESP32 boards Tip While these can work like the controllers above without extra hardware, you might get flickering without adding an external levelshifter. Using them without a controller board/shield is only recommended if you like tinkering with electronic projects. Name Chip Description Adafruit Feather Huzzah ESP8266 General-purpose ESP8266 Board with USB, battery connector, etc. D1 mini-style ESP32 ESP32 A nice compact ESP32 development board. D1 mini compatible layout. ESP32 DevKitC v4 ESP32 The original ESP32 Development Board made by Espressif Systems. H803 WiFi ESP8266 ESP8266EX based controller with level shifter inside. Data pin GPIO1 Clock pin GPIO14. Tested with WS2813 strip and Firmware fork is here . NodeMCU-32s ESP32 The most common ESP32 development board. Works well, depending on the board you might have to press the \"Boot\" button while USB flashing Heltec WiFi Kit 8 ESP8266 Another alternative of ESP8266 board. OLED display 128X32 pixel, battery charger on board. Almost the same functionality and price as the Wemos board. Plus it can be used in projects with external batteries. NodeMCU ESP8266 Another popular ESP8266 development board. A bit bigger than the D1 and has pins pre-soldered. There are multiple versions with slight differences, not all are tested. ESP-01 ESP8266 One of the first and cheapest ESP8266 boards available. Not recommended for general WLED installs (needs external USB/serial chip, voltage converter, only has 1mb of flash, so soon no wireless updates possible) Olimex ESP32 POE ESP32 Ethernet (PoE) and WiFi, though usage of the ethernet port requires a custom compile. The PoE should not be used to power LEDs due to a maximum throughput of 4W. For most installations, standard ethernet should be used, supplying power through the 5V pin. QuinLED-ESP32 Custom design D1 Mini32 formfactor ESP32 module Fed up with the bad quality of generic ESP32 modules on the market, designed my own \"beefed up\" version. Available in multiple versions: QuinLED-ESP32-AB (Antenna Board), QuinLED-ESP32-AE (Antenna External), QuinLED-ESP32-ABE (Antenna Board + Ethernet). Aircoookie's recommendation for running WLED. RE5V1C ESP8285 5v DC input - onboard 10A relay TwilightLord-ESP32 ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, 800mA LDO, 8MB flash and PTC fused. D1 Mini32 form factor and compatible pin out. 16MB Flash version also available Wemos D1 mini ESP8266 An affordable ESP8266 development board. Aircoookie's recommendation for running WLED if you want an ESP8266 board. Current version: 3.1.0 Wemos D1 mini Pro ESP8266 A newer development board with an external antenna connector. Works very well with WLED. Recommended if your signal strength is too low with another board. Current version: 2.0.0. Version 1.0.0 has the same form factor as the D1 mini. WT32-ETH01 ESP32 Under development! Ethernet (non-PoE) and WiFi enabled alternative to the Olimex boards, for 1/4 the cost. Features no PoE, and requires initial flashing of a custom compiled image using a FTDI or similar USB to serial converter. Useful boards and addons TwilightLord-ESP32 Ethernet Shield | Ethernet Shield (10/100Mbps) for ESP32 boards. Stackable with D1 Mini32 form factor boards. Wemos D1 mini Level Shifter Shield | A level shifter shield (74HCT125) - by Evil Genius Labs LLC. Levelshifters Name Description SN74AHCT125N Aircoookie's recommended levelshifter. Used on the QuinLed Dig-Uno and WLED Wemos shield . 74AHCT32 Same pinout as above can be used. This is just an OR gate, but any AHCT gate can be used if inputs are connected appropriately. ;) SN74HCT125N Slower, cheaper version. Works just as well for WS2812, but not recommended for APA102. TXS0102 A bidirectional levelshifter that works well with WLED. F-Amp Level shifter/data booster Warning I2C shifters are generally too slow for WLED, so don't use them. USB/TTL adapters Name Description CH340 CH340 module instead of CP2102, PL2303 or FTDI/FTDT. The CH340 can deliver more current which is needed while the flash process depending on the board type. The timing is also much more stable. For boards with an USB/TTL adapter onboard this is NOT needed ESP uploader CP2102N module. Same USB to UART converter as many recent Dev boards using. Featuring latest USB-C connector. For use with many ESP32, ESP8266, ESP8255 and Tuya based modules. 3.3V logic and 5V power pass through for custom boards. Miscellaneous Sorting: Sensors, Displays, Actuators Name Description HC-SR501 PIR sensor with adjustable sensitivity and on time delay (suitable as a button). HC-SR602 PIR sensor (not suitable as a button but can be used with PIR sensor usermod). TSOP38238 IR receiver compatible with most IR remotes. SSD1305 I2C display, can be used with 4 Line Display usermod . SSD1306 I2C & SPI display, can be used with 4 Line Display usermod. 5V relay Relay module. Some will require 5V to trigger so you will need level-shifted output (similar as for LEDs) for proper functionality or a circuit with transistor or MOSFET. DS18B20 Recommended temperature sensor for use with WLED. Compatible with the Temperature usermod","title":"Hardware"},{"location":"basics/compatible-hardware/#addressable-led-strips","text":"Sorting: 5v data only, 5v Data + Clock, 12v data only Type Voltage Comments SK6812 5v RGBW WS2811 5v usually found in IP68 sealed 12mm pixel strings WS2812B 5v WS2813 5v APA102 5v needs Clock/Data LPD8806 5v needs Clock/Data WS2801 5v needs Clock/Data GS8208 12v TM1814 12v RGBW WS2811 12v usually 3-LED segments, has data-line resistor WS2815 12v has a backup data line","title":"Addressable LED Strips"},{"location":"basics/compatible-hardware/#controllers-with-wled-pre-installed","text":"Info Unless otherwise noted, controllers feature everything you need for most WLED setups, except a power supply, wiring and fuses, and of course the LEDs themselves! Name Description Athom Light Strip Controller Simple controller with enclosure for reliaby driving 3 pin 5V LEDs. Uses 2M ESP8266. Cadsbi Motion Smart Ready to use solution with 3 output ports, an external antenna, in a high quality metal enclosure ESPthings.io ET-AL01 DIY board for 5 Analog channels and/or up to 5 Digital LED channels (or a combination of the latter as required), Integrated level shifter, 5v/12/24v compatibility, 4x pull-up/down GPIO, serial interface and power distribution terminals. Can be used with Wemos D1-style ESP8266 or ESP32 boards. IOT4WLED Ready to use hardware for WLED! LedBox V2 LedBox V2 by StanleyProjects is a fully contained, sound reactive, ESP32 based module for controlling 5-12V addressable LED strips (WS2812, SK6812, etc.), supporting both 3-(VDD,DAT,GND) and 4-(VDD,DAT,CLK,GND) pin configuration. It includes a digital MEMS microphone, button and IR control, and a safety resettable fuse, all in a compact 3D printable case. The board comes all setup, flashed with sound reactive WLED fork , and can be purchased here . Luminxa v2.2.2 ESP32 My Baby's Got LED Certified open hardware . Easy plug-and-play WLED board for those that don't want to figure out the hardware - you won't even need a screwdriver to get started. PC power supply ( ATX ) powers three 5V injection points on 8A fuses. For sale now on Tindie ! Full details on the github repo and maker's website . QuinLED Dig-Uno 2021 updated version! DIY/Pre-Assembled board for digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and safety features such as a onboard fuse. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for medium-size WLED projects. QuinLED Dig-Quad 2021 updated version! DIY/Pre-Assembled board for 4 (5) channel digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and power distribution terminals with 5x onboard fuses for easy LED power injection. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for large-size WLED projects with advanced power and output requirements. Simple WLED Board Very simple DIY board, minimum of required components, option for 5V/12V LEDs. Easy to solder (no SMT components). Simple to understand connection schematics and pictures. Can be used with ESP8266 or ESP32 in D1 mini Format. WiFi Controlled Desk Lamp Open source PCB for WLED WLAN Pixel Controller Fully completed and control PCB with level shifter pre-flashed with WLED! WLED Wemos shield DIY board, 100% compatible with WLED project and WLED sound reactive fork . Integrated level shifter, 4 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Exposed pins for Analog and Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here . WLED waterproof controller with external antenna DIY board, designed for use outside permanently and for longer range Wi-Fi connection. No SMD components means it is easier to solder for DIYers. 100% compatible with WLED project. Level shifter, fuse for LED strip, resettable fuse for Wi-Fi module, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Build around ESP-07S module. Firmware is here","title":"Controllers with WLED pre-installed"},{"location":"basics/compatible-hardware/#controllers-wled-can-be-installed-to","text":"Warning If the controller does not have a USB port and no firmware supporting wireless updates pre-installed, installing WLED to it requires an FTDI flasher and in some cases, soldering. Name Chip Description SP108e v2 ESP8285 Hardware-Modification required and different versions exists! 8285-based 2M Controller that supports addressable RGBWW LED strips, also with CLK line (like ATA102). 5-24v DC input, 85mm x 45mm x 23mm. Vendors list spledapps 'Led Shop' as the supporting mobile application. Board is silk screened with 'SP108e'. No pads are exposed and a second processor is used to control the LEDs. Pin7 of that processor needs to be grounded to hold it in reset state. Then you can connect GPIO0 to GND and TX, RX, VCC, GND for flashing. Connect GPIO2 to R4 for DATA out and GPIO13 to R3 for CLK out. Flashed via PlatformIO, esptool. OTA updates work. Pics of pinout here: https://github.com/psxde/sp108e-led-controller/raw/main/sp108ev2_inside.png SP501e ESP8285 8285-based 1M Controller that supports both Addressable and PWM-based RGBWW LED strips. Note that recent versions have 2M. 5-24v DC input, 55mm x 26mm, sold under BTF lighting, RGBZone, etc. Vendors all list 'Fairynest' as the supporting mobile application. Board is silk screened with 'SP5XXe' but no other markings. Serial pads are exposed on the back-side of the board with GND and GPIO0 right next to each other and thus Flash access fairly straight forward. GPIO 0 must be pulled to GND at boot and throughout the flashing process. I/O configuration: LEDPIN is 'GPIO03' for Addressable, BTNPIN is GPIO 1. PWM pin out for RGBWW: CW: 14, WW: 12, B: 13, R: 15 and G: 4. Flashed via PlatformIO, ESPHome and Tasmotizer. Pics of board here: https://github.com/Operation760/SP501e-RGB-LED-Controller-/blob/master/SP501e_top_bottom_traced.jpg Flashing Connections: https://github.com/tonyn0/sp501e-flashing/blob/main/sp501e%20flash.png SP511e ESP8285 An ESP8285 2MB controller with 3 case buttons, built in mic, IR receiver, 38 key remote, and dual outputs. The dual outputs are connected to the same data pin. There is a step-by-step guide for Installing WLED on SP511E Controller .","title":"Controllers WLED can be installed to"},{"location":"basics/compatible-hardware/#other-products-wled-can-be-installed-to","text":"Name Chip Description Merkury MI-BW210-999W ESP8285 Tuya Style WiFi Led light bulb, Warm White + RGB. There are two versions of this same bulb sold in the same packaging only way to check is to look at the bulb, EBEQPW92 uses PWM led control and is compatible with WLED however EBEQPW06 uses an SM16716 chip and is not currently compatible with WLED. Managed to flash using tuya-convert and a custom WLED build with the following analog pinout: B:4, G:5, R:13, W:14. Extras disabled to allow OTA, OTA only way to flash this, programming headers are not internally available. Shelly RGBW2 ESP8266 For \"analog\" LED use only! Runs on 12-24VDC. One button and one input. Pins: R=12, G=15, B=14, W=4. Finished, commercial product that can be flashed. Binary code fork is here and firmware is here . More info and flashing docs Athom 15W bulb ESP8266 (2M flash) 15W bulb with RGB, warm white, and cold white LEDs. Compatible with all voltages, available form factors E27, B22 and GU10","title":"Other products WLED can be installed to"},{"location":"basics/compatible-hardware/#raw-esp8266esp32-boards","text":"Tip While these can work like the controllers above without extra hardware, you might get flickering without adding an external levelshifter. Using them without a controller board/shield is only recommended if you like tinkering with electronic projects. Name Chip Description Adafruit Feather Huzzah ESP8266 General-purpose ESP8266 Board with USB, battery connector, etc. D1 mini-style ESP32 ESP32 A nice compact ESP32 development board. D1 mini compatible layout. ESP32 DevKitC v4 ESP32 The original ESP32 Development Board made by Espressif Systems. H803 WiFi ESP8266 ESP8266EX based controller with level shifter inside. Data pin GPIO1 Clock pin GPIO14. Tested with WS2813 strip and Firmware fork is here . NodeMCU-32s ESP32 The most common ESP32 development board. Works well, depending on the board you might have to press the \"Boot\" button while USB flashing Heltec WiFi Kit 8 ESP8266 Another alternative of ESP8266 board. OLED display 128X32 pixel, battery charger on board. Almost the same functionality and price as the Wemos board. Plus it can be used in projects with external batteries. NodeMCU ESP8266 Another popular ESP8266 development board. A bit bigger than the D1 and has pins pre-soldered. There are multiple versions with slight differences, not all are tested. ESP-01 ESP8266 One of the first and cheapest ESP8266 boards available. Not recommended for general WLED installs (needs external USB/serial chip, voltage converter, only has 1mb of flash, so soon no wireless updates possible) Olimex ESP32 POE ESP32 Ethernet (PoE) and WiFi, though usage of the ethernet port requires a custom compile. The PoE should not be used to power LEDs due to a maximum throughput of 4W. For most installations, standard ethernet should be used, supplying power through the 5V pin. QuinLED-ESP32 Custom design D1 Mini32 formfactor ESP32 module Fed up with the bad quality of generic ESP32 modules on the market, designed my own \"beefed up\" version. Available in multiple versions: QuinLED-ESP32-AB (Antenna Board), QuinLED-ESP32-AE (Antenna External), QuinLED-ESP32-ABE (Antenna Board + Ethernet). Aircoookie's recommendation for running WLED. RE5V1C ESP8285 5v DC input - onboard 10A relay TwilightLord-ESP32 ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, 800mA LDO, 8MB flash and PTC fused. D1 Mini32 form factor and compatible pin out. 16MB Flash version also available Wemos D1 mini ESP8266 An affordable ESP8266 development board. Aircoookie's recommendation for running WLED if you want an ESP8266 board. Current version: 3.1.0 Wemos D1 mini Pro ESP8266 A newer development board with an external antenna connector. Works very well with WLED. Recommended if your signal strength is too low with another board. Current version: 2.0.0. Version 1.0.0 has the same form factor as the D1 mini. WT32-ETH01 ESP32 Under development! Ethernet (non-PoE) and WiFi enabled alternative to the Olimex boards, for 1/4 the cost. Features no PoE, and requires initial flashing of a custom compiled image using a FTDI or similar USB to serial converter.","title":"Raw ESP8266/ESP32 boards"},{"location":"basics/compatible-hardware/#useful-boards-and-addons","text":"TwilightLord-ESP32 Ethernet Shield | Ethernet Shield (10/100Mbps) for ESP32 boards. Stackable with D1 Mini32 form factor boards. Wemos D1 mini Level Shifter Shield | A level shifter shield (74HCT125) - by Evil Genius Labs LLC.","title":"Useful boards and addons"},{"location":"basics/compatible-hardware/#levelshifters","text":"Name Description SN74AHCT125N Aircoookie's recommended levelshifter. Used on the QuinLed Dig-Uno and WLED Wemos shield . 74AHCT32 Same pinout as above can be used. This is just an OR gate, but any AHCT gate can be used if inputs are connected appropriately. ;) SN74HCT125N Slower, cheaper version. Works just as well for WS2812, but not recommended for APA102. TXS0102 A bidirectional levelshifter that works well with WLED. F-Amp Level shifter/data booster Warning I2C shifters are generally too slow for WLED, so don't use them.","title":"Levelshifters"},{"location":"basics/compatible-hardware/#usbttl-adapters","text":"Name Description CH340 CH340 module instead of CP2102, PL2303 or FTDI/FTDT. The CH340 can deliver more current which is needed while the flash process depending on the board type. The timing is also much more stable. For boards with an USB/TTL adapter onboard this is NOT needed ESP uploader CP2102N module. Same USB to UART converter as many recent Dev boards using. Featuring latest USB-C connector. For use with many ESP32, ESP8266, ESP8255 and Tuya based modules. 3.3V logic and 5V power pass through for custom boards.","title":"USB/TTL adapters"},{"location":"basics/compatible-hardware/#miscellaneous","text":"Sorting: Sensors, Displays, Actuators Name Description HC-SR501 PIR sensor with adjustable sensitivity and on time delay (suitable as a button). HC-SR602 PIR sensor (not suitable as a button but can be used with PIR sensor usermod). TSOP38238 IR receiver compatible with most IR remotes. SSD1305 I2C display, can be used with 4 Line Display usermod . SSD1306 I2C & SPI display, can be used with 4 Line Display usermod. 5V relay Relay module. Some will require 5V to trigger so you will need level-shifted output (similar as for LEDs) for proper functionality or a circuit with transistor or MOSFET. DS18B20 Recommended temperature sensor for use with WLED. Compatible with the Temperature usermod","title":"Miscellaneous"},{"location":"basics/compatible-software/","text":"Still under construction, feel free to add to the list! This page lists some third-party software that can interface with WLED! Controllers Controllers use the WLED API to change the current light settings. Name Description WLED-GUI This is a cross-platform desktop app for WLED. You can use it on Windows, Linux and Mac. Home Assistant Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. ioBroker adapter Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. openHAB Another more professional feature rich home automation system. WLED integration made easy. Link 2 node-red-contrib-wled Node-RED nodes for WLED Lumia Stream Allows for control of your lights from streaming software OctoPrint-WLED Connect your OctoPrint install to your WLED install using this plugin to show things like printer status, progress and more! Sources Source programs generate light data and stream them to WLED in real time. Name Description LedFx A music visualization tool written in Python. Connects to WLED via E1.31 or UDP. Dr.Zzs tutorial video Prismatik WLED-WiFi (native) Ambilight via WiFi or serial - natively supports UDP (WARLS, DRGB, DNRGB protocols). Prismatik WLED-WiFi (plugin) Ambilight via WiFi - a Plugin alternative for Prismatik WLED support. xLights xLights is a Light Sequencer and Show scheduler which works with WLED. Dr.Zzs has made some videos to set it up. Intro Video Hyperion.ng Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Tutorial video , Dr.Zzs video Hyperion (Classic) Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Enigmalight Ambilight clone for broadcom based linux receivers. It supports many LED devices. Support for WLED through USB Adalight/Momo. Download to various forums use the WEB search function of your browser. Q Light Controller+ QLC+ is a free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc. QLC+ runs on Linux, Windows (XP+), macOS (10.7+) and the Raspberry Pi. WLED can be used with E1.31 (sACN). use major version 4, as 5 is in development. Various Name Description Logitech WLED Sync Windows tray application to sync Logitech gaming peripherals to WLED.","title":"Software"},{"location":"basics/compatible-software/#controllers","text":"Controllers use the WLED API to change the current light settings. Name Description WLED-GUI This is a cross-platform desktop app for WLED. You can use it on Windows, Linux and Mac. Home Assistant Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. ioBroker adapter Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. openHAB Another more professional feature rich home automation system. WLED integration made easy. Link 2 node-red-contrib-wled Node-RED nodes for WLED Lumia Stream Allows for control of your lights from streaming software OctoPrint-WLED Connect your OctoPrint install to your WLED install using this plugin to show things like printer status, progress and more!","title":"Controllers"},{"location":"basics/compatible-software/#sources","text":"Source programs generate light data and stream them to WLED in real time. Name Description LedFx A music visualization tool written in Python. Connects to WLED via E1.31 or UDP. Dr.Zzs tutorial video Prismatik WLED-WiFi (native) Ambilight via WiFi or serial - natively supports UDP (WARLS, DRGB, DNRGB protocols). Prismatik WLED-WiFi (plugin) Ambilight via WiFi - a Plugin alternative for Prismatik WLED support. xLights xLights is a Light Sequencer and Show scheduler which works with WLED. Dr.Zzs has made some videos to set it up. Intro Video Hyperion.ng Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Tutorial video , Dr.Zzs video Hyperion (Classic) Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Enigmalight Ambilight clone for broadcom based linux receivers. It supports many LED devices. Support for WLED through USB Adalight/Momo. Download to various forums use the WEB search function of your browser. Q Light Controller+ QLC+ is a free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc. QLC+ runs on Linux, Windows (XP+), macOS (10.7+) and the Raspberry Pi. WLED can be used with E1.31 (sACN). use major version 4, as 5 is in development.","title":"Sources"},{"location":"basics/compatible-software/#various","text":"Name Description Logitech WLED Sync Windows tray application to sync Logitech gaming peripherals to WLED.","title":"Various"},{"location":"basics/compiling-wled/","text":"You want to add custom features to WLED, use non-default pins, or add in a usermod? You've found the right place! WLED has come to rely on so many dependencies in the latest versions that building with the Arduino IDE is no longer recommended. Instead, installing Visual Studio Code and its PlatformIO (PIO) extension is easier, as it will install the ESP Arduino core, all the required libraries and the correct compilation settings for you automatically. Installation guide (PlatformIO, recommended) Make sure Git client is installed on your system. If it isn't, you can get it here . Download and install the free Visual Studio Code by Microsoft. Open VS Code and go to the Extensions manager (the icon with the stacked blocks in the left bar) Search for platformio ide and install the PlatformIO extension Download the WLED source code by executing git clone https://github.com/Aircoookie/WLED.git in some folder. Alternatively fork the WLED project first and download it from your fork Go to File -> Open Folder and open that root WLED folder (the one that contains platformio.ini , NOT the wled00 folder) Compilation guide (PlatformIO) Tip Make sure Git Client is installed on your system. You can get it here . In VS Code, open the file platformio.ini . Add a semicolon in front of the line that says default_envs = travis_esp8266, travis_esp32 to comment it out. Select your build environment by un-commenting one of the lines starting with ; default_envs = . Please remove BOTH the ; and the whitespace behind it to correctly uncomment the line. For most ESP8266 boards, the d1_mini environment is best. In the blue bottom bar, hit the checkmark to compile WLED or the arrow pointing right to compile and upload! Picture Guide Success! If you get one of these two errors, hit the checkmark icon once again to compile and that time the code should build without problems! error: wled00\\wled00.ino.cpp: No such file or directory FileNotFoundError: [WinError 2] The system cannot find the file specified: '[...].sconsign37.dblite' Compilation guide (Arduino IDE, not recommended) Follow a guide to setup your Arduino IDE (I am using version 1.8.9) with the ESP8266 libraries. For current compiles I recommend the latest Arduino core version 2.7.4. If you do not wish to install all libraries manually it is recommended to download the PlatformIO extension for VS Code (see above). You will need to install a few libraries: Library Name Platform NeoPixelBus (2.6.0) All FastLED All ESPAsyncWebServer Aircoookie fork (2.0.0) All IRRemoteESP8266 All ESPAsyncTCP ESP8266 only ESPAsyncUDP ESP8266 only AsyncTCP for ESP32 ESP32 only LITTLEFS_esp32 * ESP32 only * Please see the installation guide . You might need to enable a define in the library code. All other dependencies are included with WLED for convenience. Now compile and flash the software! Make sure you erase everything when you flash! (If your board config does not provide this option, you can Sketch -> Export compiled Binary and upload with any ESP flashing tool .) Compilation settings (Arduino IDE) ESP8266: Arduino Core v2.7.4 Board: NodeMCU 1.0 (ESP-12E module) (or select your ESP board) CPU frequency: 80 MHz Flash size : 4MB (1MB SPIFFS) LwIP variant: v1.4 Higher Bandwidth (try 2 if you experience issues) Upload speed: Any, 921600 recommended ESP8266-07 (External Antenna): Variants have 512kB or 1MB flash Be sure to use DOUT mode when flashing Flash Size 1MB (128k SPIFFS) 512kB variant no longer compatible ESP-07s (External Antenna): Variant have 4MB flash Settings as for NodeMCU or Wemos ESP32: Arduino Core v1.0.4","title":"Compiling WLED"},{"location":"basics/compiling-wled/#installation-guide-platformio-recommended","text":"Make sure Git client is installed on your system. If it isn't, you can get it here . Download and install the free Visual Studio Code by Microsoft. Open VS Code and go to the Extensions manager (the icon with the stacked blocks in the left bar) Search for platformio ide and install the PlatformIO extension Download the WLED source code by executing git clone https://github.com/Aircoookie/WLED.git in some folder. Alternatively fork the WLED project first and download it from your fork Go to File -> Open Folder and open that root WLED folder (the one that contains platformio.ini , NOT the wled00 folder)","title":"Installation guide (PlatformIO, recommended)"},{"location":"basics/compiling-wled/#compilation-guide-platformio","text":"Tip Make sure Git Client is installed on your system. You can get it here . In VS Code, open the file platformio.ini . Add a semicolon in front of the line that says default_envs = travis_esp8266, travis_esp32 to comment it out. Select your build environment by un-commenting one of the lines starting with ; default_envs = . Please remove BOTH the ; and the whitespace behind it to correctly uncomment the line. For most ESP8266 boards, the d1_mini environment is best. In the blue bottom bar, hit the checkmark to compile WLED or the arrow pointing right to compile and upload! Picture Guide Success! If you get one of these two errors, hit the checkmark icon once again to compile and that time the code should build without problems! error: wled00\\wled00.ino.cpp: No such file or directory FileNotFoundError: [WinError 2] The system cannot find the file specified: '[...].sconsign37.dblite'","title":"Compilation guide (PlatformIO)"},{"location":"basics/compiling-wled/#compilation-guide-arduino-ide-not-recommended","text":"Follow a guide to setup your Arduino IDE (I am using version 1.8.9) with the ESP8266 libraries. For current compiles I recommend the latest Arduino core version 2.7.4. If you do not wish to install all libraries manually it is recommended to download the PlatformIO extension for VS Code (see above). You will need to install a few libraries: Library Name Platform NeoPixelBus (2.6.0) All FastLED All ESPAsyncWebServer Aircoookie fork (2.0.0) All IRRemoteESP8266 All ESPAsyncTCP ESP8266 only ESPAsyncUDP ESP8266 only AsyncTCP for ESP32 ESP32 only LITTLEFS_esp32 * ESP32 only * Please see the installation guide . You might need to enable a define in the library code. All other dependencies are included with WLED for convenience. Now compile and flash the software! Make sure you erase everything when you flash! (If your board config does not provide this option, you can Sketch -> Export compiled Binary and upload with any ESP flashing tool .)","title":"Compilation guide (Arduino IDE, not recommended)"},{"location":"basics/compiling-wled/#compilation-settings-arduino-ide","text":"ESP8266: Arduino Core v2.7.4 Board: NodeMCU 1.0 (ESP-12E module) (or select your ESP board) CPU frequency: 80 MHz Flash size : 4MB (1MB SPIFFS) LwIP variant: v1.4 Higher Bandwidth (try 2 if you experience issues) Upload speed: Any, 921600 recommended ESP8266-07 (External Antenna): Variants have 512kB or 1MB flash Be sure to use DOUT mode when flashing Flash Size 1MB (128k SPIFFS) 512kB variant no longer compatible ESP-07s (External Antenna): Variant have 4MB flash Settings as for NodeMCU or Wemos ESP32: Arduino Core v1.0.4","title":"Compilation settings (Arduino IDE)"},{"location":"basics/faq/","text":"This page will continually get updated with questions often asked. Contents Installation What binary should I use? I've flashed a bin, but i get no response at all Connection issues Once I attach LEDs, I can't connect to the ESP anymore! I have entered my WiFi credentials and rebooted, but I can not connect to the module now! The module once was connected, but I can no longer reach it. The wled-xxx.local address (mDNS) does not work. Is it safe to do a port forwarding to the public internet to control the lights from anywhere? My device is unresponsive or animations lag! I'm having a bootloop! (LEDs turn on every ~5seconds) I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently! Still having connection issues/connection dropping: what more can i check? Compilation issues When compiling WLED in VS Code using platformio, I get an error. LED issues My LEDs don't turn on at all. My LEDs don't get as bright as they should! My LEDs are unable to be set into an consistent solid color. When I select green, the LEDs turn red! My LEDs act funny and flicker randomly. Not all my LEDs turn on. How to turn off the bright blue onboard LED? Why is gpio2/D4 the default LED pin? Why can I only use 500 LEDs on the ESP8266 GPIO pin 3? What LED strip hardware is supported by WLED? General questions What does the name WLED mean? What do the WLED version names mean? What is the difference between the brightness sliders in the web UI? My Segments are gone after a reboot! May I sell a product running WLED? My question or solution is not on this page Check out the WLED forum! Look through the Issues If I report a new Issue, what do i need to share? Installation What binary should I use? Please see this page . I've flashed a bin, but i get no response at all Some users report first erasing the flash (yes, even on a new device) sometimes helps . Connection issues Once I attach LEDs, I can't connect to the ESP anymore! The gpio2/D4 pin needs to be high (pullup) at powerup time for the controller to boot successfully. If you accidentally connected the strip the wrong way (if it has arrows printed on, make sure they face away from the pin, otherwise pay attention to the DIN printing). Most strips have the 3-pin male JST connector with 3 holes on the input side. Some users have reported troubles booting even with the direction being correct. In that case, please try adding a 3.3 or 4.7kOhms resistor between the data pin and 3v3 pin! I have entered my WiFi credentials and rebooted, but I can not connect to the module now! If you did not enter a static IP, the module will automatically obtain a dynamic IP from the router. You can check it in the router configuration or in the settings page, if the Access Point is still enabled. An easier way is to use the WLED Android app which features automatic discovery! The module once was connected, but I can no longer reach it First, make sure you can reach the connected WiFi yourself (with another device). See if you can connect to the Access Point, then go to 4.3.2.1/reset . Else, power-cycle the module manually. The wled-xxx.local address (mDNS) does not work This only works with Apple devices out of the box. You can install Bonjour to make it work in Windows. For Android there is no convenient way to achieve it, though you can use apps like \"Bonjour search\" to find the IP. I highly recommend you install the WLED app, which makes automatic discovery easy! Is it safe to do a port forwarding to the public internet to control the lights from anywhere? See this page. My device is unresponsive or animations lag! You are probably using too many sync interfaces. Please only enable one of Hue sync, MQTT, or Blynk at a time. For optimal performance, use two devices and sync them via the UDP notifier. Maybe you are also using a very high amount of LEDs. 750 is the recommended maximum. If using E1.31 feature on an ESP32, try \"Disabling WiFi Sleep\" in the WiFi setup section to reduce lag/stuttering of visual effects. I'm having a bootloop! (LEDs turn on every ~5seconds) Please open an issue or message me on Discord to resolve your issue. Most of the time, wiping the flash (Arduino IDE compile setting: Erase flash -> All flash contents) resolves the issue. Unfortunately it will also reset all your settings and presets. You can also try if using a different ESP resolves the issue. If you compiled with lwip version 2, try version 1.4 Higher Bandwidth instead! Still having connection issues/connection dropping: what more can i check? Try disabling \"Emulate Alexa device\" in Sync settings before entering your home Wifi credentials. Check whether mDNS is on or off and toggle it: does it make a difference? Same for 'NTP'. Same for 'Sync Send'. Check your router: is your 2.4Ghz on band 1: if not, try it please. If you have the possibility to try another 8266, please try it. I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently! Realtime effect streaming uses a rather large bandwidth as data is transmitted uncompressed. For example, to drive 1000 LEDs at 30 fps, you will need a data rate of 720 kBit/s, which is difficult to achieve with most cheap ESP boards over WiFi. Even if you split the total amount of LEDs across multiple controllers, your WiFi network could become the limiting factor quickly. The best way to ensure a low-latency, reliable, fluid stream when using large quantities of LEDs is to invest in a wired Ethernet ESP32 board like QuinLED-Dig boards with ethernet or the Olimex ESP32-POE. There is a 9 DMX universe limit by default in WLED. You can raise it in line 240 of const.h (E131_MAX_UNIVERSE_COUNT 9) and compile your own binary, but the performance of 2000 LEDs over WiFi will likely not be good unless you use an Ethernet enabled board. If Ethernet is not an option, decrease your LED count as far as possible, lower the frame rate in the sending software and make sure the WiFi signal reception of the board is good. Even without Ethernet, a board with an external antenna is significantly better than a PCB antenna board. Furthermore I suggest using the DDP protocol if available in your sender software (available in xLights). DDP has a smaller packet header and because of the reduced overhead the fluidity of your animations will be a bit better. Compilation issues When compiling WLED in VS Code using platformio, I get an error Try building again. If the error says the wled00.ino.cpp or .sconsign27.db.dblite file could not be found, this often helps. You can also try this ! LED issues My LEDs don't turn on at all. Please make sure you have connected the strip to GPIO2 and it is sufficiently powered. My LEDs don't get as bright as they should! If the brightness slider in the UI is already at maximum, try checking the auto brightness limiter in the LED settings. Set the milliamp limit to slightly below the rating of your power supply. If the LEDs are still too dim or change color towards the end of the strip, there may be a significant voltage drop. Try injecting 5v power at the end or middle of the strip with some appropriate cabling. My LEDs are unable to be set into an consistent solid color If the LEDs should be individually addressable, like the SK6812, but instead they only behave as either RED,GREEN OR BlUE pixels (in a row). You might not have enabled (settings -> led preferences) \"LEDs are 4-channel type (RGBW)\" for an RGBW/RGBWW/RGBNW strip. This behaviour is accompanied by WLED being unable to address all LEDs, if you specify the exact amount of LEDs in the strip. When I select green, the LEDs turn red! Depending on the type of LEDs used, Red and Green or other colors might be reversed. You can change the order in LED settings. WS2812B and most related chips use GRB, WS2811 uses RGB in most cases. My LEDs act funny and flicker randomly Reason 1 If you use an external 5V power supply for your LEDs, please connect the GND of power supply, LEDs, and ESP. Otherwise, the LEDs can't read the data signal from the ESP. Reason 2 The ESP8266 is a 3.3V microcontroller while the WS2812B LED uses 5V. I have personally got away with this in most cases, but you should technically add a level shifter. A string of WS2811 did not work in one case (pure static white). A possible workaround is chaining a single WS2812B pixel in front and checking \"Skip first LED\" in the settings. My recommended levelshifter is the SN74AHCT125N, also used in the QuinLED Dig-Uno board. If you don't have a level shifter, you can use this creative workaround . Reason 3 Your data line can only be so long . Try out with less or thicker wire between your data pin on your controller and the LED strip, or add (see video) some voltage booster (which can make even 40m data wire length work ;-)). Reason 4 If they don't flicker, but display funny colors, try switching between RGB/RGBW modes in LED settings. Not all my LEDs turn on Reason 1 By default the LED count is set to 30. If you have more and can power them, go to LED settings and increase the LED count! Please also enter the milliamp rating of your 5v power supply for optimal brightness in the field below it. Do not increase the mA number if you power LEDs directly from the 5V pin of the ESP! WLED supports up to 1500 individual LEDs right now (recommended maximum is 750 LEDs). Reason 2 An LED in your chain may be broken. Try another strip or removing the first LED that doesn't light up. Make sure you are in solid effect mode and the LED count is set high enough first! How to turn off the bright blue onboard LED? This LED can be very distracting. Unfortunately it can't easily be disabled as it shares the gpio2/D4 pin with the LED output. Currently there are 3 workarounds: Cover the LED Remove the LED permanently (desolder or apply pressure with e.g. a flathead screwdriver) Use a different LEDPIN , although the default is recommended for stable operation Why is gpio2/D4 the default LED pin? Although pins D1 and D2 are usually regarded the best GPIO pins to use in an ESP8266 project, D4 is the default in WLED, despite having two major and one minor drawback. The major drawbacks are the permanently lit blue onboard LEDs and the fact that the pin level needs to be high (pullup) at powerup or the controller will not boot. A minor drawback is that the Serial1 bus can not be used, but this is irrelevant in most cases, as the USB/serial converter is connected to the other Serial interface. The reason for using this pin is that it uses UART hardware driving, which increases stability and decreases CPU overhead especially with larger amounts of pixels. Why can I only use 500 LEDs on the ESP8266 GPIO pin 3? The problem is the DMA hardware driving method used on (just) that pin. It works well, but uses 4x (!) as much RAM memory as the UART hardware driving on pin 2 and the bitbang driver on all other pins. What LED strip hardware is supported by WLED? The compatible chipsets for the color-coding are 1 pin: WS2812B (5V) WS2811 (12V power, with 5V signal) WS2813 (WS2812 with redundant data on 2 wires DI and BI, to resist LEDs failure) WS2815 (like WS2813 but 12V), send 5V signal on BI. BTF2815 (cheaper 12V) SK6813 (redundant like WS2813) SK6812 (can support up to 4 colors, commonly GRBW) SK6805 (3 colors) 2 pins (clock CI and data DI) chips: APA102 SK9822 WS2801 (uses gpio0 and 2) LPD8806 Beside the digital addressable LED strips the good old analog LED strips are supported, too: 4 pins: RGB 5 pins: RGBW / RGBWW / RGBCW / RGBNW (RGB + one white channel) 6 pins: RGBCT (RGB + 2 white channels) Note: Support is only for Alexa. General Questions What does the name WLED mean? WiFi Lighting Effects Driver. Also it has LED in the name and is similar to the official term for WiFi, WLAN! What do the WLED version names mean? WLED version names are Japanese! Here is a nice list of their meanings: Version Name Kanji Meaning 0.10 Namigai \u6d6a\u8c9d Geoduck (don't google it!) 0.11.0 Mirai \u672a\u6765 Future 0.11.1 Fumikiri \u8e0f\u5207 Railroad crossing 0.12 Hikari \u5149 Light 0.13 Toki \u6642 Time N/A Kuuhaku \u7a7a\u767d Blank What is the difference between the brightness sliders in the web UI? There are three brightness slider types in the web UI. The white one in the top bar is the master brightness - it scales down every single color and all effects, palettes and segments by the same factor. In contrast, the slider underneath the color wheel only applies to the currently selected color and will not affect the brightness of other colors or Palettes. It is recommended to use this slider only if you like a darker version of a color alongside other, brighter colors. It should not be used to control the overall brightness, so it is preferable to leave it on maximum and instead use the master brightness control. There is a third brightness slider in each Segment panel. This serves the same purpose as master brightness, but limited to that segment. Please note that this does not override the master brightness, but instead is an additional downscaling. (If you set both Master and Segment brightness sliders to 50%, the resulting brightness is 25%) My Segments are gone after a reboot! Segments are non-persistant by default. If you want to load your preset at every startup, just do the following: Set your segments up as desired Go into the Favorites tab in the web UI, click the save checkbox and save the config to preset slot number 16 In LED settings, set Boot Preset to 16 This will be improved in a future release, so that you will be able to save multiple segment configurations! May I sell a product running WLED? WLED is licensed under the MIT license, thus you are free to use it in any way you wish as long as you retain the copyright notice and accept that I am not to be held liable for anything regarding your use of the software. For product pages, a link to the WLED GitHub repository would be hugely appreciated ! My question or solution is not on this page Check out the WLED forum! You can check out and use the WLED Discourse forum . Look through the Issues Maybe someone already reported your issue, so everybody supplying support would be grateful if you take some time to search through the existing issues . If I report a new Issue, what do i need to share? When you create a ticket, please share: exact controller, maybe a link to the shop you bought it from LED-strip type and amount of LEDs Specifications of your power supply (max. current/voltage) how you wired up all components (a diagram and/or picture often helps) the BIN-file you tried to flash (version and file name) or your IDE version if compiling from source Have you followed the quick start and compile settings at https://docs.wled.me ? Has it worked before? Does it works without any LEDs connected? (for instance the controller just connected to your PC over USB) Are you using/trying to use DHCP or static IP? Did you try to use a mobile hotspot instead of your WLAN AP/home wifi?","title":"FAQ"},{"location":"basics/faq/#contents","text":"","title":"Contents"},{"location":"basics/faq/#installation","text":"What binary should I use? I've flashed a bin, but i get no response at all","title":"Installation"},{"location":"basics/faq/#connection-issues","text":"Once I attach LEDs, I can't connect to the ESP anymore! I have entered my WiFi credentials and rebooted, but I can not connect to the module now! The module once was connected, but I can no longer reach it. The wled-xxx.local address (mDNS) does not work. Is it safe to do a port forwarding to the public internet to control the lights from anywhere? My device is unresponsive or animations lag! I'm having a bootloop! (LEDs turn on every ~5seconds) I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently! Still having connection issues/connection dropping: what more can i check?","title":"Connection issues"},{"location":"basics/faq/#compilation-issues","text":"When compiling WLED in VS Code using platformio, I get an error.","title":"Compilation issues"},{"location":"basics/faq/#led-issues","text":"My LEDs don't turn on at all. My LEDs don't get as bright as they should! My LEDs are unable to be set into an consistent solid color. When I select green, the LEDs turn red! My LEDs act funny and flicker randomly. Not all my LEDs turn on. How to turn off the bright blue onboard LED? Why is gpio2/D4 the default LED pin? Why can I only use 500 LEDs on the ESP8266 GPIO pin 3? What LED strip hardware is supported by WLED?","title":"LED issues"},{"location":"basics/faq/#general-questions","text":"What does the name WLED mean? What do the WLED version names mean? What is the difference between the brightness sliders in the web UI? My Segments are gone after a reboot! May I sell a product running WLED?","title":"General questions"},{"location":"basics/faq/#my-question-or-solution-is-not-on-this-page","text":"Check out the WLED forum! Look through the Issues If I report a new Issue, what do i need to share?","title":"My question or solution is not on this page"},{"location":"basics/faq/#installation_1","text":"","title":"Installation"},{"location":"basics/faq/#what-binary-should-i-use","text":"Please see this page .","title":"What binary should I use?"},{"location":"basics/faq/#ive-flashed-a-bin-but-i-get-no-response-at-all","text":"Some users report first erasing the flash (yes, even on a new device) sometimes helps .","title":"I've flashed a bin, but i get no response at all"},{"location":"basics/faq/#connection-issues_1","text":"","title":"Connection issues"},{"location":"basics/faq/#once-i-attach-leds-i-cant-connect-to-the-esp-anymore","text":"The gpio2/D4 pin needs to be high (pullup) at powerup time for the controller to boot successfully. If you accidentally connected the strip the wrong way (if it has arrows printed on, make sure they face away from the pin, otherwise pay attention to the DIN printing). Most strips have the 3-pin male JST connector with 3 holes on the input side. Some users have reported troubles booting even with the direction being correct. In that case, please try adding a 3.3 or 4.7kOhms resistor between the data pin and 3v3 pin!","title":"Once I attach LEDs, I can't connect to the ESP anymore!"},{"location":"basics/faq/#i-have-entered-my-wifi-credentials-and-rebooted-but-i-can-not-connect-to-the-module-now","text":"If you did not enter a static IP, the module will automatically obtain a dynamic IP from the router. You can check it in the router configuration or in the settings page, if the Access Point is still enabled. An easier way is to use the WLED Android app which features automatic discovery!","title":"I have entered my WiFi credentials and rebooted, but I can not connect to the module now!"},{"location":"basics/faq/#the-module-once-was-connected-but-i-can-no-longer-reach-it","text":"First, make sure you can reach the connected WiFi yourself (with another device). See if you can connect to the Access Point, then go to 4.3.2.1/reset . Else, power-cycle the module manually.","title":"The module once was connected, but I can no longer reach it"},{"location":"basics/faq/#the-wled-xxxlocal-address-mdns-does-not-work","text":"This only works with Apple devices out of the box. You can install Bonjour to make it work in Windows. For Android there is no convenient way to achieve it, though you can use apps like \"Bonjour search\" to find the IP. I highly recommend you install the WLED app, which makes automatic discovery easy!","title":"The wled-xxx.local address (mDNS) does not work"},{"location":"basics/faq/#is-it-safe-to-do-a-port-forwarding-to-the-public-internet-to-control-the-lights-from-anywhere","text":"See this page.","title":"Is it safe to do a port forwarding to the public internet to control the lights from anywhere?"},{"location":"basics/faq/#my-device-is-unresponsive-or-animations-lag","text":"You are probably using too many sync interfaces. Please only enable one of Hue sync, MQTT, or Blynk at a time. For optimal performance, use two devices and sync them via the UDP notifier. Maybe you are also using a very high amount of LEDs. 750 is the recommended maximum. If using E1.31 feature on an ESP32, try \"Disabling WiFi Sleep\" in the WiFi setup section to reduce lag/stuttering of visual effects.","title":"My device is unresponsive or animations lag!"},{"location":"basics/faq/#im-having-a-bootloop-leds-turn-on-every-5seconds","text":"Please open an issue or message me on Discord to resolve your issue. Most of the time, wiping the flash (Arduino IDE compile setting: Erase flash -> All flash contents) resolves the issue. Unfortunately it will also reset all your settings and presets. You can also try if using a different ESP resolves the issue. If you compiled with lwip version 2, try version 1.4 Higher Bandwidth instead!","title":"I'm having a bootloop! (LEDs turn on every ~5seconds)"},{"location":"basics/faq/#still-having-connection-issuesconnection-dropping-what-more-can-i-check","text":"Try disabling \"Emulate Alexa device\" in Sync settings before entering your home Wifi credentials. Check whether mDNS is on or off and toggle it: does it make a difference? Same for 'NTP'. Same for 'Sync Send'. Check your router: is your 2.4Ghz on band 1: if not, try it please. If you have the possibility to try another 8266, please try it.","title":"Still having connection issues/connection dropping: what more can i check?"},{"location":"basics/faq/#i-am-running-realtime-eg-e131-and-not-all-of-my-leds-are-driven-fluently","text":"Realtime effect streaming uses a rather large bandwidth as data is transmitted uncompressed. For example, to drive 1000 LEDs at 30 fps, you will need a data rate of 720 kBit/s, which is difficult to achieve with most cheap ESP boards over WiFi. Even if you split the total amount of LEDs across multiple controllers, your WiFi network could become the limiting factor quickly. The best way to ensure a low-latency, reliable, fluid stream when using large quantities of LEDs is to invest in a wired Ethernet ESP32 board like QuinLED-Dig boards with ethernet or the Olimex ESP32-POE. There is a 9 DMX universe limit by default in WLED. You can raise it in line 240 of const.h (E131_MAX_UNIVERSE_COUNT 9) and compile your own binary, but the performance of 2000 LEDs over WiFi will likely not be good unless you use an Ethernet enabled board. If Ethernet is not an option, decrease your LED count as far as possible, lower the frame rate in the sending software and make sure the WiFi signal reception of the board is good. Even without Ethernet, a board with an external antenna is significantly better than a PCB antenna board. Furthermore I suggest using the DDP protocol if available in your sender software (available in xLights). DDP has a smaller packet header and because of the reduced overhead the fluidity of your animations will be a bit better.","title":"I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently!"},{"location":"basics/faq/#compilation-issues_1","text":"","title":"Compilation issues"},{"location":"basics/faq/#when-compiling-wled-in-vs-code-using-platformio-i-get-an-error","text":"Try building again. If the error says the wled00.ino.cpp or .sconsign27.db.dblite file could not be found, this often helps. You can also try this !","title":"When compiling WLED in VS Code using platformio, I get an error"},{"location":"basics/faq/#led-issues_1","text":"","title":"LED issues"},{"location":"basics/faq/#my-leds-dont-turn-on-at-all","text":"Please make sure you have connected the strip to GPIO2 and it is sufficiently powered.","title":"My LEDs don't turn on at all."},{"location":"basics/faq/#my-leds-dont-get-as-bright-as-they-should","text":"If the brightness slider in the UI is already at maximum, try checking the auto brightness limiter in the LED settings. Set the milliamp limit to slightly below the rating of your power supply. If the LEDs are still too dim or change color towards the end of the strip, there may be a significant voltage drop. Try injecting 5v power at the end or middle of the strip with some appropriate cabling.","title":"My LEDs don't get as bright as they should!"},{"location":"basics/faq/#my-leds-are-unable-to-be-set-into-an-consistent-solid-color","text":"If the LEDs should be individually addressable, like the SK6812, but instead they only behave as either RED,GREEN OR BlUE pixels (in a row). You might not have enabled (settings -> led preferences) \"LEDs are 4-channel type (RGBW)\" for an RGBW/RGBWW/RGBNW strip. This behaviour is accompanied by WLED being unable to address all LEDs, if you specify the exact amount of LEDs in the strip.","title":"My LEDs are unable to be set into an consistent solid color"},{"location":"basics/faq/#when-i-select-green-the-leds-turn-red","text":"Depending on the type of LEDs used, Red and Green or other colors might be reversed. You can change the order in LED settings. WS2812B and most related chips use GRB, WS2811 uses RGB in most cases.","title":"When I select green, the LEDs turn red!"},{"location":"basics/faq/#my-leds-act-funny-and-flicker-randomly","text":"","title":"My LEDs act funny and flicker randomly"},{"location":"basics/faq/#reason-1","text":"If you use an external 5V power supply for your LEDs, please connect the GND of power supply, LEDs, and ESP. Otherwise, the LEDs can't read the data signal from the ESP.","title":"Reason 1"},{"location":"basics/faq/#reason-2","text":"The ESP8266 is a 3.3V microcontroller while the WS2812B LED uses 5V. I have personally got away with this in most cases, but you should technically add a level shifter. A string of WS2811 did not work in one case (pure static white). A possible workaround is chaining a single WS2812B pixel in front and checking \"Skip first LED\" in the settings. My recommended levelshifter is the SN74AHCT125N, also used in the QuinLED Dig-Uno board. If you don't have a level shifter, you can use this creative workaround .","title":"Reason 2"},{"location":"basics/faq/#reason-3","text":"Your data line can only be so long . Try out with less or thicker wire between your data pin on your controller and the LED strip, or add (see video) some voltage booster (which can make even 40m data wire length work ;-)).","title":"Reason 3"},{"location":"basics/faq/#reason-4","text":"If they don't flicker, but display funny colors, try switching between RGB/RGBW modes in LED settings.","title":"Reason 4"},{"location":"basics/faq/#not-all-my-leds-turn-on","text":"","title":"Not all my LEDs turn on"},{"location":"basics/faq/#reason-1_1","text":"By default the LED count is set to 30. If you have more and can power them, go to LED settings and increase the LED count! Please also enter the milliamp rating of your 5v power supply for optimal brightness in the field below it. Do not increase the mA number if you power LEDs directly from the 5V pin of the ESP! WLED supports up to 1500 individual LEDs right now (recommended maximum is 750 LEDs).","title":"Reason 1"},{"location":"basics/faq/#reason-2_1","text":"An LED in your chain may be broken. Try another strip or removing the first LED that doesn't light up. Make sure you are in solid effect mode and the LED count is set high enough first!","title":"Reason 2"},{"location":"basics/faq/#how-to-turn-off-the-bright-blue-onboard-led","text":"This LED can be very distracting. Unfortunately it can't easily be disabled as it shares the gpio2/D4 pin with the LED output. Currently there are 3 workarounds: Cover the LED Remove the LED permanently (desolder or apply pressure with e.g. a flathead screwdriver) Use a different LEDPIN , although the default is recommended for stable operation","title":"How to turn off the bright blue onboard LED?"},{"location":"basics/faq/#why-is-gpio2d4-the-default-led-pin","text":"Although pins D1 and D2 are usually regarded the best GPIO pins to use in an ESP8266 project, D4 is the default in WLED, despite having two major and one minor drawback. The major drawbacks are the permanently lit blue onboard LEDs and the fact that the pin level needs to be high (pullup) at powerup or the controller will not boot. A minor drawback is that the Serial1 bus can not be used, but this is irrelevant in most cases, as the USB/serial converter is connected to the other Serial interface. The reason for using this pin is that it uses UART hardware driving, which increases stability and decreases CPU overhead especially with larger amounts of pixels.","title":"Why is gpio2/D4 the default LED pin?"},{"location":"basics/faq/#why-can-i-only-use-500-leds-on-the-esp8266-gpio-pin-3","text":"The problem is the DMA hardware driving method used on (just) that pin. It works well, but uses 4x (!) as much RAM memory as the UART hardware driving on pin 2 and the bitbang driver on all other pins.","title":"Why can I only use 500 LEDs on the ESP8266 GPIO pin 3?"},{"location":"basics/faq/#what-led-strip-hardware-is-supported-by-wled","text":"The compatible chipsets for the color-coding are 1 pin: WS2812B (5V) WS2811 (12V power, with 5V signal) WS2813 (WS2812 with redundant data on 2 wires DI and BI, to resist LEDs failure) WS2815 (like WS2813 but 12V), send 5V signal on BI. BTF2815 (cheaper 12V) SK6813 (redundant like WS2813) SK6812 (can support up to 4 colors, commonly GRBW) SK6805 (3 colors) 2 pins (clock CI and data DI) chips: APA102 SK9822 WS2801 (uses gpio0 and 2) LPD8806 Beside the digital addressable LED strips the good old analog LED strips are supported, too: 4 pins: RGB 5 pins: RGBW / RGBWW / RGBCW / RGBNW (RGB + one white channel) 6 pins: RGBCT (RGB + 2 white channels) Note: Support is only for Alexa.","title":"What LED strip hardware is supported by WLED?"},{"location":"basics/faq/#general-questions_1","text":"","title":"General Questions"},{"location":"basics/faq/#what-does-the-name-wled-mean","text":"WiFi Lighting Effects Driver. Also it has LED in the name and is similar to the official term for WiFi, WLAN!","title":"What does the name WLED mean?"},{"location":"basics/faq/#what-do-the-wled-version-names-mean","text":"WLED version names are Japanese! Here is a nice list of their meanings: Version Name Kanji Meaning 0.10 Namigai \u6d6a\u8c9d Geoduck (don't google it!) 0.11.0 Mirai \u672a\u6765 Future 0.11.1 Fumikiri \u8e0f\u5207 Railroad crossing 0.12 Hikari \u5149 Light 0.13 Toki \u6642 Time N/A Kuuhaku \u7a7a\u767d Blank","title":"What do the WLED version names mean?"},{"location":"basics/faq/#what-is-the-difference-between-the-brightness-sliders-in-the-web-ui","text":"There are three brightness slider types in the web UI. The white one in the top bar is the master brightness - it scales down every single color and all effects, palettes and segments by the same factor. In contrast, the slider underneath the color wheel only applies to the currently selected color and will not affect the brightness of other colors or Palettes. It is recommended to use this slider only if you like a darker version of a color alongside other, brighter colors. It should not be used to control the overall brightness, so it is preferable to leave it on maximum and instead use the master brightness control. There is a third brightness slider in each Segment panel. This serves the same purpose as master brightness, but limited to that segment. Please note that this does not override the master brightness, but instead is an additional downscaling. (If you set both Master and Segment brightness sliders to 50%, the resulting brightness is 25%)","title":"What is the difference between the brightness sliders in the web UI?"},{"location":"basics/faq/#my-segments-are-gone-after-a-reboot","text":"Segments are non-persistant by default. If you want to load your preset at every startup, just do the following: Set your segments up as desired Go into the Favorites tab in the web UI, click the save checkbox and save the config to preset slot number 16 In LED settings, set Boot Preset to 16 This will be improved in a future release, so that you will be able to save multiple segment configurations!","title":"My Segments are gone after a reboot!"},{"location":"basics/faq/#may-i-sell-a-product-running-wled","text":"WLED is licensed under the MIT license, thus you are free to use it in any way you wish as long as you retain the copyright notice and accept that I am not to be held liable for anything regarding your use of the software. For product pages, a link to the WLED GitHub repository would be hugely appreciated !","title":"May I sell a product running WLED?"},{"location":"basics/faq/#my-question-or-solution-is-not-on-this-page_1","text":"","title":"My question or solution is not on this page"},{"location":"basics/faq/#check-out-the-wled-forum","text":"You can check out and use the WLED Discourse forum .","title":"Check out the WLED forum!"},{"location":"basics/faq/#look-through-the-issues","text":"Maybe someone already reported your issue, so everybody supplying support would be grateful if you take some time to search through the existing issues .","title":"Look through the Issues"},{"location":"basics/faq/#if-i-report-a-new-issue-what-do-i-need-to-share","text":"When you create a ticket, please share: exact controller, maybe a link to the shop you bought it from LED-strip type and amount of LEDs Specifications of your power supply (max. current/voltage) how you wired up all components (a diagram and/or picture often helps) the BIN-file you tried to flash (version and file name) or your IDE version if compiling from source Have you followed the quick start and compile settings at https://docs.wled.me ? Has it worked before? Does it works without any LEDs connected? (for instance the controller just connected to your PC over USB) Are you using/trying to use DHCP or static IP? Did you try to use a mobile hotspot instead of your WLAN AP/home wifi?","title":"If I report a new Issue, what do i need to share?"},{"location":"basics/getting-started/","text":"Welcome to the WLED wiki! Version Info Unless noted otherwise, all information applies to the latest release (v0.12.0). Quick start guide 1. Connect a WS2812B-compatible RGB(W) led strip to GPIO2 . On most ESP8266 based development boards this pin is labeled D4 , on ESP32 based boards use IO16 or G16 or 16 . If this wire cannot be kept short, use a level shifter/translator . Optionally connect a normally open pushbutton to GPIO0 (NodeMCU/Wemos pin D3 , on ESP32 use IO17 ) and ground for configurable actions . Note: Board pin naming varies depending on the manufacturer. Please use the board pinout from the specific board you purchased and use the GPIO PINS to reference this guide. Make sure to connect ESP and LED-strip grounds together! If using an ESP8266 and LEDs that have clock and data, use GPIO1 (TxD) for clock and GPIO2 (D4) for data. For analog use, the IRLZ44N or STP55NF06L is a good MOSFET to use. Partial, example circuit... 2. Flash the software to your ESP module! There are two options for this step: I just want to use WLED! (install release binary) I want to modify WLED (compile from source code) If everything worked the first thirty LEDs will light up in bright orange to stimulate courage, friendliness and success! 3. Use a WiFi device to connect to the access point WLED-AP using the default password wled1234 . You can also just scan this QR code: Go to the IP 4.3.2.1 in your browser. You should also be able to use the embedded DNS server and connect to wled.me if in access point mode. 4. Click on the cog icon to edit settings like connecting the module to your home WiFi. 5. Check your router device list for the IP of the WLED device inside your local network. For easier discovery, use the WLED app! Have fun with the software! Default GPIO Usage These are only defaults All pins can be changed in the Hardware section of LED settings. Please note that these are GPIO numbers, please consult a pinout for your board to find the labeled pin (e.g D4 = GPIO2 on most ESP8266 boards). When using an ESP8266 board, it's recommended to use pins GPIO1 , GPIO2 , or GPIO3 for LED Data; using other pins will require bit-bangging and may cause slow performance and/or issues elsewhere (such as with IR decoding). Function GPIO Notes LED Data 2 Button 0 IR Remote N/A Suggested: 4 Relay 12 Software update procedure Method 1: Reflash the new update like a new install (see above). Method 2: The software has an integrated OTA software update capability. First you have to enable it by typing in the correct OTA passphrase (default: \"wledota\") in the settings menu. Remove the tick in the checkbox \"OTA locked\". Then save settings and reboot the ESP. Then you can select \"Manual OTA update\" in Security settings and upload a release binary . After you are done, it is recommended to lock the OTA function again. To do so, tick the checkbox again (you can change the passphrase by typing in a new one now). Reboot. If you try to access the update page now, you should see the message \"OTA lock active\". Method 3: ArduinoOTA is also supported. If you own multiple devices and want to update them Since v0.13 of WLED the source code includes shell/command prompt scripts which allow you to update multiple devices with a single command. Please check tools subfolder for multi-update scripts (.cmd or .sh). You will need to modify them to include IP addresses of your devices and intended firmware binary file for each device. If you are using Windows make sure you install curl utility somewhere in your PATH (curl is included with Windows 10 since build 17063). This will only work if \"OTA Lock\" is disabled.","title":"Getting Started"},{"location":"basics/getting-started/#welcome-to-the-wled-wiki","text":"Version Info Unless noted otherwise, all information applies to the latest release (v0.12.0).","title":"Welcome to the WLED wiki!"},{"location":"basics/getting-started/#quick-start-guide","text":"1. Connect a WS2812B-compatible RGB(W) led strip to GPIO2 . On most ESP8266 based development boards this pin is labeled D4 , on ESP32 based boards use IO16 or G16 or 16 . If this wire cannot be kept short, use a level shifter/translator . Optionally connect a normally open pushbutton to GPIO0 (NodeMCU/Wemos pin D3 , on ESP32 use IO17 ) and ground for configurable actions . Note: Board pin naming varies depending on the manufacturer. Please use the board pinout from the specific board you purchased and use the GPIO PINS to reference this guide. Make sure to connect ESP and LED-strip grounds together! If using an ESP8266 and LEDs that have clock and data, use GPIO1 (TxD) for clock and GPIO2 (D4) for data. For analog use, the IRLZ44N or STP55NF06L is a good MOSFET to use. Partial, example circuit... 2. Flash the software to your ESP module! There are two options for this step: I just want to use WLED! (install release binary) I want to modify WLED (compile from source code) If everything worked the first thirty LEDs will light up in bright orange to stimulate courage, friendliness and success! 3. Use a WiFi device to connect to the access point WLED-AP using the default password wled1234 . You can also just scan this QR code: Go to the IP 4.3.2.1 in your browser. You should also be able to use the embedded DNS server and connect to wled.me if in access point mode. 4. Click on the cog icon to edit settings like connecting the module to your home WiFi. 5. Check your router device list for the IP of the WLED device inside your local network. For easier discovery, use the WLED app! Have fun with the software!","title":"Quick start guide"},{"location":"basics/getting-started/#default-gpio-usage","text":"These are only defaults All pins can be changed in the Hardware section of LED settings. Please note that these are GPIO numbers, please consult a pinout for your board to find the labeled pin (e.g D4 = GPIO2 on most ESP8266 boards). When using an ESP8266 board, it's recommended to use pins GPIO1 , GPIO2 , or GPIO3 for LED Data; using other pins will require bit-bangging and may cause slow performance and/or issues elsewhere (such as with IR decoding). Function GPIO Notes LED Data 2 Button 0 IR Remote N/A Suggested: 4 Relay 12","title":"Default GPIO Usage"},{"location":"basics/getting-started/#software-update-procedure","text":"Method 1: Reflash the new update like a new install (see above). Method 2: The software has an integrated OTA software update capability. First you have to enable it by typing in the correct OTA passphrase (default: \"wledota\") in the settings menu. Remove the tick in the checkbox \"OTA locked\". Then save settings and reboot the ESP. Then you can select \"Manual OTA update\" in Security settings and upload a release binary . After you are done, it is recommended to lock the OTA function again. To do so, tick the checkbox again (you can change the passphrase by typing in a new one now). Reboot. If you try to access the update page now, you should see the message \"OTA lock active\". Method 3: ArduinoOTA is also supported. If you own multiple devices and want to update them Since v0.13 of WLED the source code includes shell/command prompt scripts which allow you to update multiple devices with a single command. Please check tools subfolder for multi-update scripts (.cmd or .sh). You will need to modify them to include IP addresses of your devices and intended firmware binary file for each device. If you are using Windows make sure you install curl utility somewhere in your PATH (curl is included with Windows 10 since build 17063). This will only work if \"OTA Lock\" is disabled.","title":"Software update procedure"},{"location":"basics/install-binary/","text":"Flashing method 1: WLED web installer Tip This is by far the easiest and fastest way to get WLED up and running! Make sure you are running a recent desktop Chrome or Edge browser and head over to the installer site ! If you are updating an existing version of WLED, make sure to uncheck \"Clean install\" so that your settings are kept. This installer is not yet available for ESPs with flash chips smaller than 4MB (e.g. ESP01) Flashing method 2: esptool First of all, please follow the steps to install esptool.py here . Download the latest release binary file! Make sure only one ESP device/microcontroller is connected to your computer! Otherwise you could accidentally overwrite the wrong one. If you know the serial port, you can also add the -port COM3 attribute after write_flash Execute this command: ESP8266 esptool.py write_flash 0x0 ./WLED_XXX.bin ESP32 (you will need to have a bootloader installed) esptool.py write_flash 0x10000 ./WLED_XXX.bin If the ESP32 is new, you will need to flash the bootloader first. This bootloader should be addressed to 0x00000 and the firmware to 0x10000. This is not required if you had an Arduino sketch running on it before. You can find the bootloader file in the assets for the 0.9.1 release . esptool.py write_flash 0x0 ./esp32_bootloader.bin When esptool.py says Connecting... , some ESP32 boards require you to hold the boot button (to the right of the USB port) for a few seconds If you experience issues, run this command before trying write_flash again (Note: this will erase all settings stored on the ESP!) esptool.py erase_flash Flashing method 3: ESP Home Flasher tool This is a GUI-based tool recommended by some users as easier to use than esptool. For some ESP32 boards, you might have to press some buttons after uploading: Hold both buttons down, plug it in, start flashing, then when is tries to detect, let go of the button to the left of the USB as you look at it, then when it detects the board type, let go of the other button. If running windows, you need a driver from here: https://www.wemos.cc/en/latest/ch340_driver.html before your computer will show the COM port in ESPhome Flasher. With a Wemos D1 mini you do not need to hold down the reset button while flashing. Flashing method 4: OTA update You can alternatively use my basic HTTP OTA updater sketch and upload the binary! This requires the Arduino IDE and ESP8266 core installed. If your device is already running a firmware with built-in OTA capability, you can probably use that as well. What binary should I use? I always recommend to use the latest release. Starting from WLED 0.12.0, pins can be configured in LED settings and specific binaries for different LED pins or types are no longer needed. Please use the following binary for these boards respectively: Binary Name For devices WLED_0.x.x_ESP8266.bin NodeMCU, Wemos D1 mini, ESP-12, all ESP8266 with 4MB flash. Recommended. WLED_0.x.x_ESP32.bin All ESP32 devices (try this if the WLED-AP doesn't appear after flashing) WLED_0.x.x_ESP32_Ethernet.bin ESP32 devices with an Ethernet interface. Also works with WiFi only. WLED_0.x.x_ESP01.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. esp32_bootloader.bin Not a WLED release. To be flashed to a brand new ESP32 before flashing the WLED binary itself. Legacy binary format (up to 0.11.1) Binary Name For devices WLED_0.x.x_ESP8266_1M_ota.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has some interfaces disabled (Alexa, Blynk, Hue sync, Infrared) in order for wireless updates to continue working. WLED_0.x.x_ESP8266_1M_full.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP8266_512k.bin ESP-01 (blue PCB), older Sonoff devices, all ESP8266 with 512kB flash. Interfaces (Alexa, Blynk, Hue sync, Infrared) disabled, no OTA. Support will not be possible in future versions. WLED_0.x.x_ESP8266_ledpinY.bin Custom build for 4MB flash ESP8266 and WS2812B. LED pin is changed (default is GPIO2). (This is GPIOY and not DY for the D to GPIO mapping, check your boards spec!) WLED_0.x.x_ESP8266_apa102.bin Custom build for 4MB flash ESP8266 and APA102 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP8266_ws2801.bin Custom build for 4MB flash ESP8266 and WS2801 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP32_ledpinY.bin Custom build for ESP32 and WS2812b. LED pin is changed (default is GPIO2). LED pin 16 is useful for the QuinLed-Dig-Uno board with ESP32.","title":"Install WLED Binary"},{"location":"basics/install-binary/#flashing-method-1-wled-web-installer","text":"Tip This is by far the easiest and fastest way to get WLED up and running! Make sure you are running a recent desktop Chrome or Edge browser and head over to the installer site ! If you are updating an existing version of WLED, make sure to uncheck \"Clean install\" so that your settings are kept. This installer is not yet available for ESPs with flash chips smaller than 4MB (e.g. ESP01)","title":"Flashing method 1: WLED web installer"},{"location":"basics/install-binary/#flashing-method-2-esptool","text":"First of all, please follow the steps to install esptool.py here . Download the latest release binary file! Make sure only one ESP device/microcontroller is connected to your computer! Otherwise you could accidentally overwrite the wrong one. If you know the serial port, you can also add the -port COM3 attribute after write_flash Execute this command:","title":"Flashing method 2: esptool"},{"location":"basics/install-binary/#esp8266","text":"esptool.py write_flash 0x0 ./WLED_XXX.bin","title":"ESP8266"},{"location":"basics/install-binary/#esp32","text":"(you will need to have a bootloader installed) esptool.py write_flash 0x10000 ./WLED_XXX.bin If the ESP32 is new, you will need to flash the bootloader first. This bootloader should be addressed to 0x00000 and the firmware to 0x10000. This is not required if you had an Arduino sketch running on it before. You can find the bootloader file in the assets for the 0.9.1 release . esptool.py write_flash 0x0 ./esp32_bootloader.bin When esptool.py says Connecting... , some ESP32 boards require you to hold the boot button (to the right of the USB port) for a few seconds If you experience issues, run this command before trying write_flash again (Note: this will erase all settings stored on the ESP!) esptool.py erase_flash","title":"ESP32"},{"location":"basics/install-binary/#flashing-method-3-esp-home-flasher-tool","text":"This is a GUI-based tool recommended by some users as easier to use than esptool. For some ESP32 boards, you might have to press some buttons after uploading: Hold both buttons down, plug it in, start flashing, then when is tries to detect, let go of the button to the left of the USB as you look at it, then when it detects the board type, let go of the other button. If running windows, you need a driver from here: https://www.wemos.cc/en/latest/ch340_driver.html before your computer will show the COM port in ESPhome Flasher. With a Wemos D1 mini you do not need to hold down the reset button while flashing.","title":"Flashing method 3: ESP Home Flasher tool"},{"location":"basics/install-binary/#flashing-method-4-ota-update","text":"You can alternatively use my basic HTTP OTA updater sketch and upload the binary! This requires the Arduino IDE and ESP8266 core installed. If your device is already running a firmware with built-in OTA capability, you can probably use that as well.","title":"Flashing method 4: OTA update"},{"location":"basics/install-binary/#what-binary-should-i-use","text":"I always recommend to use the latest release. Starting from WLED 0.12.0, pins can be configured in LED settings and specific binaries for different LED pins or types are no longer needed. Please use the following binary for these boards respectively: Binary Name For devices WLED_0.x.x_ESP8266.bin NodeMCU, Wemos D1 mini, ESP-12, all ESP8266 with 4MB flash. Recommended. WLED_0.x.x_ESP32.bin All ESP32 devices (try this if the WLED-AP doesn't appear after flashing) WLED_0.x.x_ESP32_Ethernet.bin ESP32 devices with an Ethernet interface. Also works with WiFi only. WLED_0.x.x_ESP01.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. esp32_bootloader.bin Not a WLED release. To be flashed to a brand new ESP32 before flashing the WLED binary itself. Legacy binary format (up to 0.11.1) Binary Name For devices WLED_0.x.x_ESP8266_1M_ota.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has some interfaces disabled (Alexa, Blynk, Hue sync, Infrared) in order for wireless updates to continue working. WLED_0.x.x_ESP8266_1M_full.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP8266_512k.bin ESP-01 (blue PCB), older Sonoff devices, all ESP8266 with 512kB flash. Interfaces (Alexa, Blynk, Hue sync, Infrared) disabled, no OTA. Support will not be possible in future versions. WLED_0.x.x_ESP8266_ledpinY.bin Custom build for 4MB flash ESP8266 and WS2812B. LED pin is changed (default is GPIO2). (This is GPIOY and not DY for the D to GPIO mapping, check your boards spec!) WLED_0.x.x_ESP8266_apa102.bin Custom build for 4MB flash ESP8266 and APA102 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP8266_ws2801.bin Custom build for 4MB flash ESP8266 and WS2801 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP32_ledpinY.bin Custom build for ESP32 and WS2812b. LED pin is changed (default is GPIO2). LED pin 16 is useful for the QuinLed-Dig-Uno board with ESP32.","title":"What binary should I use?"},{"location":"basics/install-gui/","text":"1. Downloading the firmware bin file You can find precompiled .bin files on the release page . Be sure to download the latest version. This file looks something like this: WLED_[...]_ESP[...].bin If you are not sure what binary you should use look at this page: What binary should I use? 2. Downloading the Flash Download Tools Espressif has an official GUI tool for Windows. It has a lot of options and can be used for the ESP8266 and ESP32. You can find it on Espressif's download page here ! (if the link changed, just search for esp flash download tool on Google) After downloading the file, unzip it and start flash_download_tools_v3.6.8.exe . 3. Flashing the firmware bin files After starting flash_download_tools_v[...].exe there should pop up two small windows. Now just click on the Developer Mode and ESP8266 DownloadTool button. Now a new window opens. Under the SPIDownload section select the WLED_[...]_ESP[...].bin file by clicking on the first ... button In the Textfield next to the \"@\" char put in this adress: 0x0 Than make sure that the file is checked (click on the checkbox) Click on the Default button Set SPI Speed to 80Mhz Set Flash Size to 32Mbit Select the COM Port of your ESP (usually it's not COM1 ) BAUD can be set to 921600 Verify that everything looks like the two picture below \u00b0 ESPTool settings (optionally) click on ERASE to erase the entire flash chip click on START Now the firmware will be flashed to the ESP. When the firmware flashing was successful you see this: . Finally restart your board. Next steps: Quick start guide","title":"Install using ESP GUI"},{"location":"basics/install-gui/#1-downloading-the-firmware-bin-file","text":"You can find precompiled .bin files on the release page . Be sure to download the latest version. This file looks something like this: WLED_[...]_ESP[...].bin If you are not sure what binary you should use look at this page: What binary should I use?","title":"1. Downloading the firmware bin file"},{"location":"basics/install-gui/#2-downloading-the-flash-download-tools","text":"Espressif has an official GUI tool for Windows. It has a lot of options and can be used for the ESP8266 and ESP32. You can find it on Espressif's download page here ! (if the link changed, just search for esp flash download tool on Google) After downloading the file, unzip it and start flash_download_tools_v3.6.8.exe .","title":"2. Downloading the Flash Download Tools"},{"location":"basics/install-gui/#3-flashing-the-firmware-bin-files","text":"After starting flash_download_tools_v[...].exe there should pop up two small windows. Now just click on the Developer Mode and ESP8266 DownloadTool button. Now a new window opens. Under the SPIDownload section select the WLED_[...]_ESP[...].bin file by clicking on the first ... button In the Textfield next to the \"@\" char put in this adress: 0x0 Than make sure that the file is checked (click on the checkbox) Click on the Default button Set SPI Speed to 80Mhz Set Flash Size to 32Mbit Select the COM Port of your ESP (usually it's not COM1 ) BAUD can be set to 921600 Verify that everything looks like the two picture below \u00b0 ESPTool settings (optionally) click on ERASE to erase the entire flash chip click on START Now the firmware will be flashed to the ESP. When the firmware flashing was successful you see this: . Finally restart your board. Next steps: Quick start guide","title":"3. Flashing the firmware bin files"},{"location":"basics/tutorials/","text":"Don't know yet how to solder? Unsure how to connect your LEDs safely? How to find the perfect power supply? No worries, we have collected a few helpful links for you to learn more about these and more topics: WLED specific tutorials Resource Maker Type Info Beginner's guide to freak'n cool Holiday LEDs DrZzs Video (23:22) Excellent guide for getting started with WLED! How to Set Colors and Effects, Save Presets, Make Sync Groups, add a Button, & Macros for Scheduling DrZzs Video (23:39) Learn about some cool additional WLED features! Make your LEDs dance to music! DrZzs Video (11:30) How to install LedFx and connect it to WLED for quick sound reactive effects! Getting started with WLED tynick Article Complete and excellent guide on how to flash and get WLED up and running! How to Compile WLED (from scratch) Quindor Video (02:15:00) How to compile WLED yourself from scratch (most info in first 30 minutes) WLED with QuinLED-Dig-Uno Install Tutorial Quindor Video (11:13) Initial flash and setup of WLED on QuinLED-Dig-Uno board Integrating WLED into Home Assistant Quindor Video (8:22) How to use a WLED node in Home Assistant Holiday LEDs Step-by-step with WLED & Home Assistant KPeyanski Video (20:38) Complete and great wiring, installation and HA setup tutorial HOW-TO: Holiday LED Strip Lights, Home Assistant and WLED KPeyanski Article Same as the above video, but in text form! Smart Ping Pong LED Lamp - Quick&Simple DIY bitluni Video (18:19) Construction, wiring and flashing of a cool looking and easy to make lamp ESP8266 based LED controller for WS2812b strip. WLED Firmware + OpenHAB (in Russian) Room31 Video (17:04) How to use WLED on an ESP32 (german) Bitbastelei/Adlerweb Video (11:00) DIY Ambilight using WLED and a Relay jangrewe Article Wiki page with schematics and instructions for Hyperion, etc. Digital LED knowledge Resource Maker Type Info Adafruit NeoPixel \u00dcberguide Adafruit Article Everything that's important at a glance. Highly recommended for newcomers to digital LEDs Digital LED Power Usage Quindor Article/Spreadsheet/Video Helps you plan the power usage of your installation Power calculation and injection live stream Quindor Video (2:24:52) Tons of great questions and answers. Live calculations, drawings, 5v vs 12v, strip comparisons, etc. Difference between LED strip types The Hook Up Video (14:41) What is the best LED strip for your project? 7 Common LED Strip FAILS and How To Avoid Them The Hook Up Video (12:14) Make your project look much better! Power Injection demystified Spiker Lights Article What is power injection and how much do I need? Common(sharing) Ground / Multiple power supplies Article When using more than one power supply. Tools & Skills Resource Maker Type Info How to Solder Beauty and the Bolt Video (9:50) Soldering new leads to LED strip Quindor Video (8:24) Soldering Tutorial Part 2 EEVblog Video (34:05) Detailed tutorial on soldering, see parts 1 and 3 for even more info) Voltage Drop Calculator Tool Another Voltage Drop Calculator Tool Pixel/Bullet Voltage Drop Calc Tool 5 and 12V Combined Wire Gauge Calculator Tool Wire Size/Ampacity Tool Use chassis wiring _Add more categories as needed :)","title":"Tutorials"},{"location":"basics/tutorials/#wled-specific-tutorials","text":"Resource Maker Type Info Beginner's guide to freak'n cool Holiday LEDs DrZzs Video (23:22) Excellent guide for getting started with WLED! How to Set Colors and Effects, Save Presets, Make Sync Groups, add a Button, & Macros for Scheduling DrZzs Video (23:39) Learn about some cool additional WLED features! Make your LEDs dance to music! DrZzs Video (11:30) How to install LedFx and connect it to WLED for quick sound reactive effects! Getting started with WLED tynick Article Complete and excellent guide on how to flash and get WLED up and running! How to Compile WLED (from scratch) Quindor Video (02:15:00) How to compile WLED yourself from scratch (most info in first 30 minutes) WLED with QuinLED-Dig-Uno Install Tutorial Quindor Video (11:13) Initial flash and setup of WLED on QuinLED-Dig-Uno board Integrating WLED into Home Assistant Quindor Video (8:22) How to use a WLED node in Home Assistant Holiday LEDs Step-by-step with WLED & Home Assistant KPeyanski Video (20:38) Complete and great wiring, installation and HA setup tutorial HOW-TO: Holiday LED Strip Lights, Home Assistant and WLED KPeyanski Article Same as the above video, but in text form! Smart Ping Pong LED Lamp - Quick&Simple DIY bitluni Video (18:19) Construction, wiring and flashing of a cool looking and easy to make lamp ESP8266 based LED controller for WS2812b strip. WLED Firmware + OpenHAB (in Russian) Room31 Video (17:04) How to use WLED on an ESP32 (german) Bitbastelei/Adlerweb Video (11:00) DIY Ambilight using WLED and a Relay jangrewe Article Wiki page with schematics and instructions for Hyperion, etc.","title":"WLED specific tutorials"},{"location":"basics/tutorials/#digital-led-knowledge","text":"Resource Maker Type Info Adafruit NeoPixel \u00dcberguide Adafruit Article Everything that's important at a glance. Highly recommended for newcomers to digital LEDs Digital LED Power Usage Quindor Article/Spreadsheet/Video Helps you plan the power usage of your installation Power calculation and injection live stream Quindor Video (2:24:52) Tons of great questions and answers. Live calculations, drawings, 5v vs 12v, strip comparisons, etc. Difference between LED strip types The Hook Up Video (14:41) What is the best LED strip for your project? 7 Common LED Strip FAILS and How To Avoid Them The Hook Up Video (12:14) Make your project look much better! Power Injection demystified Spiker Lights Article What is power injection and how much do I need? Common(sharing) Ground / Multiple power supplies Article When using more than one power supply.","title":"Digital LED knowledge"},{"location":"basics/tutorials/#tools-skills","text":"Resource Maker Type Info How to Solder Beauty and the Bolt Video (9:50) Soldering new leads to LED strip Quindor Video (8:24) Soldering Tutorial Part 2 EEVblog Video (34:05) Detailed tutorial on soldering, see parts 1 and 3 for even more info) Voltage Drop Calculator Tool Another Voltage Drop Calculator Tool Pixel/Bullet Voltage Drop Calc Tool 5 and 12V Combined Wire Gauge Calculator Tool Wire Size/Ampacity Tool Use chassis wiring _Add more categories as needed :)","title":"Tools &amp; Skills"},{"location":"features/cct/","text":"White channel(s) handling Besides addressable RGB and RGBW bus types, WLED 0.13.0 also supports PWM CCT (correlated color temperature) lights. Auto white handling Many effects and realtime sources are based on an RGB color model, which necessitates a method to calculate a white channel value from the RGB value for lights that support more than RGB. WLED offers four auto white modes, one of which can be selected in LED settings using the option Auto-calculate white channel from RGB . This option is only shown if at least one bus with White channel support is present. Auto White mode Description Accurate This mode subtracts the calculated white value from the RGB channels. This gets rid of the \"RGB-white\" but means that the light is less bright with only the white channel and not the RGB channels being utilized for pure white. Brighter This does the exact opposite and not touch the RGB channels at all, just mix in the dedicated white. None No auto white calculation is performed. The white channel of colors can be manually set using the White channel slider in the user interface, RGB-only effects and most realtime sources will leave the white channel off. Dual The White channel slider is present in the UI and works the same as in None mode, however if the slider value is 0 (far left), the Brighter mode is used for auto white calculation. This is the default auto white mode. Accurate and Brighter methods are applied on a per-pixel basis, so they also work in color palettes and realtime effects! White Balance correction If enabled in LED settings, WB correction allows either making all pixels colder or warmer on a per-segment basis using a slider in the main user interface. This is applied to the RGB color only, after the auto white channel calculation. CCT handling WLED starting with version 0.13.0 also supports bus types with two white channels, one with a warm color temperature (e.g. 2700 Kelvin, reddish white) and one with a cold white color temperature (e.g. 8000 Kelvin, bluish white). Since as of the release of version 0.13.0 no adjustable CCT addressable LEDs are supported*, this only applies to PWM analog LED outputs. *SK6812 WWA (with 3 channels, warm white, cold white and amber) are supported, but treated as if RGB using the WS281x bus type. White spectrum support for this LED type will be added at a later point. The overall brightness of the white channels is determined from the auto-white calculation outlined above, and as such is identical in behavior to that of single white channel busses. The color temperature is set either on a per-segment basis via a dedicated slider in the UI, or if Calculate CCT from RGB is enabled in LED settings, is estimated on a per-pixel basis from the set RGB color (e.g. setting Red results in the warmest, setting Blue results in the coldest possible white). The former has the advantage of granular white spectrum control independent of the set RGB color, while the latter enables control of the color temperature from all effects and realtime sources. CCT additive blending Setting this to 0% results in a more even brightness output across the supported temperature range, as the fading between the warm and cold white channels is linear. Setting this to 100% results in the highest peak brightness output at the neutral white point (CCT value 127 ), as both white channels are active at 100%. Warning Make sure your setup can handle driving both white channels at maximum output simultaneously. This results in a higher heat output and might reduce the lifetime of your LEDs. For example, bulbs by Athom are designed for linear blending (0%) and may be damaged by attempting to use additive blending. You can limit the maximum allowed additive blending at build time using the WLED_MAX_CCT_BLEND macro. For example, add -D WLED_MAX_CCT_BLEND=0 to your build flags to force linear blending only. IC CCT By default, PWM CCT bus types set the value of the warm and cold white channels. If your hardware uses an IC that controls the color temperature based on one PWM signal and the overall brightness on the other, please use the build flag -D WLED_USE_IC_CCT in a custom compilation. (the 15W bulb by Athom uses this method) CCT in the JSON API Please see here for more info on how to handle WLED CCT from integrations.","title":"White handling"},{"location":"features/cct/#white-channels-handling","text":"Besides addressable RGB and RGBW bus types, WLED 0.13.0 also supports PWM CCT (correlated color temperature) lights.","title":"White channel(s) handling"},{"location":"features/cct/#auto-white-handling","text":"Many effects and realtime sources are based on an RGB color model, which necessitates a method to calculate a white channel value from the RGB value for lights that support more than RGB. WLED offers four auto white modes, one of which can be selected in LED settings using the option Auto-calculate white channel from RGB . This option is only shown if at least one bus with White channel support is present. Auto White mode Description Accurate This mode subtracts the calculated white value from the RGB channels. This gets rid of the \"RGB-white\" but means that the light is less bright with only the white channel and not the RGB channels being utilized for pure white. Brighter This does the exact opposite and not touch the RGB channels at all, just mix in the dedicated white. None No auto white calculation is performed. The white channel of colors can be manually set using the White channel slider in the user interface, RGB-only effects and most realtime sources will leave the white channel off. Dual The White channel slider is present in the UI and works the same as in None mode, however if the slider value is 0 (far left), the Brighter mode is used for auto white calculation. This is the default auto white mode. Accurate and Brighter methods are applied on a per-pixel basis, so they also work in color palettes and realtime effects!","title":"Auto white handling"},{"location":"features/cct/#white-balance-correction","text":"If enabled in LED settings, WB correction allows either making all pixels colder or warmer on a per-segment basis using a slider in the main user interface. This is applied to the RGB color only, after the auto white channel calculation.","title":"White Balance correction"},{"location":"features/cct/#cct-handling","text":"WLED starting with version 0.13.0 also supports bus types with two white channels, one with a warm color temperature (e.g. 2700 Kelvin, reddish white) and one with a cold white color temperature (e.g. 8000 Kelvin, bluish white). Since as of the release of version 0.13.0 no adjustable CCT addressable LEDs are supported*, this only applies to PWM analog LED outputs. *SK6812 WWA (with 3 channels, warm white, cold white and amber) are supported, but treated as if RGB using the WS281x bus type. White spectrum support for this LED type will be added at a later point. The overall brightness of the white channels is determined from the auto-white calculation outlined above, and as such is identical in behavior to that of single white channel busses. The color temperature is set either on a per-segment basis via a dedicated slider in the UI, or if Calculate CCT from RGB is enabled in LED settings, is estimated on a per-pixel basis from the set RGB color (e.g. setting Red results in the warmest, setting Blue results in the coldest possible white). The former has the advantage of granular white spectrum control independent of the set RGB color, while the latter enables control of the color temperature from all effects and realtime sources.","title":"CCT handling"},{"location":"features/cct/#cct-additive-blending","text":"Setting this to 0% results in a more even brightness output across the supported temperature range, as the fading between the warm and cold white channels is linear. Setting this to 100% results in the highest peak brightness output at the neutral white point (CCT value 127 ), as both white channels are active at 100%. Warning Make sure your setup can handle driving both white channels at maximum output simultaneously. This results in a higher heat output and might reduce the lifetime of your LEDs. For example, bulbs by Athom are designed for linear blending (0%) and may be damaged by attempting to use additive blending. You can limit the maximum allowed additive blending at build time using the WLED_MAX_CCT_BLEND macro. For example, add -D WLED_MAX_CCT_BLEND=0 to your build flags to force linear blending only.","title":"CCT additive blending"},{"location":"features/cct/#ic-cct","text":"By default, PWM CCT bus types set the value of the warm and cold white channels. If your hardware uses an IC that controls the color temperature based on one PWM signal and the overall brightness on the other, please use the build flag -D WLED_USE_IC_CCT in a custom compilation. (the 15W bulb by Athom uses this method)","title":"IC CCT"},{"location":"features/cct/#cct-in-the-json-api","text":"Please see here for more info on how to handle WLED CCT from integrations.","title":"CCT in the JSON API"},{"location":"features/effects-palettes/","text":"Effects To aid in showing where colors vs palettes are used, all effects are rendered with the Party palette and the colors primary secondary tertiary colors EffectID Name Description Intensity slider effect 0 Solid Solid primary color on all LEDs - 1 Blink Blinks between primary and secondary color Duty cycle of blinking 2 Breathe Fades between primary and secondary color - 3 Wipe Switches between primary and secondary, switching LEDs one by one, start to end Smoothness 4 Wipe Random Same as Wipe, but uses random colors Smoothness 5 Random Colors Applies a new random color to all LEDs Duration of fading between colors 6 Sweep Switches between primary and secondary, switching LEDs one by one, start to end to start Smoothness 7 Dynamic Sets each LED to a random color 0-127: Set single LED 128-255: Set all LEDs 8 Colorloop Cycle all LEDs through the rainbow colors 0-127: Pastel colors 128-255: Saturated colors 9 Rainbow Displays rainbow colors along the whole strip Number of rainbows 10 Scan A single primary colored light wanders between start and end Scan dot size 11 Scan Dual Same as Scan but uses two lights starting at both ends scan dot size 12 Fade Fades smoothly between primary and secondary color - 13 Theater Pattern of one lit and two unlit LEDs running Gap in lights 14 Theater Rainbow Same as Theater but uses colors of the rainbow - 15 Running Sine Waves scrolling Wavelength 16 Saw Sawtooth Waves scrolling Wavelength 17 Twinkle Random LEDs light up in the primary color with secondary as background, turns all off Amount of LEDs turning on 18 Dissolve Fills LEDs with primary in random order, then off again Dissolve rate 19 Dissolve Rnd Fills LEDs with random colors in random order, then off again Dissolve rate 20 Sparkle Single random LEDs light up in the primary color for a short time, secondary is background - 21 Sparkle Dark All LEDs are lit in the primary color, single random LEDs turn off for a short time - 22 Sparkle+ All LEDs are lit in the primary color, multiple random LEDs turn off for a short time - 23 Strobe All LEDs are lit in the secondary color, all LEDs flash in a single short burst in primary color - 24 Strobe Rainbow Same as strobe, cycles through the rainbow - 25 Strobe Mega All LEDs are lit in the secondary color, all LEDs flash in several short bursts in primary color - 26 Blink Rainbow Same as blink, cycles through the rainbow Blink Duty cycle 27 Android Section of varying length running Maximum section length 28 Chase 2 LEDs in primary color running on secondary Size of chaser 29 Chase Random Like Chase but leaves trail of random color Size of chaser 30 Chase Rainbow Like 28 but leaves trail of rainbow Size of chaser 31 Chase Flash 2 LEDs flash in secondary color while the rest is lit in primary. The flashing LEDs wander from start to end - 32 Chase Flash Rnd Like Chase Flash, but the 2 LEDs flash in random colors and leaves a random color behind - 33 Rainbow Runner Like Chase, but the 2 LEDs light up in rainbow colors and leave a primary color trail Size of chaser 34 Colorful Shifting Red-Amber-Green-Blue pattern 0-127: Pastel colors 128-255: Saturated colors 35 Traffic Light Emulates a traffic light - 36 Sweep Random Like Sweep, but uses random colors Smoothness 37 Running 2 Pattern of n LEDs primary and n LEDs secondary moves along the strip Amount of LEDs lit/unlit 38 Aurora Simulation of the Aurora Borealis Number of waves 39 Stream Flush bands random hues along the string Width of each band (lower is wider) 40 Scanner Dot moves between ends, leaving behing a fading trail Fade rate 41 Lighthouse Dot moves from start to end, leaving behing a fading trail Fade rate 42 Fireworks Random color blobs light up, then fade again Amount of fireworks 43 Rain Like Fireworks, but the blobs move Amout of Rain 44 Tetrix Falling blocks stack - 45 Fire Flicker LEDs randomly flickering Flickering intensity 46 Gradient Moves a saturation gradient of the primary color along the strip Gradient width 47 Loading Moves a sawtooth pattern along the strip Width 48 Police A red and a blue dot running Size of dots 49 Police All Two areas, one red and one blue, sweeping - 50 Two Dots Like Police, but with custom colors Size of dots 51 Two Areas Like Police All, but with custom colors - 52 Running Dual Sine waves in both directions Number of waves 53 Halloween Running 2, but always uses orange and purple Amount of LEDs lit/unlit 54 Tri Chase Like Chase, but with 3 colors Width of pattern 55 Tri Wipe Like Wipe but turns LEDs off as \"third color\" - 56 Tri Fade Fades the whole strip from primary color to secondary color to off - 57 Lightning Short random white strobe similar to a lightning bolt Amount of strobes 58 ICU Two \"eyes\" running on opposite sides of the strip - 59 Multi Comet Like Scanner, but creates multiple trails Fade rate 60 Scanner Dual Like Scanner, but with two dots running on opposite sides Fade rate 61 Stream 2 Flush random hues along the string - 62 Oscillate Areas of primary and secondary colors move between opposite ends, combining colors where they touch - 63 Pride 2015 Rainbow cycling with brightness variation - 64 Juggle Eight colored dots running, leaving trails Fade rate 65 Palette Running color palette - 66 Fire 2012 Simulates flickering fire in red and yellow Sparkling of fire 67 Colorwaves Like Pride 2015, but uses palettes - 68 BPM Pulses moving back and forth on palette BPM setting 69 Fill Noise Noise pattern - 70 Noise 1 Fast Noise shift pattern - 71 Noise 2 Fast Noise shift pattern - 72 Noise 3 Noise shift pattern - 73 Noise 4 Noise sparkle pattern - 74 Colortwinkles LEDs light up randomly in random colors and fade off again Twinkle rate 75 Lake Calm palette waving - 76 Meteor The primary color creates a trail of randomly decaying color Fade rate 77 Meteor Smooth Smoothly animated meteor Fade rate 78 Railway Shows primary and secondary color on alternating LEDs. All LEDs fade to their opposite color and back again Duty cycle of fade transition 79 Ripple Effect resembling random water ripples Rate of new ripples 80 Twinklefox FastLED gentle twinkling with slow fade in/out Density 81 Twinklecat Twinkling with fast in / slow out Density 82 Halloween Eyes One Pair of blinking eyes at random intervals along strip Fading rade of eyes 83 Solid Pattern Speed sets number of LEDs on, intensity sets off Amount of LEDs turned off 84 Solid Pattern Tri Solid Pattern with three colors Amount of LEDs of each color 85 Spots Solid lights with even distance Size of each spot 86 Spots Fade Spots, getting bigger and smaller Fading of each spot 87 Glitter Rainbow with white sparkles Amount of glitter 88 Candle Flicker resembling a candle flame Intensity of flickering 89 Fireworks Starburst Exploding multicolor fireworks Fragment count 90 Fireworks 1D one dimension fireworks with flare Firing side 91 Bouncing Balls Bouncing ball effect Number of balls 92 Sinelon Fastled sinusoidal moving eye Fade rate 93 Sinelon Dual Sinelon from both directions Fade rate 94 Sinelon Rainbow Sinelon in rainbow colours Fade rate 95 Popcorn popping kernels Number of kernels 96 Drip Water dripping effect Intensity of dripping 97 Plasma Plasma lamp Max brightness 98 Percent Lights up a percentage of segment Percentage 99 Ripple Rainbow Like ripple, but with a dimly lit changing background Rate of new ripples 100 Heartbeat led strip pulsing rhythm similar to a heart beat - 101 Pacifica Gentle, blue-green ocean waves (one color palette currently) Intensity of waves 102 Candle Multi Like candle effect, but each LED has it's own flicker pattern Intensity of flicker 103 Solid Glitter Like Glitter, but with solid color background Amount of glitter 104 Sunrise Simulates a gradual sunrise or sunset. Speed sets: 0 - static sun, 1 - 60: sunrise time in minutes, 60 - 120: sunset time in minutes - 60, above: \"breathing\" rise and set Sun intensity 105 Phased Sine waves (in sourcecode) Wave brightness against background 106 TwinkleUp Twinkle effect with fade-in Amount of Twinkles 107 Noise Pal Peaceful noise that's slow and with gradually changing palettes Wave intensity 108 Sine Controllable sine waves Sinewave frequency 109 Phased Noise Noisy sine waves Wave brightness against background 110 Flow Blend of palette and spot effects waveform frequency 111 Chunchun Birds flying in a circle formation Number of birds 112 Dancing Shadows Moving spotlights Number of spotlights 113 Washing machine Alternating direction (in source) Size of lit sections 114 Candy Cane Running 2 in Red & White Amount of LEDs lit/unlit 115 Blends Blends random colors across palette Blend speed 116 TV Simulator TV light spill simulation - 117 Dynamic Smooth Link Dynamic but with smooth palette blends 0-127: Set single LED 128-255: Set all LEDs Palettes PaletteID Name Description 0 Default The palette is automatically selected depending on the effect. For most effects, this is the primary color 1 Random Cycle The palette changes to a random one every few seconds. Subject to change 2 Color 1 A palette consisting only of the primary color 3 Colors 1 & 2 Consists of the primary and secondary color 4 Color Gradient A palette which is a mixture of all segment colors 5 Colors Only Contains primary, secondary and tertiary colors 6 Party Rainbow without green hues 7 Cloud Gray-blueish colors 8 Lava Dark red, yellow and bright white 9 Ocean Blue, teal and white colors 10 Forest Yellow and green hues 11 Rainbow Every hue 12 Rainbow bands Rainbow colors with black spots in-between 13 Sunset Dark blue with purple, red and yellow hues 14 Rivendell Desaturated greens 15 Breeze Teal colors with varying brightness 16 Red & Blue Red running on blue 17 Yellowout Yellow, fading out 18 Analoguous Red running on blue 19 Splash Vibrant pink and magenta 20 Pastel Different hues with very little saturation 21 Sunset 2 Yellow and white running on dim blue 22 Beech Different shades of light blue 23 Vintage Warm white running on very dim red 24 Departure Greens and white fading out 25 Landscape Blue, white and green gradient 26 Beach Teal and yellow gradient fading out 27 Sherbet Bright white, pink and mint colors 28 Hult White, magenta and teal 29 Hult 64 Teal and yellow hues 30 Drywet Blue and yellow gradient 31 Jul Pastel green and red 32 Grintage Yellow fading out 33 Rewhi Bright orange on desaturated purple 34 Tertiary Red, green and blue gradien 35 Fire White, yellow and fading red gradient 36 Icefire Same as Fire, but with blue colors 37 Cyane Desaturated pastel colors 38 Light Pink Desaturated purple hues 39 Autumn Three white fields surrounded by yellow and dim red 40 Magenta White with magenta and blue 41 Magred Magenta and red hues 42 Yelmag Magenta and red hues with a yellow 43 Yelblu Blue with a little yellow 44 Orange & Teal An Orange - Gray - Teal gradient 45 Tiamat A bright meteor with blue, teal and magenta hues 46 April Night Dark blue background with colorful snowflakes 47 Orangery Orange and yellow tones 48 C9 Christmas lights palette. Red - amber - green - blue 49 Sakura Pink and rose tones 50 Aurora Greens on dark blue 51 Atlantica Greens & Blues of the ocean 52 C9 2 C9 plus yellow 53 C9 New C9, but brighter and with a less purple blue 54 Temperature Temperature mapping 55 Aurora 2 Aurora with some pinks & blue 56 Retro Clown Yellow to purple gradient 57 Candy Vivid yellows, magenta, salmon and blues 58 Toxy Reaf Vivid aqua to purple gradient 59 Fairy Reaf Bright aqua to purple gradient 60 Semi Blue Dark blues with a bright blue burst 61 Pink Candy White, pinks and purple 62 Red Reaf Blue, aqua and red gradient 63 Aqua Flash Aqua gradient with a flash of yellow and white 64 Yelblu Hot Yellow, red, blue spectrum 65 Lite Light Faint white and purple 66 Red Flash Red gradient with burst of white in the center 67 Blink Red Dark blue to dark red gradient with burst of purple 68 Red Shift Vibrant yellow to blue gradient with magenta, purple and red 69 Red Tide Waves of yellow, orange and red 70 Candy2 Faded gradient of yellow, salmon and blue","title":"Effects & Palettes"},{"location":"features/effects-palettes/#effects","text":"To aid in showing where colors vs palettes are used, all effects are rendered with the Party palette and the colors primary secondary tertiary colors EffectID Name Description Intensity slider effect 0 Solid Solid primary color on all LEDs - 1 Blink Blinks between primary and secondary color Duty cycle of blinking 2 Breathe Fades between primary and secondary color - 3 Wipe Switches between primary and secondary, switching LEDs one by one, start to end Smoothness 4 Wipe Random Same as Wipe, but uses random colors Smoothness 5 Random Colors Applies a new random color to all LEDs Duration of fading between colors 6 Sweep Switches between primary and secondary, switching LEDs one by one, start to end to start Smoothness 7 Dynamic Sets each LED to a random color 0-127: Set single LED 128-255: Set all LEDs 8 Colorloop Cycle all LEDs through the rainbow colors 0-127: Pastel colors 128-255: Saturated colors 9 Rainbow Displays rainbow colors along the whole strip Number of rainbows 10 Scan A single primary colored light wanders between start and end Scan dot size 11 Scan Dual Same as Scan but uses two lights starting at both ends scan dot size 12 Fade Fades smoothly between primary and secondary color - 13 Theater Pattern of one lit and two unlit LEDs running Gap in lights 14 Theater Rainbow Same as Theater but uses colors of the rainbow - 15 Running Sine Waves scrolling Wavelength 16 Saw Sawtooth Waves scrolling Wavelength 17 Twinkle Random LEDs light up in the primary color with secondary as background, turns all off Amount of LEDs turning on 18 Dissolve Fills LEDs with primary in random order, then off again Dissolve rate 19 Dissolve Rnd Fills LEDs with random colors in random order, then off again Dissolve rate 20 Sparkle Single random LEDs light up in the primary color for a short time, secondary is background - 21 Sparkle Dark All LEDs are lit in the primary color, single random LEDs turn off for a short time - 22 Sparkle+ All LEDs are lit in the primary color, multiple random LEDs turn off for a short time - 23 Strobe All LEDs are lit in the secondary color, all LEDs flash in a single short burst in primary color - 24 Strobe Rainbow Same as strobe, cycles through the rainbow - 25 Strobe Mega All LEDs are lit in the secondary color, all LEDs flash in several short bursts in primary color - 26 Blink Rainbow Same as blink, cycles through the rainbow Blink Duty cycle 27 Android Section of varying length running Maximum section length 28 Chase 2 LEDs in primary color running on secondary Size of chaser 29 Chase Random Like Chase but leaves trail of random color Size of chaser 30 Chase Rainbow Like 28 but leaves trail of rainbow Size of chaser 31 Chase Flash 2 LEDs flash in secondary color while the rest is lit in primary. The flashing LEDs wander from start to end - 32 Chase Flash Rnd Like Chase Flash, but the 2 LEDs flash in random colors and leaves a random color behind - 33 Rainbow Runner Like Chase, but the 2 LEDs light up in rainbow colors and leave a primary color trail Size of chaser 34 Colorful Shifting Red-Amber-Green-Blue pattern 0-127: Pastel colors 128-255: Saturated colors 35 Traffic Light Emulates a traffic light - 36 Sweep Random Like Sweep, but uses random colors Smoothness 37 Running 2 Pattern of n LEDs primary and n LEDs secondary moves along the strip Amount of LEDs lit/unlit 38 Aurora Simulation of the Aurora Borealis Number of waves 39 Stream Flush bands random hues along the string Width of each band (lower is wider) 40 Scanner Dot moves between ends, leaving behing a fading trail Fade rate 41 Lighthouse Dot moves from start to end, leaving behing a fading trail Fade rate 42 Fireworks Random color blobs light up, then fade again Amount of fireworks 43 Rain Like Fireworks, but the blobs move Amout of Rain 44 Tetrix Falling blocks stack - 45 Fire Flicker LEDs randomly flickering Flickering intensity 46 Gradient Moves a saturation gradient of the primary color along the strip Gradient width 47 Loading Moves a sawtooth pattern along the strip Width 48 Police A red and a blue dot running Size of dots 49 Police All Two areas, one red and one blue, sweeping - 50 Two Dots Like Police, but with custom colors Size of dots 51 Two Areas Like Police All, but with custom colors - 52 Running Dual Sine waves in both directions Number of waves 53 Halloween Running 2, but always uses orange and purple Amount of LEDs lit/unlit 54 Tri Chase Like Chase, but with 3 colors Width of pattern 55 Tri Wipe Like Wipe but turns LEDs off as \"third color\" - 56 Tri Fade Fades the whole strip from primary color to secondary color to off - 57 Lightning Short random white strobe similar to a lightning bolt Amount of strobes 58 ICU Two \"eyes\" running on opposite sides of the strip - 59 Multi Comet Like Scanner, but creates multiple trails Fade rate 60 Scanner Dual Like Scanner, but with two dots running on opposite sides Fade rate 61 Stream 2 Flush random hues along the string - 62 Oscillate Areas of primary and secondary colors move between opposite ends, combining colors where they touch - 63 Pride 2015 Rainbow cycling with brightness variation - 64 Juggle Eight colored dots running, leaving trails Fade rate 65 Palette Running color palette - 66 Fire 2012 Simulates flickering fire in red and yellow Sparkling of fire 67 Colorwaves Like Pride 2015, but uses palettes - 68 BPM Pulses moving back and forth on palette BPM setting 69 Fill Noise Noise pattern - 70 Noise 1 Fast Noise shift pattern - 71 Noise 2 Fast Noise shift pattern - 72 Noise 3 Noise shift pattern - 73 Noise 4 Noise sparkle pattern - 74 Colortwinkles LEDs light up randomly in random colors and fade off again Twinkle rate 75 Lake Calm palette waving - 76 Meteor The primary color creates a trail of randomly decaying color Fade rate 77 Meteor Smooth Smoothly animated meteor Fade rate 78 Railway Shows primary and secondary color on alternating LEDs. All LEDs fade to their opposite color and back again Duty cycle of fade transition 79 Ripple Effect resembling random water ripples Rate of new ripples 80 Twinklefox FastLED gentle twinkling with slow fade in/out Density 81 Twinklecat Twinkling with fast in / slow out Density 82 Halloween Eyes One Pair of blinking eyes at random intervals along strip Fading rade of eyes 83 Solid Pattern Speed sets number of LEDs on, intensity sets off Amount of LEDs turned off 84 Solid Pattern Tri Solid Pattern with three colors Amount of LEDs of each color 85 Spots Solid lights with even distance Size of each spot 86 Spots Fade Spots, getting bigger and smaller Fading of each spot 87 Glitter Rainbow with white sparkles Amount of glitter 88 Candle Flicker resembling a candle flame Intensity of flickering 89 Fireworks Starburst Exploding multicolor fireworks Fragment count 90 Fireworks 1D one dimension fireworks with flare Firing side 91 Bouncing Balls Bouncing ball effect Number of balls 92 Sinelon Fastled sinusoidal moving eye Fade rate 93 Sinelon Dual Sinelon from both directions Fade rate 94 Sinelon Rainbow Sinelon in rainbow colours Fade rate 95 Popcorn popping kernels Number of kernels 96 Drip Water dripping effect Intensity of dripping 97 Plasma Plasma lamp Max brightness 98 Percent Lights up a percentage of segment Percentage 99 Ripple Rainbow Like ripple, but with a dimly lit changing background Rate of new ripples 100 Heartbeat led strip pulsing rhythm similar to a heart beat - 101 Pacifica Gentle, blue-green ocean waves (one color palette currently) Intensity of waves 102 Candle Multi Like candle effect, but each LED has it's own flicker pattern Intensity of flicker 103 Solid Glitter Like Glitter, but with solid color background Amount of glitter 104 Sunrise Simulates a gradual sunrise or sunset. Speed sets: 0 - static sun, 1 - 60: sunrise time in minutes, 60 - 120: sunset time in minutes - 60, above: \"breathing\" rise and set Sun intensity 105 Phased Sine waves (in sourcecode) Wave brightness against background 106 TwinkleUp Twinkle effect with fade-in Amount of Twinkles 107 Noise Pal Peaceful noise that's slow and with gradually changing palettes Wave intensity 108 Sine Controllable sine waves Sinewave frequency 109 Phased Noise Noisy sine waves Wave brightness against background 110 Flow Blend of palette and spot effects waveform frequency 111 Chunchun Birds flying in a circle formation Number of birds 112 Dancing Shadows Moving spotlights Number of spotlights 113 Washing machine Alternating direction (in source) Size of lit sections 114 Candy Cane Running 2 in Red & White Amount of LEDs lit/unlit 115 Blends Blends random colors across palette Blend speed 116 TV Simulator TV light spill simulation - 117 Dynamic Smooth Link Dynamic but with smooth palette blends 0-127: Set single LED 128-255: Set all LEDs","title":"Effects"},{"location":"features/effects-palettes/#palettes","text":"PaletteID Name Description 0 Default The palette is automatically selected depending on the effect. For most effects, this is the primary color 1 Random Cycle The palette changes to a random one every few seconds. Subject to change 2 Color 1 A palette consisting only of the primary color 3 Colors 1 & 2 Consists of the primary and secondary color 4 Color Gradient A palette which is a mixture of all segment colors 5 Colors Only Contains primary, secondary and tertiary colors 6 Party Rainbow without green hues 7 Cloud Gray-blueish colors 8 Lava Dark red, yellow and bright white 9 Ocean Blue, teal and white colors 10 Forest Yellow and green hues 11 Rainbow Every hue 12 Rainbow bands Rainbow colors with black spots in-between 13 Sunset Dark blue with purple, red and yellow hues 14 Rivendell Desaturated greens 15 Breeze Teal colors with varying brightness 16 Red & Blue Red running on blue 17 Yellowout Yellow, fading out 18 Analoguous Red running on blue 19 Splash Vibrant pink and magenta 20 Pastel Different hues with very little saturation 21 Sunset 2 Yellow and white running on dim blue 22 Beech Different shades of light blue 23 Vintage Warm white running on very dim red 24 Departure Greens and white fading out 25 Landscape Blue, white and green gradient 26 Beach Teal and yellow gradient fading out 27 Sherbet Bright white, pink and mint colors 28 Hult White, magenta and teal 29 Hult 64 Teal and yellow hues 30 Drywet Blue and yellow gradient 31 Jul Pastel green and red 32 Grintage Yellow fading out 33 Rewhi Bright orange on desaturated purple 34 Tertiary Red, green and blue gradien 35 Fire White, yellow and fading red gradient 36 Icefire Same as Fire, but with blue colors 37 Cyane Desaturated pastel colors 38 Light Pink Desaturated purple hues 39 Autumn Three white fields surrounded by yellow and dim red 40 Magenta White with magenta and blue 41 Magred Magenta and red hues 42 Yelmag Magenta and red hues with a yellow 43 Yelblu Blue with a little yellow 44 Orange & Teal An Orange - Gray - Teal gradient 45 Tiamat A bright meteor with blue, teal and magenta hues 46 April Night Dark blue background with colorful snowflakes 47 Orangery Orange and yellow tones 48 C9 Christmas lights palette. Red - amber - green - blue 49 Sakura Pink and rose tones 50 Aurora Greens on dark blue 51 Atlantica Greens & Blues of the ocean 52 C9 2 C9 plus yellow 53 C9 New C9, but brighter and with a less purple blue 54 Temperature Temperature mapping 55 Aurora 2 Aurora with some pinks & blue 56 Retro Clown Yellow to purple gradient 57 Candy Vivid yellows, magenta, salmon and blues 58 Toxy Reaf Vivid aqua to purple gradient 59 Fairy Reaf Bright aqua to purple gradient 60 Semi Blue Dark blues with a bright blue burst 61 Pink Candy White, pinks and purple 62 Red Reaf Blue, aqua and red gradient 63 Aqua Flash Aqua gradient with a flash of yellow and white 64 Yelblu Hot Yellow, red, blue spectrum 65 Lite Light Faint white and purple 66 Red Flash Red gradient with burst of white in the center 67 Blink Red Dark blue to dark red gradient with burst of purple 68 Red Shift Vibrant yellow to blue gradient with magenta, purple and red 69 Red Tide Waves of yellow, orange and red 70 Candy2 Faded gradient of yellow, salmon and blue","title":"Palettes"},{"location":"features/macros/","text":"Info Also see Presets for 0.11.0+. You are able to set custom actions (\"Macros\") in Time & Macro settings for the following events: Specific time of day Button short/long/double press HTTP API call executing a macro with &M= Alexa On/Off Countdown over Timed light duration over Device (re)boot (up to 0.10.2, use LED settings Boot preset in 0.11) Each macro has the format of a standard HTTP API call without the IP. Optionally, the \"win&\" may be omitted. For example, the macro \"A=255\" sets the brightness to maximum. \"R=255&G=160&B=0\" sets the color to orange. You can specify up to 16 macros. (up to 250 in WLED 0.11 since the Macro functionality has been merged into the Presets feature) Examples of how to use API-calls and define macros can be found in this issue and in this one . The simplest macro example is getting a button to do your bidding. The default pin to which a button can be connected is GPIO 0 (D3 on NodeMCU, D1 Mini and others). This pin is ideally pulled high to 3.3V with a 10k resistor and the configured macro executes when the pin is pulled low (grounded). The desired macro is entered on the Time/Macros configuration page and then assigned to a short, long or double press. Like this: The \"T=2\" macro toggles power to the LEDs (in this case long press). The \"FX=~\" macro steps through the effects (in this case short press). You can set a preset to P1=1&P2=3&PL=~ , enter the preset number for your button, and this will step through presets 1 and 3. Change the \"3\" to whatever your highest preset is that you want to include. The default (built-in) actions for button 0 are short-press: toggle on/off and long-press: select random color. Long-pressing for more than 6 seconds will open the WLED-AP with the default password ( wled1234 ). For further buttons, the default action for short press is cycling effects, long press ramp brightness, and double press cycle palettes. Buttons Multiple buttons are implemented since 0.13 and allow a few different types of buttons to be connected to the ESP: momentary push-buttons that short GPIO pin to ground momentary push-buttons that short GPIO pin to +3.3V (inverted) switches (be careful with selection of GPIO for switch since some GPIOs will prevent successful boot of ESP if held LOW or HIGH at boot) PIR switch AKA motion detection sensor (they set GPIO HIGH when motion is detected, this type of buttons will also trigger MQTT message with /motion topic) some GPIO pins on ESP32 can act as momentary touch buttons with no additional hardware analog \"buttons\" (also with inverted logic) those can be used as potentiometers or analog input buttons Button GPIO pin and type can be selected in the LED Settings page. Each momentary button can have 3 different Presets assigned, for short press, long press or double press. For switch type buttons you can assign only 2 presets, one for transition of switch from LOW to HIGH and second for the opposite transition from HIGH to LOW. Selecting 0 for preset will use the default action. If you find that the default action is inverted for switch, please create presets for On and Off actions and assign them appropriately. For assigning Presets to buttons use Time & Macros settings page. Analog button Starting in WLED 0.13, analog \"buttons\" (e.g. a potentiometer) are supported. With the Short and Long columns set to 0, set the Double column in Button Actions to one of these values to configure: Property Value Global brightness 250 Effect speed 249 Effect intensity 248 Palette 247 Primary color hue 200 Segment N opacity 0-32 This potentiometer should be supplied 3.3V and GND, with it's output supplied to A0 (or any other ADC pin you specify), reccomended 10K\u03a9 or greater. Global brightness Users planning to use a potentiometer for global brightness should be aware that wled is configured to turn off when the potentiometer is adjusted to either extreme - both maximum and minimum adjustments. Users who desire to disable this functionality may do so on the hardware side by adding resistors between the potentiometer and the rails. Adding a resistor between the potentiometer and 3.3V prevents A0 from fully reaching 3.3V and allows the potentiometer to be adjusted to the maximum adjustment without powering off wled. A value of 7.5%-10% of the potentiometer value should be sufficient for this (~750\u03a9 for a 10K\u03a9 potentiometer). Similarly, added resistance between the potentiometer and GND prevents A0 from reaching 0V, and allows the potentiometer to be adjusted to the minimum adjustment without powering off wled. A value of 3-5% of the potentiometer value should be sufficient (~500\u03a9 for a 10K\u03a9 potentiomenter). In both instances, the added resistances will slightly reduce the overall adjustment range, with a larger reduction for larger resistor choices. As such, A user who desires the maximum possible adjustment range should determine their needed resistance values experimentally by installing the potentiometer, adjusting for stable behavior at the desired extrema, measuring the voltage on A0, using the voltage divider equation to determine the optimal resistance, then retesting for confirmation.","title":"Macros"},{"location":"features/macros/#buttons","text":"Multiple buttons are implemented since 0.13 and allow a few different types of buttons to be connected to the ESP: momentary push-buttons that short GPIO pin to ground momentary push-buttons that short GPIO pin to +3.3V (inverted) switches (be careful with selection of GPIO for switch since some GPIOs will prevent successful boot of ESP if held LOW or HIGH at boot) PIR switch AKA motion detection sensor (they set GPIO HIGH when motion is detected, this type of buttons will also trigger MQTT message with /motion topic) some GPIO pins on ESP32 can act as momentary touch buttons with no additional hardware analog \"buttons\" (also with inverted logic) those can be used as potentiometers or analog input buttons Button GPIO pin and type can be selected in the LED Settings page. Each momentary button can have 3 different Presets assigned, for short press, long press or double press. For switch type buttons you can assign only 2 presets, one for transition of switch from LOW to HIGH and second for the opposite transition from HIGH to LOW. Selecting 0 for preset will use the default action. If you find that the default action is inverted for switch, please create presets for On and Off actions and assign them appropriately. For assigning Presets to buttons use Time & Macros settings page.","title":"Buttons"},{"location":"features/macros/#analog-button","text":"Starting in WLED 0.13, analog \"buttons\" (e.g. a potentiometer) are supported. With the Short and Long columns set to 0, set the Double column in Button Actions to one of these values to configure: Property Value Global brightness 250 Effect speed 249 Effect intensity 248 Palette 247 Primary color hue 200 Segment N opacity 0-32 This potentiometer should be supplied 3.3V and GND, with it's output supplied to A0 (or any other ADC pin you specify), reccomended 10K\u03a9 or greater.","title":"Analog button"},{"location":"features/macros/#global-brightness","text":"Users planning to use a potentiometer for global brightness should be aware that wled is configured to turn off when the potentiometer is adjusted to either extreme - both maximum and minimum adjustments. Users who desire to disable this functionality may do so on the hardware side by adding resistors between the potentiometer and the rails. Adding a resistor between the potentiometer and 3.3V prevents A0 from fully reaching 3.3V and allows the potentiometer to be adjusted to the maximum adjustment without powering off wled. A value of 7.5%-10% of the potentiometer value should be sufficient for this (~750\u03a9 for a 10K\u03a9 potentiometer). Similarly, added resistance between the potentiometer and GND prevents A0 from reaching 0V, and allows the potentiometer to be adjusted to the minimum adjustment without powering off wled. A value of 3-5% of the potentiometer value should be sufficient (~500\u03a9 for a 10K\u03a9 potentiomenter). In both instances, the added resistances will slightly reduce the overall adjustment range, with a larger reduction for larger resistor choices. As such, A user who desires the maximum possible adjustment range should determine their needed resistance values experimentally by installing the potentiometer, adjusting for stable behavior at the desired extrema, measuring the voltage on A0, using the voltage divider equation to determine the optimal resistance, then retesting for confirmation.","title":"Global brightness"},{"location":"features/multi-strip/","text":"Multi strip support Starting in WLED 0.12.0, you are able to use multiple LED outputs from one ESP board! Pins and LED nubers can be easily configured in LED settings, you don't need to re-compile code for your specific setup. Custom binaries for multiple pins are now also a thing of the past! There are a few tips and recomendations to keep in mind when designing your setup: General It is highly recommended to use an ESP32 when using more than 1 output You may freely choose the LEDs type, pin numbers, length and color order of your LED strips at runtime in the LED settings page Highly recommeded to size power supply correctly according to your setup and disable the WLED brightness limiter setting to increase framerate with very large LED counts Most strip types have yet to be tested. Add confirmed working below: Confirmed working: WS281x, SK6812 RGBW, PWM white ESP8266 There is a maximum of 3 strips supported. It is highly recommended to use two specific LED pins, GPIO1 (TX) and GPIO2 (D4), since they allow for hardware driving. It is recommended to use 512 LEDs/pin for good performance for a total of 1024 LEDs. 800 LEDs/pin for a total of 1600 has been confirmed working, but is not recommended for good performance and reliability. Using GPIO1 will disable serial debugging. If you need it, you can't use a strip on this pin. GPIO3 is the third pin that allows hardware driving on ESP8266. However, it uses 5 times as much memory per LED as GPIO 1 and 2, so use it only for low LED counts (recommended <50) You can use any other pin, but it will use the bitbang method, which is not recommended for reliability. It is best to stick to GPIO 1, 2, and if need be, 3. Using pin GPIO16 for WS2812b LEDs did not work in my testing. ESP8266 can calculate about 15k LEDs per second (that means 250LEDs @~60fps, 500 LEDs @~30fps, 1000 LEDs @~15fps) The LED settings will give you a bar that shows how much memory you can allocate. ESP32 There is a maximum of 10 strips supported Contrary to the ESP8266, the pin usage does not matter on ESP32, feel free to use any available pin For perfect performance, it is recommeded to use 512 LEDs/pin with 4 outputs for a total of 2048 LEDs. For very good performance, it is recommended to use 800 LEDs/pin with 4 outputs for a total of 3200 LEDs. For good performance, you can use 1000 LEDs/pin with 4 outputs for a total of 4000 LEDs. For okay performance, you can use 1000 LEDs/pin with 5 outputs for a total of 5000 LEDs. For okay performance, you can use 800 LEDs/pin with 6 outputs for a total of 4800 LEDs. ESP32 can calculate about 65k-85k LEDs per second (that means 1000 LEDs @~70fps, 2000 LEDs @~35fps, 4000 LEDs @~18fps) 4 outputs seem to be the sweet spot.","title":"Multi-strip Support"},{"location":"features/multi-strip/#multi-strip-support","text":"Starting in WLED 0.12.0, you are able to use multiple LED outputs from one ESP board! Pins and LED nubers can be easily configured in LED settings, you don't need to re-compile code for your specific setup. Custom binaries for multiple pins are now also a thing of the past! There are a few tips and recomendations to keep in mind when designing your setup:","title":"Multi strip support"},{"location":"features/multi-strip/#general","text":"It is highly recommended to use an ESP32 when using more than 1 output You may freely choose the LEDs type, pin numbers, length and color order of your LED strips at runtime in the LED settings page Highly recommeded to size power supply correctly according to your setup and disable the WLED brightness limiter setting to increase framerate with very large LED counts Most strip types have yet to be tested. Add confirmed working below: Confirmed working: WS281x, SK6812 RGBW, PWM white","title":"General"},{"location":"features/multi-strip/#esp8266","text":"There is a maximum of 3 strips supported. It is highly recommended to use two specific LED pins, GPIO1 (TX) and GPIO2 (D4), since they allow for hardware driving. It is recommended to use 512 LEDs/pin for good performance for a total of 1024 LEDs. 800 LEDs/pin for a total of 1600 has been confirmed working, but is not recommended for good performance and reliability. Using GPIO1 will disable serial debugging. If you need it, you can't use a strip on this pin. GPIO3 is the third pin that allows hardware driving on ESP8266. However, it uses 5 times as much memory per LED as GPIO 1 and 2, so use it only for low LED counts (recommended <50) You can use any other pin, but it will use the bitbang method, which is not recommended for reliability. It is best to stick to GPIO 1, 2, and if need be, 3. Using pin GPIO16 for WS2812b LEDs did not work in my testing. ESP8266 can calculate about 15k LEDs per second (that means 250LEDs @~60fps, 500 LEDs @~30fps, 1000 LEDs @~15fps) The LED settings will give you a bar that shows how much memory you can allocate.","title":"ESP8266"},{"location":"features/multi-strip/#esp32","text":"There is a maximum of 10 strips supported Contrary to the ESP8266, the pin usage does not matter on ESP32, feel free to use any available pin For perfect performance, it is recommeded to use 512 LEDs/pin with 4 outputs for a total of 2048 LEDs. For very good performance, it is recommended to use 800 LEDs/pin with 4 outputs for a total of 3200 LEDs. For good performance, you can use 1000 LEDs/pin with 4 outputs for a total of 4000 LEDs. For okay performance, you can use 1000 LEDs/pin with 5 outputs for a total of 5000 LEDs. For okay performance, you can use 800 LEDs/pin with 6 outputs for a total of 4800 LEDs. ESP32 can calculate about 65k-85k LEDs per second (that means 1000 LEDs @~70fps, 2000 LEDs @~35fps, 4000 LEDs @~18fps) 4 outputs seem to be the sweet spot.","title":"ESP32"},{"location":"features/presets/","text":"Presets can be used to save your favorite light configurations to apply later! You can compare them to the \"scenes\" feature present in some other smart devices. New version (0.11+) Overview WLED 0.11.0 contains a major overhaul of presets, storing them in a /presets.json file in an internal filesystem. This enables many new features, you can now have up to 250 presets and each of them can save all segments which are set up! Speaking of segments, the maximum number has been increased to 12 on ESP8266 and 16 on ESP32! Presets can now also contain both HTTP and JSON API commands, replacing the previous Macro functionality. Each preset can be named, so you'll be able to access it more easily! How to use The new preset system is quite a bit more advanced than the previous one, thus it is likely not as self-explanatory to use. Here you can find what each setting does and how to make best use of it! \"Create Preset\" button Use this to save the current state as a permanent preset, or to add a new API macro. Preset name Enter a nice name for your preset here. I would recommend putting something short, but to the point here, like Epic fireworks or Slow fade . All special characters and emoji are permitted (however, there must not be more than 6 consecutive whitespaces) If you leave this empty, you'll get a name based on the preset ID number, like Preset 16 . Quick load label You can optionally add a short label up to 2 characters or 1 emoji long. It will show up in a small circle on top of the preset list for extra quick access without scrolling! I recommend using this for the presets you truly love. Use current state/Overwrite with state This is enabled by default when adding a new preset and disabled when editing an existing preset. When enabled, it will write the current segment config, including all colors and effect, to the preset. When disabled, it will instead give you a textfield to enter a custom API command or show you the command currently saved. Include brightness If disabled, the brightness value is not included in the preset. This can be useful e.g. when you want to control the brightness manually and want the preset to only set the effect. Save segment bounds This is an important one. Make sure it is enabled for your boot preset, so that your segment config is properly restored on boot! When disabled, the segment start and stop LEDs are not included in the preset. This can be useful if you plan to make changes to your segment setup and don't want your presets to always reset it to the point it was when the preset was saved. API command This accepts any HTTP or JSON API command! (only visible if the current state checkbox is unchecked) It replaces the previous macro functionality. If you know your JSON, you can even create playlists of other presets! Save to ID This is the ID the preset will be saved to. When creating a new preset, you likely won't have to change it as the lowest unused ID will be chosen automatically. If you change the ID on an existing preset and save, you can copy it to the new ID - change the name though. Save and Delete buttons Now these are self-explanatory, but I said I'd cover each point :) ID This is the number you'll want to use to apply this preset from a timed macro or automation! A note on performance This new preset system is quite fast where it matters, reading the presets. Applying a preset will typically take less than a tenth of a second. However, due to a design choice of the LittleFS filesystem used by WLED, random writes to the preset file are very resource intensive. This means that while updating your presets, you might notice your light freezing and becoming unresponsive for up to a few seconds. Adding new presets is usually very fast, those performance issues will occur once you delete/edit/overwrite older presets and your preset file becomes very large, or when adding presets after deleting older ones. I'm looking into ways to mitigate this situation as soon as possible! Meanwhile, to keep things snappy, I would recommend not having more than 50-ish single segment or a dozen of multi-segment presets. What about my cool presets from earlier versions? Don't worry, they (as well as your settings) will be automatically imported to the new system! And if you ever need to downgrade to v0.10 for some reason, they will still be there (although any changes made in v0.11 won't be applied) Obtaining preset list Obtaining the preset list is possible with the /presets.json file Seeing the name of the current preset with the API only is not possible, you can only obtain its ID. Then you'd need some code to match it with the entries from presets.json (this is also what the UI does). See section \"Backing up/restoring presets\". Saving named presets Save a named preset with {\"psave\":<preset number here>;\"n\":\"Preset name\",\"ib\":true,\"sb\":true} Backing up/restoring presets To backup all presets, go to [WLED-IP]/edit (OTA lock must be off), right click the presets.json file and download! To restore, use the Choose file and Upload buttons. Applying presets at a certain time of day Tip If you want to create a preset that turns on the light to the last effect displayed, uncheck Use current state and enter T=1 into the API Command field. WLED supports schedules - that is, applying presets at a certain time automatically. Here is a simple guide to get it set up quickly! Creates the preset(s) you want to load at specific time(s) Note the preset ID - the small gray number to the left of the preset name (or, in the bottom of the preset menu) Go to the Time & Macros section in the WLED settings. Make sure the time displayed is correct and accurate. It is highly recommended to enable NTP for a reliable schedule. Do not forget to set the correct timezone. If applicable, daylight saving time is handled automatically. Scroll down to Time-controlled presets . There are 8 different timer slots available. Enter the hour, minute, and weekdays you want the preset to activate. In the Preset column, enter the preset ID you noted earlier. Save the settings page! You have successfully set up a schedule :) Note This only applies the preset at the start of the specified minute. If you set up two presets, one to turn on the light at 7 and another to turn it off at 8, if WLED is booted at 7:30, the light will not turn on. This should not be an issue in most applications. Earlier versions (up to 0.10) There are 16 preset slots in total. In 0.9.0, the last preset (16) is capable of saving the entire segment configuration. All other presets only save a single segment (main segment, the first one by default) and restore that preset to all selected segments. In the Favorites tab, the number buttons from 1-16 are the different save slots. Find a config you like, then toggle Saving mode on and click on a number to save the preset to that slot. If Saving mode is toggled off, you can restore presets with a single click. Preset cycle (up to 0.12.1) With this feature, you can create an animation by automatically swapping between presets within a specified range. Keep in mind that any changes you make to effects/colors will be overridden once the system applies the next preset. If you want to start the preset cycle on boot, go to LED settings and tick \"Save current preset cycle configuration as boot default To modify the duration of the preset cycle, ensure the preset cycle box is unchecked before entering a new time value. Once updated, the preset cycle can be enabled again\" Playlists supersede Preset cycle in 0.13.","title":"Presets"},{"location":"features/presets/#new-version-011","text":"","title":"New version (0.11+)"},{"location":"features/presets/#overview","text":"WLED 0.11.0 contains a major overhaul of presets, storing them in a /presets.json file in an internal filesystem. This enables many new features, you can now have up to 250 presets and each of them can save all segments which are set up! Speaking of segments, the maximum number has been increased to 12 on ESP8266 and 16 on ESP32! Presets can now also contain both HTTP and JSON API commands, replacing the previous Macro functionality. Each preset can be named, so you'll be able to access it more easily!","title":"Overview"},{"location":"features/presets/#how-to-use","text":"The new preset system is quite a bit more advanced than the previous one, thus it is likely not as self-explanatory to use. Here you can find what each setting does and how to make best use of it! \"Create Preset\" button Use this to save the current state as a permanent preset, or to add a new API macro. Preset name Enter a nice name for your preset here. I would recommend putting something short, but to the point here, like Epic fireworks or Slow fade . All special characters and emoji are permitted (however, there must not be more than 6 consecutive whitespaces) If you leave this empty, you'll get a name based on the preset ID number, like Preset 16 . Quick load label You can optionally add a short label up to 2 characters or 1 emoji long. It will show up in a small circle on top of the preset list for extra quick access without scrolling! I recommend using this for the presets you truly love. Use current state/Overwrite with state This is enabled by default when adding a new preset and disabled when editing an existing preset. When enabled, it will write the current segment config, including all colors and effect, to the preset. When disabled, it will instead give you a textfield to enter a custom API command or show you the command currently saved. Include brightness If disabled, the brightness value is not included in the preset. This can be useful e.g. when you want to control the brightness manually and want the preset to only set the effect. Save segment bounds This is an important one. Make sure it is enabled for your boot preset, so that your segment config is properly restored on boot! When disabled, the segment start and stop LEDs are not included in the preset. This can be useful if you plan to make changes to your segment setup and don't want your presets to always reset it to the point it was when the preset was saved. API command This accepts any HTTP or JSON API command! (only visible if the current state checkbox is unchecked) It replaces the previous macro functionality. If you know your JSON, you can even create playlists of other presets! Save to ID This is the ID the preset will be saved to. When creating a new preset, you likely won't have to change it as the lowest unused ID will be chosen automatically. If you change the ID on an existing preset and save, you can copy it to the new ID - change the name though. Save and Delete buttons Now these are self-explanatory, but I said I'd cover each point :) ID This is the number you'll want to use to apply this preset from a timed macro or automation!","title":"How to use"},{"location":"features/presets/#a-note-on-performance","text":"This new preset system is quite fast where it matters, reading the presets. Applying a preset will typically take less than a tenth of a second. However, due to a design choice of the LittleFS filesystem used by WLED, random writes to the preset file are very resource intensive. This means that while updating your presets, you might notice your light freezing and becoming unresponsive for up to a few seconds. Adding new presets is usually very fast, those performance issues will occur once you delete/edit/overwrite older presets and your preset file becomes very large, or when adding presets after deleting older ones. I'm looking into ways to mitigate this situation as soon as possible! Meanwhile, to keep things snappy, I would recommend not having more than 50-ish single segment or a dozen of multi-segment presets.","title":"A note on performance"},{"location":"features/presets/#what-about-my-cool-presets-from-earlier-versions","text":"Don't worry, they (as well as your settings) will be automatically imported to the new system! And if you ever need to downgrade to v0.10 for some reason, they will still be there (although any changes made in v0.11 won't be applied)","title":"What about my cool presets from earlier versions?"},{"location":"features/presets/#obtaining-preset-list","text":"Obtaining the preset list is possible with the /presets.json file Seeing the name of the current preset with the API only is not possible, you can only obtain its ID. Then you'd need some code to match it with the entries from presets.json (this is also what the UI does). See section \"Backing up/restoring presets\".","title":"Obtaining preset list"},{"location":"features/presets/#saving-named-presets","text":"Save a named preset with {\"psave\":<preset number here>;\"n\":\"Preset name\",\"ib\":true,\"sb\":true}","title":"Saving named presets"},{"location":"features/presets/#backing-uprestoring-presets","text":"To backup all presets, go to [WLED-IP]/edit (OTA lock must be off), right click the presets.json file and download! To restore, use the Choose file and Upload buttons.","title":"Backing up/restoring presets"},{"location":"features/presets/#applying-presets-at-a-certain-time-of-day","text":"Tip If you want to create a preset that turns on the light to the last effect displayed, uncheck Use current state and enter T=1 into the API Command field. WLED supports schedules - that is, applying presets at a certain time automatically. Here is a simple guide to get it set up quickly! Creates the preset(s) you want to load at specific time(s) Note the preset ID - the small gray number to the left of the preset name (or, in the bottom of the preset menu) Go to the Time & Macros section in the WLED settings. Make sure the time displayed is correct and accurate. It is highly recommended to enable NTP for a reliable schedule. Do not forget to set the correct timezone. If applicable, daylight saving time is handled automatically. Scroll down to Time-controlled presets . There are 8 different timer slots available. Enter the hour, minute, and weekdays you want the preset to activate. In the Preset column, enter the preset ID you noted earlier. Save the settings page! You have successfully set up a schedule :) Note This only applies the preset at the start of the specified minute. If you set up two presets, one to turn on the light at 7 and another to turn it off at 8, if WLED is booted at 7:30, the light will not turn on. This should not be an issue in most applications.","title":"Applying presets at a certain time of day"},{"location":"features/presets/#earlier-versions-up-to-010","text":"There are 16 preset slots in total. In 0.9.0, the last preset (16) is capable of saving the entire segment configuration. All other presets only save a single segment (main segment, the first one by default) and restore that preset to all selected segments. In the Favorites tab, the number buttons from 1-16 are the different save slots. Find a config you like, then toggle Saving mode on and click on a number to save the preset to that slot. If Saving mode is toggled off, you can restore presets with a single click.","title":"Earlier versions (up to 0.10)"},{"location":"features/presets/#preset-cycle-up-to-0121","text":"With this feature, you can create an animation by automatically swapping between presets within a specified range. Keep in mind that any changes you make to effects/colors will be overridden once the system applies the next preset. If you want to start the preset cycle on boot, go to LED settings and tick \"Save current preset cycle configuration as boot default To modify the duration of the preset cycle, ensure the preset cycle box is unchecked before entering a new time value. Once updated, the preset cycle can be enabled again\" Playlists supersede Preset cycle in 0.13.","title":"Preset cycle (up to 0.12.1)"},{"location":"features/relay-control/","text":"LED strips still use power when seemingly switched off. In case you want to prevent that, you have several ways of totally switching off power (including manually switching off the power), one of which is adding a relay to your circuit. GPIO12 (Pin D6 on many devices) is toggled by WLED when WLED is turned on/off (in the UI, or through other interfaces). This lets you control a relay through your WLED flashed controller. GPIO12 can be easily changed to any other available GPIO pin in LED Preferences page. When you decide that you want WLED to control a relay, make sure you buy a suitable relay. Check what voltage you can supply from your controller to relay (available 3.3V or 5V pin or different voltage from external power source), and make sure the relay can be controlled by voltage level your board is providing (3.3V CMOS, 5V TTL). Note, some relays come with a jumper that lets you configure whether the relay switches at high or low level of signal, giving you maximum flexibility. This page gives a clear description using a light bulb instead of a LED strip. And instead of the D1 mentioned in that story, with WLED, you use GPIO12. The default WLED behavior is to turn GPIO12 on (high) when the LEDs are on and off (low) when the LEDs are off. This behaviour can be changed in the LED Preferences page. Many relays are powered when the signal is LOW. See this thread . Sometimes people ask whether they can control more than one relay through WLED, including controlling this all via Alexa. Controlling an extra relay separately from the RGB lights is not something WLED is designed to do, however you can modify the code to add that functionality. For that, make sure you can compile WLED from source unmodified first. Then, change #define ESPALEXA_MAXDEVICES 1 in line 71 of the wled.h file to 2. After that, just follow the API documentation on https://github.com/Aircoookie/Espalexa to add a new EspalexaDevice to the alexa.cpp file Second option for controlling multiple relays is using a Multi Relay usermod. As with Alexa you will need to compile WLED from source an include Multi Relay usermod either by including -D USERMOD_MULTI_RELAY in PlatformIO.ini or adding #define USERMOD_MULTI_RELAY in wled.h or my_config.h . You can also override default number of relays by defining MULTI_RELAY_MAX_RELAYS . Configuring usermod is done using Usermod settings page where you can define GPIO pins used, wether relay activates on HIGH or LOW logic, if the activation has any delay and if the relay can be controlled from the outside using MQTT message (external). MQTT topic for controlling relays is wled/[device]/relay/[relay_id]/command and accepts on , off and toggle messages. When the relay changes state a message with on or off is sent with the topic wled/[device]/relay/[relay_id] .","title":"Relay Control"},{"location":"features/segments/","text":"Info Starting in WLED 0.9.0, Segments are supported. This feature allows you to set different zones on the LED strip, each running a different effect or color. A segment is selected if the checkmark next to the segment number is checked. Changes you make to color or effects will apply to all selected segments. The color/effect that is shown in the web UI is that of the first selected segment. There is one main segment , Segment 0 by default. This segment has a few important differences to the rest of the segments. - Color transitions only work on the main segment - The main segment's color is the one that will be reported to HTTP and MQTT APIs Tip: If you divide your strip into two segments, reverse the second one and select both, you can achieve very nice symmetrical effects! Segment 0 has a Start LED of 0 and a Stop LED equal to the LED Count you defined in Configuration, LED Preferences. The Stop LED is not included in the Segment. Currently you can create a maximum of 10 segments. Presets 1-15 use only Segment 0 by default. Preset 16 is the only Preset that saves settings for Segments 1-10. To display segment information select the down arrow in the Segment box. To add a Segment select \u201c+ Add Segment\u201d. Enter the Start and Stop LED as appropriate. Grouping and Spacing control the organization of the LEDs within the selected effect. To reverse the direction of an effect select Reverse Direction. To delete a Segment select the trash can. To save your Segment settings select the checkmark to the right of the Start and Stop LED numbers. Grouping and Spacing When an effect changes the color of one LED, it is really changing the color of one LED group. Since the default group size is one, the effect normally only changes a single LED. When Grouping is set to two, the effect will light two LEDs using the same color. The two LEDs are treated as a single virtual LED. To illustrate this, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Grouping is set to one we see a repeating pattern of one red LED, one blue LED, and one green LED. When Grouping is set to two the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of two physical LEDs). The pattern becomes two red LEDs followed by two blue LEDs then two green LEDs. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 As the pattern cycles, the group of LEDs will move together. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 Spacing controls the space or gap between LEDs. The default spacing is zero, so normally there is no space between LEDs. When Spacing is set to one, every other LED will be lit. The number of virtual LEDs in the strip will be half the number of physical LEDs. Again, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Spacing is set to zero we see a repeating pattern of one red LED, one blue LED, and one green LED. When Spacing is set to one the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of the even numbered physical LEDs). The pattern becomes one red LED followed by a blank LED, one blue LED followed by a blank LED, then one green LED followed by a blank LED. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 As the pattern cycles, only the virtual LEDs will be lit - the blank LEDs in between the virtual LEDs will always be off. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 Grouping and Spacing can be combined to create many different custom LED layouts. In the example below, the strip of 12 physical LEDs has been configured to function as four virtual LEDs with a small gap between them. Setting LED Output Grouping 2 Spacing 1 Grouping 2 Spacing 1 Interleaving This is an easy way to get a repeating pattern of colors using one segment per color. Offset in a segment By default effects start in the first LED in the segment and finish in the last one. If the offset parameter in a segment is used, the effect start will be moved by the number of positions entered. It will continue to the last LED and then finish with the initial positions that were skipped. For instance, let's assume assume a strip of 12 LEDs with the positions numbered as follows (like the examples above): An offset value of 5 will make the effect start in the physical position 5, continue to position 11 and then finish with positions 0 through 4, like this: A negative offset value is allowed and represents an offset starting from the last position in the segment. In our previous example, an offset of -2 will start the effect in position 10, like this: The offset values is prioritized over grouping and/or spacing. For example, if the offset is 2, grouping 4 and spacing 1, the first group of 4 LEDs will start at the physical position number 2.","title":"Segments"},{"location":"features/segments/#grouping-and-spacing","text":"When an effect changes the color of one LED, it is really changing the color of one LED group. Since the default group size is one, the effect normally only changes a single LED. When Grouping is set to two, the effect will light two LEDs using the same color. The two LEDs are treated as a single virtual LED. To illustrate this, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Grouping is set to one we see a repeating pattern of one red LED, one blue LED, and one green LED. When Grouping is set to two the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of two physical LEDs). The pattern becomes two red LEDs followed by two blue LEDs then two green LEDs. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 As the pattern cycles, the group of LEDs will move together. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 Spacing controls the space or gap between LEDs. The default spacing is zero, so normally there is no space between LEDs. When Spacing is set to one, every other LED will be lit. The number of virtual LEDs in the strip will be half the number of physical LEDs. Again, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Spacing is set to zero we see a repeating pattern of one red LED, one blue LED, and one green LED. When Spacing is set to one the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of the even numbered physical LEDs). The pattern becomes one red LED followed by a blank LED, one blue LED followed by a blank LED, then one green LED followed by a blank LED. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 As the pattern cycles, only the virtual LEDs will be lit - the blank LEDs in between the virtual LEDs will always be off. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 Grouping and Spacing can be combined to create many different custom LED layouts. In the example below, the strip of 12 physical LEDs has been configured to function as four virtual LEDs with a small gap between them. Setting LED Output Grouping 2 Spacing 1 Grouping 2 Spacing 1","title":"Grouping and Spacing"},{"location":"features/segments/#interleaving","text":"This is an easy way to get a repeating pattern of colors using one segment per color.","title":"Interleaving"},{"location":"features/segments/#offset-in-a-segment","text":"By default effects start in the first LED in the segment and finish in the last one. If the offset parameter in a segment is used, the effect start will be moved by the number of positions entered. It will continue to the last LED and then finish with the initial positions that were skipped. For instance, let's assume assume a strip of 12 LEDs with the positions numbered as follows (like the examples above): An offset value of 5 will make the effect start in the physical position 5, continue to position 11 and then finish with positions 0 through 4, like this: A negative offset value is allowed and represents an offset starting from the last position in the segment. In our previous example, an offset of -2 will start the effect in position 10, like this: The offset values is prioritized over grouping and/or spacing. For example, if the offset is 2, grouping 4 and spacing 1, the first group of 4 LEDs will start at the physical position number 2.","title":"Offset in a segment"},{"location":"features/settings/","text":"All web configurable settings are split in 5 sub-pages. This page is meant to clarify the purpose of each setting. This documentation applies to WLED 0.8.5. Settings overview WiFi Settings This sub-page offers options to connect the ESP to different WiFi/WLAN devices. Setting name Value Range Description Network Name String 0..32 The name (SSID) of your home WiFi. Spaces and some other characters are not supported. Network password String 0..64 The password of your home WiFi Static IP 4x 0..256 An optional static IPv4 address Static gateway 4x 0..255 In a static config, your gateway's IPv4 address Static subnet 4x 0..255 In a static config, this normally is 255.255.255.0 mDNS address String 0..32 Name of your device for the Bonjour/Zeroconf protocol Client IP - The current IP of the ESP in the home network AP SSID String 0..32 The name of the ESPs internal WiFi hotspot (Access Point) Hide AP name Y/N The ESPs Access Point won't appear in WiFi lists of other devices AP password String 0..64 The password of the ESPs WiFi Access Point AP WiFi channel 1..13 The 2.4G WiFi band of the AP. For advanced users AP opens select Condition on when to open the AP AP IP - The Access Point IPv4 address of the ESP (is 192.168.4.1 in most cases) WiFi sleep Y/N Disabling WiFi sleep can increase reliability, but increases power consumption LED settings This sub-page configures the state of your lights. Setting name Value Range Description LED count 1..1500 How many LEDs are in your WS2812B strip Automatic brightness limiter Y/N Limit brightness to stay in a given current range Maximum current 300..65000 Current limit im milliamps LED voltage select Voltage/type of LEDs Custom max. current 1..255 Custom current per LED on full white 4-channel LEDs (RGBW) Y/N Support for SK6812 LEDs with white channel Color order select If your LEDs display incorrect colors (red and green swapped), try changing it Auto-calculate white select Get white channel from RGB automatically (only applicable for RGBW) Details Turn on after power up Y/N Whether the lights should turn on after a reset Apply preset 0..16 Preset to load at boot (0 = none) Set current preset cycle... Y/N The current preset cycle configuration will be used as boot default Use Gamma for brightness Y/N Will correct brightness changes to make it appear more linear. Advised to leave off Use Gamma for color Y/N Will correct colors to match those on a monitor. Strongly advised to keep on Brightness factor 1..255 Factor to change master brightness if it is to dim/bright for a certain configuration Crossfade Y/N Whether to have a smooth fading transitional effect when changing colors/brightness Transition time 0..65535 How many milliseconds the transition lasts Enable transition for secondary color Y/N Enable Palette transitions Y/N Enable transitions for palettes (not affected by transition time) Timed light duration 1..255 How long the nightlight should stay on Target brightness 0..255 What brightness the light should have after time is over. 0=off. Fade down Y/N Gradually fades down the light over the duration instead of turning it off at the end Palette blending select Choose how the palette wraps at the end (seam) Reverse LED order Y/N Mirrors the LEDs (last LED is first) Skip first LED Y/N Will turn off the first LED and shift the remaining by 1 (1st LED used as a signal repeater) User Interface settings This sub-page changes the look of the web interface. Setting name Value Range Description Server description String 1..32 The name of the device as shown on the top of the UI. Differs from Alexa device name Sync button toggles... Y/N If enabled, both send and receive are toggled by the button in UI. If disabled, only sending is toggled and receiving is kept as configured in Sync settings. Sync settings This sub-page configures external software synchronization interfaces. Setting name Value Range Description On/Off button enabled Y/N Check if there is a physical pushbutton connected to GPIO0 Infrared receiver type select Type of infrared receiver Broadcast UDP port 1..65535 All WLED lights you want to group together must have the same port Receive Brightness Y/N If there is a sync notification, whether its brightness should be applied Color Y/N Whether the color of the synced device should be applied Effects Y/N Whether the effect settings should be applied Send on direct change Y/N Whether to send a sync notification when state changed via web UI or API Send on button press Y/N Whether to send sync when toggled by button or IR Send Alexa notifications Y/N Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Y/N Whether to send sync after a connected Philips light changed Send Macro notifications Y/N Whether to send sync after a macro was triggered Send notifications twice Y/N Sends notifications twice (if you have issues with UDP packet loss) Receive UDP realtime Y/N Receive live UDP stream data (DRGB, WARLS, ...) Use E1.31 multicast Y/N Listen on multicast IP instead of unicast E1.31 start universe 1..63000 Only applies for multicast. If you want to set different content, set ESPs at least 8 universes apart Timeout 100..65000 Time after which to resume normal mode once stream has stopped. 65000 will keep the data indefinitely Force max brightness Y/N Realtime stream with max. brightness (unless limited by power brightness limiter) Disable realtime gamma correction Y/N Check if your host software does gamma correction already Realtime LED offset -255..255 Shift the realtime input by how many LEDs Emulate Alexa device Y/N Allows you to control the light via the Amazon Echo voice assistant. Requires reboot Alexa Invocation name String 1..32 The name you want the device to have for control via Alexa. Choose something easy she can understand Device Auth token String 40 You will get this in an e-mail during Blynk setup MQTT Broker IP or String 0..32 Connect to this host MQTT broker Device topic String 0..32 MQTT topic unique to this light Group topic String 0..32 MQTT topic for all lights in a group (room, floor, ...) Hue Bridge IP 4x 0..255 Your Hue bridge IPv4 address. Should be static to avoid reassigning Poll Hue light 0..99 The ID of the hue lamp you want to sync WLED to every x ms 100..65000 How often to poll. Smaller numbers decrease lag but might hurt bridge responsiveness ... Y/N Turn polling on/off Receive On/Off Y/N Turn on/off like the hue light Brightness Y/N Set brightness to that of the hue light Color Y/N Set color to that of the hue light Hue status - Shows the current connection status to a hue bridge Time settings This sub-page configures automation tasks. Setting name Value Range Description Get time from NTP Y/N Whether to get the current time from the internet Use 24h format Y/N Use 24h clock format instead of AM/PM Time zone - Your time zone. Open an issue if yours is unsupported. DST is applied automatically UTC offset -65000..65000 Seconds to offset. If you want e.g. 1h offset, use 3600 Current local time - The local time the ESP has acquired. If set up correctly, should equal actual time Clock overlay - The special overlay to use. Allows to display a clock on the strip Countdown mode Y/N Allows to have a visual countdown towards a specific date API macro fields 16x String 0..64 Allows you to define custom API calls which can be triggered by events Boot Macro 0..16 Which macro to trigger after WiFi connected (0 is default action) Alexa On/Off Macros 2x 0..16 Which macros to trigger when turning on/off via Alexa Button Macro 0..16 Macro to trigger if button is short pressed. Default action is on/off toggle. Long Press 0..16 Macro to trigger if button is long pressed (>0.7s). Default action is random color. Double press 0..16 Macro for double click on button. Countdown-Over Macro 0..16 Macro to trigger when the countdown is over Timed-Light-Over Macro 0..16 Macro to trigger when timed light is done Security settings This sub-page manages permissions and updates. Setting name Value Range Description Enable OTA lock Y/N If enabled, no firmware updates may be done via WiFi and some settings can't be changed. Passphrase String 0..32 To disable OTA lock, you need a password. The default is \"wledota\". Change it! Deny access to WiFi settings Y/N Disables changes to WiFi settings while locked Disable recovery AP Y/N If enabled, the module will not open an Access Point if connection to home WiFi failed. Factory reset Y/N Deletes all custom settings data (passwords, configuration, macros, presets) Manual OTA - If OTA is enabled, you can upload new binary firmware Enable ArduinoOTA Y/N Useful for developers. Be careful, can even be left on when OTA locked!","title":"Settings"},{"location":"features/settings/#settings-overview","text":"","title":"Settings overview"},{"location":"features/settings/#wifi-settings","text":"This sub-page offers options to connect the ESP to different WiFi/WLAN devices. Setting name Value Range Description Network Name String 0..32 The name (SSID) of your home WiFi. Spaces and some other characters are not supported. Network password String 0..64 The password of your home WiFi Static IP 4x 0..256 An optional static IPv4 address Static gateway 4x 0..255 In a static config, your gateway's IPv4 address Static subnet 4x 0..255 In a static config, this normally is 255.255.255.0 mDNS address String 0..32 Name of your device for the Bonjour/Zeroconf protocol Client IP - The current IP of the ESP in the home network AP SSID String 0..32 The name of the ESPs internal WiFi hotspot (Access Point) Hide AP name Y/N The ESPs Access Point won't appear in WiFi lists of other devices AP password String 0..64 The password of the ESPs WiFi Access Point AP WiFi channel 1..13 The 2.4G WiFi band of the AP. For advanced users AP opens select Condition on when to open the AP AP IP - The Access Point IPv4 address of the ESP (is 192.168.4.1 in most cases) WiFi sleep Y/N Disabling WiFi sleep can increase reliability, but increases power consumption","title":"WiFi Settings"},{"location":"features/settings/#led-settings","text":"This sub-page configures the state of your lights. Setting name Value Range Description LED count 1..1500 How many LEDs are in your WS2812B strip Automatic brightness limiter Y/N Limit brightness to stay in a given current range Maximum current 300..65000 Current limit im milliamps LED voltage select Voltage/type of LEDs Custom max. current 1..255 Custom current per LED on full white 4-channel LEDs (RGBW) Y/N Support for SK6812 LEDs with white channel Color order select If your LEDs display incorrect colors (red and green swapped), try changing it Auto-calculate white select Get white channel from RGB automatically (only applicable for RGBW) Details Turn on after power up Y/N Whether the lights should turn on after a reset Apply preset 0..16 Preset to load at boot (0 = none) Set current preset cycle... Y/N The current preset cycle configuration will be used as boot default Use Gamma for brightness Y/N Will correct brightness changes to make it appear more linear. Advised to leave off Use Gamma for color Y/N Will correct colors to match those on a monitor. Strongly advised to keep on Brightness factor 1..255 Factor to change master brightness if it is to dim/bright for a certain configuration Crossfade Y/N Whether to have a smooth fading transitional effect when changing colors/brightness Transition time 0..65535 How many milliseconds the transition lasts Enable transition for secondary color Y/N Enable Palette transitions Y/N Enable transitions for palettes (not affected by transition time) Timed light duration 1..255 How long the nightlight should stay on Target brightness 0..255 What brightness the light should have after time is over. 0=off. Fade down Y/N Gradually fades down the light over the duration instead of turning it off at the end Palette blending select Choose how the palette wraps at the end (seam) Reverse LED order Y/N Mirrors the LEDs (last LED is first) Skip first LED Y/N Will turn off the first LED and shift the remaining by 1 (1st LED used as a signal repeater)","title":"LED settings"},{"location":"features/settings/#user-interface-settings","text":"This sub-page changes the look of the web interface. Setting name Value Range Description Server description String 1..32 The name of the device as shown on the top of the UI. Differs from Alexa device name Sync button toggles... Y/N If enabled, both send and receive are toggled by the button in UI. If disabled, only sending is toggled and receiving is kept as configured in Sync settings.","title":"User Interface settings"},{"location":"features/settings/#sync-settings","text":"This sub-page configures external software synchronization interfaces. Setting name Value Range Description On/Off button enabled Y/N Check if there is a physical pushbutton connected to GPIO0 Infrared receiver type select Type of infrared receiver Broadcast UDP port 1..65535 All WLED lights you want to group together must have the same port Receive Brightness Y/N If there is a sync notification, whether its brightness should be applied Color Y/N Whether the color of the synced device should be applied Effects Y/N Whether the effect settings should be applied Send on direct change Y/N Whether to send a sync notification when state changed via web UI or API Send on button press Y/N Whether to send sync when toggled by button or IR Send Alexa notifications Y/N Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Y/N Whether to send sync after a connected Philips light changed Send Macro notifications Y/N Whether to send sync after a macro was triggered Send notifications twice Y/N Sends notifications twice (if you have issues with UDP packet loss) Receive UDP realtime Y/N Receive live UDP stream data (DRGB, WARLS, ...) Use E1.31 multicast Y/N Listen on multicast IP instead of unicast E1.31 start universe 1..63000 Only applies for multicast. If you want to set different content, set ESPs at least 8 universes apart Timeout 100..65000 Time after which to resume normal mode once stream has stopped. 65000 will keep the data indefinitely Force max brightness Y/N Realtime stream with max. brightness (unless limited by power brightness limiter) Disable realtime gamma correction Y/N Check if your host software does gamma correction already Realtime LED offset -255..255 Shift the realtime input by how many LEDs Emulate Alexa device Y/N Allows you to control the light via the Amazon Echo voice assistant. Requires reboot Alexa Invocation name String 1..32 The name you want the device to have for control via Alexa. Choose something easy she can understand Device Auth token String 40 You will get this in an e-mail during Blynk setup MQTT Broker IP or String 0..32 Connect to this host MQTT broker Device topic String 0..32 MQTT topic unique to this light Group topic String 0..32 MQTT topic for all lights in a group (room, floor, ...) Hue Bridge IP 4x 0..255 Your Hue bridge IPv4 address. Should be static to avoid reassigning Poll Hue light 0..99 The ID of the hue lamp you want to sync WLED to every x ms 100..65000 How often to poll. Smaller numbers decrease lag but might hurt bridge responsiveness ... Y/N Turn polling on/off Receive On/Off Y/N Turn on/off like the hue light Brightness Y/N Set brightness to that of the hue light Color Y/N Set color to that of the hue light Hue status - Shows the current connection status to a hue bridge","title":"Sync settings"},{"location":"features/settings/#time-settings","text":"This sub-page configures automation tasks. Setting name Value Range Description Get time from NTP Y/N Whether to get the current time from the internet Use 24h format Y/N Use 24h clock format instead of AM/PM Time zone - Your time zone. Open an issue if yours is unsupported. DST is applied automatically UTC offset -65000..65000 Seconds to offset. If you want e.g. 1h offset, use 3600 Current local time - The local time the ESP has acquired. If set up correctly, should equal actual time Clock overlay - The special overlay to use. Allows to display a clock on the strip Countdown mode Y/N Allows to have a visual countdown towards a specific date API macro fields 16x String 0..64 Allows you to define custom API calls which can be triggered by events Boot Macro 0..16 Which macro to trigger after WiFi connected (0 is default action) Alexa On/Off Macros 2x 0..16 Which macros to trigger when turning on/off via Alexa Button Macro 0..16 Macro to trigger if button is short pressed. Default action is on/off toggle. Long Press 0..16 Macro to trigger if button is long pressed (>0.7s). Default action is random color. Double press 0..16 Macro for double click on button. Countdown-Over Macro 0..16 Macro to trigger when the countdown is over Timed-Light-Over Macro 0..16 Macro to trigger when timed light is done","title":"Time settings"},{"location":"features/settings/#security-settings","text":"This sub-page manages permissions and updates. Setting name Value Range Description Enable OTA lock Y/N If enabled, no firmware updates may be done via WiFi and some settings can't be changed. Passphrase String 0..32 To disable OTA lock, you need a password. The default is \"wledota\". Change it! Deny access to WiFi settings Y/N Disables changes to WiFi settings while locked Disable recovery AP Y/N If enabled, the module will not open an Access Point if connection to home WiFi failed. Factory reset Y/N Deletes all custom settings data (passwords, configuration, macros, presets) Manual OTA - If OTA is enabled, you can upload new binary firmware Enable ArduinoOTA Y/N Useful for developers. Be careful, can even be left on when OTA locked!","title":"Security settings"},{"location":"features/subpages/","text":"This is the sitemap of the module server. Access with \\<ESP-IP>/path (Example: 192.168.8.4/settings ) Path Description OTA rights required Since version / Default UI, index page No 0.2 /update Upload new firmware Yes 0.3 /win HTTP Request API (since 0.3) No 0.3 /json JSON API No 0.8.4 /json/state JSON state object No 0.8.4 /json/info JSON information No 0.8.4 /json/eff Effect name list No 0.8.4 /json/pal Palette name list No 0.8.4 /json/live Current colors of LEDs No 0.9.0 /liveview Live preview of current LEDs No 0.9.0 /url Returns current light setup API url No 0.9.1 /settings Settings index page No 0.2 /settings/wifi WiFi Settings page Cnfg 0.5.0 /settings/led LED Settings page No 0.5.0 /settings/ui UI Settings page No 0.5.0 /settings/sync Sync Settings page No 0.5.0 /settings/time Time Settings page No 0.5.0 /settings/sec Security Settings page Yes 0.5.0 /welcome New User Welcome page No 0.5.0 /sliders UI, index page No 0.5.0 /reset Reboot module No 0.3 /version Returns build version No 0.3 /uptime Returns runtime in ms No 0.4 /freeheap Returns free memory No 0.4 /favicon.ico Page icon No 0.2 /teapot :) No 0.5.0 /edit SPIFFS page (if USEFS) Yes 0.2 Removed sites Path Description OTA rights required Versions /list Lists SPIFFS contents (if USEFS) Yes 0.2-0.8.3 /easter Joke page No 0.6.2 only /power Returns an estimate of used LED current No 0.5.0-0.8.3 /build Returns details about the build No 0.5.0-0.8.3 /cleareeprom Resets to factory defaults Yes 0.3-0.6.4 /down Kills software. Hard reset required. Yes 0.3-0.6.4","title":"Web GUI Sitemap"},{"location":"features/subpages/#removed-sites","text":"Path Description OTA rights required Versions /list Lists SPIFFS contents (if USEFS) Yes 0.2-0.8.3 /easter Joke page No 0.6.2 only /power Returns an estimate of used LED current No 0.5.0-0.8.3 /build Returns details about the build No 0.5.0-0.8.3 /cleareeprom Resets to factory defaults Yes 0.3-0.6.4 /down Kills software. Hard reset required. Yes 0.3-0.6.4","title":"Removed sites"},{"location":"interfaces/blynk/","text":"Warning This only works with the legacy Blynk app, for which new signups have been closed by the Blynk developer. WLED will either move to Blynk 2.0 or a different solution soon. You can use the free (if you only use it for 1 WLED light) IoT cloud Blynk to control your WLED Lights with the beautiful Blynk app for Android and iOS! With Blynk, you can also even control your lights when you are not connected to your home network! Installation Download the Blynk (legacy) app from the Play Store or the App Store Scan this QR code with the app: Paste the device auth token Blynk sends to your e-mail into the WLED sync settings (only one ESP!) You can use the sync button in Blynk to sync other WLED ESPs, just like with the web UIs! If you have doubts about the security of using a 3rd party IoT cloud, don't worry. WLED will only attempt to connect to Blynk if you put the device token string into Sync settings! Keep in mind that your ESP needs to connect to an external server, which may cause lag.","title":"Blynk"},{"location":"interfaces/blynk/#installation","text":"Download the Blynk (legacy) app from the Play Store or the App Store Scan this QR code with the app: Paste the device auth token Blynk sends to your e-mail into the WLED sync settings (only one ESP!) You can use the sync button in Blynk to sync other WLED ESPs, just like with the web UIs! If you have doubts about the security of using a 3rd party IoT cloud, don't worry. WLED will only attempt to connect to Blynk if you put the device token string into Sync settings! Keep in mind that your ESP needs to connect to an external server, which may cause lag.","title":"Installation"},{"location":"interfaces/dmx-output/","text":"DMX output Version Info As of version 0.9.2 WLED supports DMX output via MAX485. This is great for controlling DMX LED PAR lamps with WLED patterns. features and limitations up to 15 DMX channels per fixture channels can be set to dimmer (brightness), red, green, blue, white, 0, 255 supports channel spacing between fixtures outputs a DMX channel map one universe (512 channels) type of fixture software setup For the DMX feature to work, you'll need to compile WLED from source. It's not a big deal, you can do it! Here is the Quick Start guide. There you'll find the section \"i want to modify WLED\". make sure, you can compile the latest version of WLED without any issues. Then continue. Once that works, in wled00/wled.h you need to change the line //#define WLED_ENABLE_DMX to #define WLED_ENABLE_DMX Yes, you just remove the //, which enables the line and therefore DMX support. change either the DMX output pin (sendPin in src/dependencies/ESPDMX.cpp) or the LED output pin (LEDPIN in NpbWrapper.h) to something other than 2. If both are set to the same setting, you might experience slight flickering on your DMX output. Once you successfully uploaded the sketch to your board, you'll find a new entry \"DMX Output\" in your settings menu. Grab the manual for your lamp and maybe some snacks, look up the dmx channels and set everything up accordingly. hardware setup The DMX output uses a MAX485 transceiver connected to the TX-pin of the ESP8266. I am currently working on an open source PCB design to go along with this feature. Until then, i can recommend this tutorial by Robert Oostenveld . Only the hardware side, of course. If you need to use another pin for output than the TX-pin, you'll need to change this in the ESP-Dmx library itself. This setting is located in ESP-Dmx/src/ESPDMX.cpp on line 29. questions If you have further questions about this feature, you can reach me via github (@jwingefeld), ICQ (30914656) or via WLED Discord (JvPeek).","title":"DMX"},{"location":"interfaces/dmx-output/#dmx-output","text":"Version Info As of version 0.9.2 WLED supports DMX output via MAX485. This is great for controlling DMX LED PAR lamps with WLED patterns.","title":"DMX output"},{"location":"interfaces/dmx-output/#features-and-limitations","text":"up to 15 DMX channels per fixture channels can be set to dimmer (brightness), red, green, blue, white, 0, 255 supports channel spacing between fixtures outputs a DMX channel map one universe (512 channels) type of fixture","title":"features and limitations"},{"location":"interfaces/dmx-output/#software-setup","text":"For the DMX feature to work, you'll need to compile WLED from source. It's not a big deal, you can do it! Here is the Quick Start guide. There you'll find the section \"i want to modify WLED\". make sure, you can compile the latest version of WLED without any issues. Then continue. Once that works, in wled00/wled.h you need to change the line //#define WLED_ENABLE_DMX to #define WLED_ENABLE_DMX Yes, you just remove the //, which enables the line and therefore DMX support. change either the DMX output pin (sendPin in src/dependencies/ESPDMX.cpp) or the LED output pin (LEDPIN in NpbWrapper.h) to something other than 2. If both are set to the same setting, you might experience slight flickering on your DMX output. Once you successfully uploaded the sketch to your board, you'll find a new entry \"DMX Output\" in your settings menu. Grab the manual for your lamp and maybe some snacks, look up the dmx channels and set everything up accordingly.","title":"software setup"},{"location":"interfaces/dmx-output/#hardware-setup","text":"The DMX output uses a MAX485 transceiver connected to the TX-pin of the ESP8266. I am currently working on an open source PCB design to go along with this feature. Until then, i can recommend this tutorial by Robert Oostenveld . Only the hardware side, of course. If you need to use another pin for output than the TX-pin, you'll need to change this in the ESP-Dmx library itself. This setting is located in ESP-Dmx/src/ESPDMX.cpp on line 29.","title":"hardware setup"},{"location":"interfaces/dmx-output/#questions","text":"If you have further questions about this feature, you can reach me via github (@jwingefeld), ICQ (30914656) or via WLED Discord (JvPeek).","title":"questions"},{"location":"interfaces/e1.31-dmx/","text":"E1.31 WLED supports the E1.31 (sACN) realtime light protocol. Version Info As of WLED v0.10.0, Art-Net is alternatively supported. All information on this page applies for Art-Net as well. You will need to switch to Art-Net mode in Sync settings and reboot once. Version Info As of WLED v0.11.0, DDP is alternatively supported. Using DDP, the Multi RGB DMX mode is always used regardless of the DMX mode setting (as it is no DMX) You will need to switch to DDP mode in Sync settings and reboot once. Features 170 LEDs (510 DMX channels) are supported per universe. You can use up to 9 adjacent universes which is a total of more than the maximum 1500 LEDs WLED can drive. General Recommendations For a fluent 25ms (40fps) or more framerate, it is recommended to use no more than 3 universes (510 LEDs). It is not recommended to try and have multiple E1.31 sources send to a single WLED controller at the same time. It will impact performance and there is no priority handling implemented. WLED is only meant to handle a single source at a time. Configure WLED to connect to a WiFi Network . It was observed that sending E1.31 from a computer to WLED when accessed as access point (WLED-AP) may not work, see forum post . When using an ESP32, disabling WiFi sleep in the WiFi settings of WLED can reduce/eliminate visual stuttering/lag of effects, and significantly reduce ping times. Note: disabling WiFi will increase power consumption. Using LedFX We highly recommend the LedFx project in combination with WLED! Configure WLED first, ensure devices are powered on and connected to your WiFi. To add WLED devices, in the 'Device Management', click on the Find WLED devices button. If you want to manually add devices, use more than 170 LEDs with LedFx, you need to go to additional settings and set \"Universe Size\" to 510 when adding the WLED device! Settings DMX types Select the mode you want to use in Sync settings. 0: Disabled Incoming E1.31 packets will be ignored. 1: Single RGB All LEDs are set to the same color. 3 Channels: Red, Green, Blue 2: Single DRGB All LEDs are set to the same color. 4 Channels: Master Dimmer, Red, Green, Blue 3: Effect Not a realtime mode. Allows setting WLED effect properties over E1.31 with 11 or 13 channels. Channel Property 1 Master Dimmer 2 Effect mode ID 3 Effect speed 4 Effect intensity 5 Effect palette ID 6 Red Primary 7 Green Primary 8 Blue Primary 9 Red Secondary 10 Green Secondary 11 Blue Secondary 12 White Primary (channel optional) 13 White Secondary (channel optional) 4: Multiple RGB 3 Channels per LED in sequence. LED 0 Red, LED 0 Green, LED 0 Blue, LED 1 Red, ... Default mode, equivalent to pre-0.9.1 E1.31. This is the mode you want to use for xLights and LedFx. 5: Multiple DRGB Like Multiple RGB, but the first channel is a brightness control. Master Dimmer, LED 0 Red, LED 0 Green, ...","title":"E1.31 (DMX) / Art-Net"},{"location":"interfaces/e1.31-dmx/#e131","text":"WLED supports the E1.31 (sACN) realtime light protocol. Version Info As of WLED v0.10.0, Art-Net is alternatively supported. All information on this page applies for Art-Net as well. You will need to switch to Art-Net mode in Sync settings and reboot once. Version Info As of WLED v0.11.0, DDP is alternatively supported. Using DDP, the Multi RGB DMX mode is always used regardless of the DMX mode setting (as it is no DMX) You will need to switch to DDP mode in Sync settings and reboot once.","title":"E1.31"},{"location":"interfaces/e1.31-dmx/#features","text":"170 LEDs (510 DMX channels) are supported per universe. You can use up to 9 adjacent universes which is a total of more than the maximum 1500 LEDs WLED can drive.","title":"Features"},{"location":"interfaces/e1.31-dmx/#general-recommendations","text":"For a fluent 25ms (40fps) or more framerate, it is recommended to use no more than 3 universes (510 LEDs). It is not recommended to try and have multiple E1.31 sources send to a single WLED controller at the same time. It will impact performance and there is no priority handling implemented. WLED is only meant to handle a single source at a time. Configure WLED to connect to a WiFi Network . It was observed that sending E1.31 from a computer to WLED when accessed as access point (WLED-AP) may not work, see forum post . When using an ESP32, disabling WiFi sleep in the WiFi settings of WLED can reduce/eliminate visual stuttering/lag of effects, and significantly reduce ping times. Note: disabling WiFi will increase power consumption.","title":"General Recommendations"},{"location":"interfaces/e1.31-dmx/#using-ledfx","text":"We highly recommend the LedFx project in combination with WLED! Configure WLED first, ensure devices are powered on and connected to your WiFi. To add WLED devices, in the 'Device Management', click on the Find WLED devices button. If you want to manually add devices, use more than 170 LEDs with LedFx, you need to go to additional settings and set \"Universe Size\" to 510 when adding the WLED device!","title":"Using LedFX"},{"location":"interfaces/e1.31-dmx/#settings","text":"","title":"Settings"},{"location":"interfaces/e1.31-dmx/#dmx-types","text":"Select the mode you want to use in Sync settings.","title":"DMX types"},{"location":"interfaces/e1.31-dmx/#0-disabled","text":"Incoming E1.31 packets will be ignored.","title":"0: Disabled"},{"location":"interfaces/e1.31-dmx/#1-single-rgb","text":"All LEDs are set to the same color. 3 Channels: Red, Green, Blue","title":"1: Single RGB"},{"location":"interfaces/e1.31-dmx/#2-single-drgb","text":"All LEDs are set to the same color. 4 Channels: Master Dimmer, Red, Green, Blue","title":"2: Single DRGB"},{"location":"interfaces/e1.31-dmx/#3-effect","text":"Not a realtime mode. Allows setting WLED effect properties over E1.31 with 11 or 13 channels. Channel Property 1 Master Dimmer 2 Effect mode ID 3 Effect speed 4 Effect intensity 5 Effect palette ID 6 Red Primary 7 Green Primary 8 Blue Primary 9 Red Secondary 10 Green Secondary 11 Blue Secondary 12 White Primary (channel optional) 13 White Secondary (channel optional)","title":"3: Effect"},{"location":"interfaces/e1.31-dmx/#4-multiple-rgb","text":"3 Channels per LED in sequence. LED 0 Red, LED 0 Green, LED 0 Blue, LED 1 Red, ... Default mode, equivalent to pre-0.9.1 E1.31. This is the mode you want to use for xLights and LedFx.","title":"4: Multiple RGB"},{"location":"interfaces/e1.31-dmx/#5-multiple-drgb","text":"Like Multiple RGB, but the first channel is a brightness control. Master Dimmer, LED 0 Red, LED 0 Green, ...","title":"5: Multiple DRGB"},{"location":"interfaces/http-api/","text":"Hint While this API is not deprecated, it is highly recommended to use the JSON API instead of the HTTP API for new integrations, as it is structured in a better way and allows efficient use of newer features like segments, presets, and playlists. WLED's HTTP API allows you to set many properties of your lights, even more than the index page UI supports, via a simple GET web request. Help Unsure how all this API stuff works? Check out this amazing guide by tynick! The basic URL scheme is: [ipadress]/win . This will return an XML file with some current values (see bottom of page). Parameters can be added to control some of the variables. Example (AP): 192.168.4.1/win&A=255 sets the brightness to maximum Example (mdns): led.local/win&A=128&FX=0 sets the brightness to half and the effect to Solid In conjunction with a router port forwarding this can be used to automate WLED, for example via IFTTT. Add one or multiple of the following parameters after the base URL/IP to change values: (if the parameter is unknown or the value illegal nothing will happen) LED control Parameter Value Range Description Since Version &A= 0 to 255 Master brightness 0.2 &T= 0, 1, or 2 Master Off/On/Toggle 0.3 &R= 0 to 255 Primary Red value 0.2 &G= 0 to 255 Primary Green value 0.2 &B= 0 to 255 Primary Blue value 0.2 &W= 0 to 255 Primary White value 0.4 &FX= 0 to 101 LED Effect Index 0.3 &SX= 0 to 255 Effect Speed 0.3 &IX= 0 to 255 Effect Intensity 0.5.0 &FP= 0 to 46 FastLED Palette 0.8.0 &NL= 0 to 255 Nightlight active and duration in minutes 0.3 &ND none Toggles nightlight on but uses default duration 0.6.3 &NT= 0 to 255 Nightlight target brightness 0.5.0 &NF= 0 to 2 Fade Nightlight, 1 = fade brightness only, 2 = additionaly fade color from primary to secondary color 0.5.0 Advanced Parameter Value Range Description Since Version &CL= HEX/DEC Primary color 0.8.0 &C2= HEX/DEC Secondary color 0.8.0 &C3= HEX/DEC Third color 0.8.0 &R2= 0 to 255 Secondary Red value 0.4 &G2= 0 to 255 Secondary Green value 0.4 &B2= 0 to 255 Secondary Blue value 0.4 &W2= 0 to 255 Secondary White value 0.4 &HU= 0 to 65535 Hue 0.5.1 &SA= 0 to 255 Saturation (only in conjunction with Hue) 0.5.1 &H2 none Hue + Saturation will set secondary color 0.5.1 &SR= 0 or 1 Set Primary/Secondary color to random hue 0.4 &SC none Swap primary and secondary color 0.4 Use of hex values Hex values need to be prefaced with the character h or H. The normal format is RRGGBB . If the led strip is RGBW, the hex format is WWRRGGBB . Note: In the UI the format is RRGGBBWW , so the values cannot be copied without a transformation. Loxone commands Loxone offers two commands. One for RGB values and one for brightness and color temperature. Parameter Syntax Range Description Since Version &LX= BBBGGGRRR 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LX= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 &LY= BBBGGGRRR 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LY= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 Notifications Parameter Value Range Description Since Version &RN= 0 or 1 Receive UDP Notifications 0.3 &SN= 0 or 1 Send UDP Notifications 0.3 &NN none No notification for this request 0.3 &HP= 0 to 99 Sets Hue polling light ID (0 is off) 0.5.1 Presets Parameter Value Range Description Since Version &PS= 1 to 16 Saves current setup to preset 0.4 &PL= 1 to 250 Applies entire preset 0.4 &P1= 1 to 249 First cycle preset 0.6.3 &P2= 2 to 250 Last cycle preset 0.6.3 &TT= 0 to 65000 Set transition time (ms) 0.6.3 Macros Parameter Value Range Description Since Version &M= 1 to 16 Apply macro (deprecated, added for compatibility with pre-0.11 automations) 0.5.0 Segments It is highly recommended to use the JSON API when dealing with Segments. Parameter Value Range Description Since Version &SM= 0 to 9 Set the main segment (values are reported to XML) 0.9.0 &SS= 0 to 9 Select segment to apply THIS api call to 0.9.0 &SV= 0, 1, or 2 Set segment selected (2 unselects others) 0.9.0 &S= 0 to ledcount-1 Set segment start 0.9.0 &S2= 0 to ledcount Set segment stop 0.9.0 &GP= 1 to 255 Set segment grouping 0.9.1 &SP= 0 to 255 Set segment spacing 0.9.1 &RV= 0 or 1 Reverse/Flip Segment direction 0.9.1 &SB= 0 to 255 Segment brightness 0.10.0 General and Experimental Parameter Value Range Description Since Version &RB none Reboot WLED 0.10.0 (?) &ST= 32bit Current UTC time in Unix epoch 0.4 &CT= 32bit UTC time for countdown end 0.4 &MD= 0 or 1 Set slider mode to RGB/HSB 0.3 &AX= 0 to 255 Debug feature, can be configured for general IO 0.3 &IN none Server will not respond to this request (internal) 0.3 &OL= 0 to 255 Experimental overlays 0.3 &L= 0 to 255 Lock pixel 0.4 &L2= 0 to 255 Lock pixel range L to L2 0.4 &UL none Unlock instead (used in conjunction with L and L2) 0.4 &NX= String 1..6 Cronixie clockface 0.4 &NM= 0 or 1 Cronixie Time or Countdown mode 0.4 &NB= 0 or 1 Cronixie Backlight 0.4 &IT none Include UI color theme in API response 0.8.2 &RD= 0 or 1 Toggle realtime UDP 0.8.4 &LO= 0-2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot 0.10.2 XML response This is the XML file sent as response to every API call. Parameter Value Range Description ac 0 to 255 Master Brightness cl 3x 0..255 Primary Color RGB cs 3x 0..255 Secondary RGB ns 0 or 1 Notification Sending on nr 0 or 1 Notification Receive on nl 0 or 1 Nightlight active nf 0 or 2 Nightlight Fade type nd 0 to 255 Nightlight delay nt 0 to 255 Nightlight target brightness fx 0 to 73 Effect index sx 0 to 255 Effect speed ix 0 to 255 Effect intensity fp 0 to 43 FastLED palette wv -1 to 255 Primary White value ws 0 to 255 Secondary White ps 0 to 255 Current Preset cy 0 or 1 Preset Cycling enabled md 0 or 1 RGB or HSB UI mode ds String 0..32 Server description ss 0 to 12 Segment ID In-/decrementing values You can use the ~ character to easily set values relative to their current value. This is currently supported for the following parameters: A, R, G, B, W, R2, G2, B2, W2, FX, SX, IX, FP, PL For example, use PL=~ to go to the next preset. Using just ~ without a number will increase the value by 1, ~- will decrease it by 1. The value will then wrap around, so using A=~- when A is 0 will set A to 255. You can also specify by how much to change the value. For example, using A=~10 will increase the brightness by 10. In case of using a number behind ~ , the value will clip (so it will not wrap around, if the maximum brightness is set, A=~10 will not have any effect) To setup a Macro for a Button to advance to the next Preset, use win&P1=1&P2=30&PL=~ P1 will equal the first Preset of the rotation while P2 will be the last Preset.","title":"HTTP Request API"},{"location":"interfaces/http-api/#led-control","text":"Parameter Value Range Description Since Version &A= 0 to 255 Master brightness 0.2 &T= 0, 1, or 2 Master Off/On/Toggle 0.3 &R= 0 to 255 Primary Red value 0.2 &G= 0 to 255 Primary Green value 0.2 &B= 0 to 255 Primary Blue value 0.2 &W= 0 to 255 Primary White value 0.4 &FX= 0 to 101 LED Effect Index 0.3 &SX= 0 to 255 Effect Speed 0.3 &IX= 0 to 255 Effect Intensity 0.5.0 &FP= 0 to 46 FastLED Palette 0.8.0 &NL= 0 to 255 Nightlight active and duration in minutes 0.3 &ND none Toggles nightlight on but uses default duration 0.6.3 &NT= 0 to 255 Nightlight target brightness 0.5.0 &NF= 0 to 2 Fade Nightlight, 1 = fade brightness only, 2 = additionaly fade color from primary to secondary color 0.5.0","title":"LED control"},{"location":"interfaces/http-api/#advanced","text":"Parameter Value Range Description Since Version &CL= HEX/DEC Primary color 0.8.0 &C2= HEX/DEC Secondary color 0.8.0 &C3= HEX/DEC Third color 0.8.0 &R2= 0 to 255 Secondary Red value 0.4 &G2= 0 to 255 Secondary Green value 0.4 &B2= 0 to 255 Secondary Blue value 0.4 &W2= 0 to 255 Secondary White value 0.4 &HU= 0 to 65535 Hue 0.5.1 &SA= 0 to 255 Saturation (only in conjunction with Hue) 0.5.1 &H2 none Hue + Saturation will set secondary color 0.5.1 &SR= 0 or 1 Set Primary/Secondary color to random hue 0.4 &SC none Swap primary and secondary color 0.4","title":"Advanced"},{"location":"interfaces/http-api/#use-of-hex-values","text":"Hex values need to be prefaced with the character h or H. The normal format is RRGGBB . If the led strip is RGBW, the hex format is WWRRGGBB . Note: In the UI the format is RRGGBBWW , so the values cannot be copied without a transformation.","title":"Use of hex values"},{"location":"interfaces/http-api/#loxone-commands","text":"Loxone offers two commands. One for RGB values and one for brightness and color temperature. Parameter Syntax Range Description Since Version &LX= BBBGGGRRR 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LX= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 &LY= BBBGGGRRR 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LY= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11","title":"Loxone commands"},{"location":"interfaces/http-api/#notifications","text":"Parameter Value Range Description Since Version &RN= 0 or 1 Receive UDP Notifications 0.3 &SN= 0 or 1 Send UDP Notifications 0.3 &NN none No notification for this request 0.3 &HP= 0 to 99 Sets Hue polling light ID (0 is off) 0.5.1","title":"Notifications"},{"location":"interfaces/http-api/#presets","text":"Parameter Value Range Description Since Version &PS= 1 to 16 Saves current setup to preset 0.4 &PL= 1 to 250 Applies entire preset 0.4 &P1= 1 to 249 First cycle preset 0.6.3 &P2= 2 to 250 Last cycle preset 0.6.3 &TT= 0 to 65000 Set transition time (ms) 0.6.3","title":"Presets"},{"location":"interfaces/http-api/#macros","text":"Parameter Value Range Description Since Version &M= 1 to 16 Apply macro (deprecated, added for compatibility with pre-0.11 automations) 0.5.0","title":"Macros"},{"location":"interfaces/http-api/#segments","text":"It is highly recommended to use the JSON API when dealing with Segments. Parameter Value Range Description Since Version &SM= 0 to 9 Set the main segment (values are reported to XML) 0.9.0 &SS= 0 to 9 Select segment to apply THIS api call to 0.9.0 &SV= 0, 1, or 2 Set segment selected (2 unselects others) 0.9.0 &S= 0 to ledcount-1 Set segment start 0.9.0 &S2= 0 to ledcount Set segment stop 0.9.0 &GP= 1 to 255 Set segment grouping 0.9.1 &SP= 0 to 255 Set segment spacing 0.9.1 &RV= 0 or 1 Reverse/Flip Segment direction 0.9.1 &SB= 0 to 255 Segment brightness 0.10.0","title":"Segments"},{"location":"interfaces/http-api/#general-and-experimental","text":"Parameter Value Range Description Since Version &RB none Reboot WLED 0.10.0 (?) &ST= 32bit Current UTC time in Unix epoch 0.4 &CT= 32bit UTC time for countdown end 0.4 &MD= 0 or 1 Set slider mode to RGB/HSB 0.3 &AX= 0 to 255 Debug feature, can be configured for general IO 0.3 &IN none Server will not respond to this request (internal) 0.3 &OL= 0 to 255 Experimental overlays 0.3 &L= 0 to 255 Lock pixel 0.4 &L2= 0 to 255 Lock pixel range L to L2 0.4 &UL none Unlock instead (used in conjunction with L and L2) 0.4 &NX= String 1..6 Cronixie clockface 0.4 &NM= 0 or 1 Cronixie Time or Countdown mode 0.4 &NB= 0 or 1 Cronixie Backlight 0.4 &IT none Include UI color theme in API response 0.8.2 &RD= 0 or 1 Toggle realtime UDP 0.8.4 &LO= 0-2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot 0.10.2","title":"General and Experimental"},{"location":"interfaces/http-api/#xml-response","text":"This is the XML file sent as response to every API call. Parameter Value Range Description ac 0 to 255 Master Brightness cl 3x 0..255 Primary Color RGB cs 3x 0..255 Secondary RGB ns 0 or 1 Notification Sending on nr 0 or 1 Notification Receive on nl 0 or 1 Nightlight active nf 0 or 2 Nightlight Fade type nd 0 to 255 Nightlight delay nt 0 to 255 Nightlight target brightness fx 0 to 73 Effect index sx 0 to 255 Effect speed ix 0 to 255 Effect intensity fp 0 to 43 FastLED palette wv -1 to 255 Primary White value ws 0 to 255 Secondary White ps 0 to 255 Current Preset cy 0 or 1 Preset Cycling enabled md 0 or 1 RGB or HSB UI mode ds String 0..32 Server description ss 0 to 12 Segment ID","title":"XML response"},{"location":"interfaces/http-api/#in-decrementing-values","text":"You can use the ~ character to easily set values relative to their current value. This is currently supported for the following parameters: A, R, G, B, W, R2, G2, B2, W2, FX, SX, IX, FP, PL For example, use PL=~ to go to the next preset. Using just ~ without a number will increase the value by 1, ~- will decrease it by 1. The value will then wrap around, so using A=~- when A is 0 will set A to 255. You can also specify by how much to change the value. For example, using A=~10 will increase the brightness by 10. In case of using a number behind ~ , the value will clip (so it will not wrap around, if the maximum brightness is set, A=~10 will not have any effect) To setup a Macro for a Button to advance to the next Preset, use win&P1=1&P2=30&PL=~ P1 will equal the first Preset of the rotation while P2 will be the last Preset.","title":"In-/decrementing values"},{"location":"interfaces/infrared/","text":"Version Info Since v0.8.2, infrared control from various IR remotes is supported for ESP8266 and since v0.9.0 for ESP32, too. A dedicated infrared receiver module is required. (KY-022 or TSOP38238 are confirmed to work and inexpensive) The default sensor pin is GPIO4. It can be changed in LED settings. Warning IR receiving will not work on ESP8266 if you use any LED pin other than GPIO 1, 2, or 3 for digital LED strips. Supported IR remotes To use IR remote go to Settings , Sync Interfaces and change the value for Infrared receiver type according to the IR remote type of the following list: white 24-key IR remote with R,G,B + 12 color-tones white 24-key IR remote with CT+ / CT- buttons blue 40-key IR remote with keys for 25%, 50%, 75% and 100% white 44-key IR remote with up/down arrows for the colors R,G and B white 21-key IR remote with R,G,B + 9 color-tones black 6-key IR remote with CH up/down + Vol up/down JSON IR remote - Easily configure and use any IR remote.","title":"Infrared"},{"location":"interfaces/infrared/#supported-ir-remotes","text":"To use IR remote go to Settings , Sync Interfaces and change the value for Infrared receiver type according to the IR remote type of the following list: white 24-key IR remote with R,G,B + 12 color-tones white 24-key IR remote with CT+ / CT- buttons blue 40-key IR remote with keys for 25%, 50%, 75% and 100% white 44-key IR remote with up/down arrows for the colors R,G and B white 21-key IR remote with R,G,B + 9 color-tones black 6-key IR remote with CH up/down + Vol up/down JSON IR remote - Easily configure and use any IR remote.","title":"Supported IR remotes"},{"location":"interfaces/json-api/","text":"Version Info Starting from version 0.8.4, WLED implements a powerful JSON API over HTTP. It is accessible using the /json subpage. Obtaining light information Sending a GET request will return an object similar to the sample below The response consists of four objects: state contains the current state of the light. All values may be modified by the client (see below) info contains general information about the device. No value can be modified using this API effects contains an array of the effect mode names palettes contains an array of the palette names You may also obtain those objects individually using the URLs /json/state /json/info /json/eff , and /json/pal Setting new values Sending a POST request to /json or /json/state with (parts of) the state object will update the respective values. Example: {\"on\":true,\"bri\":255} sets the brightness to maximum. {\"seg\":[{\"col\":[[0,255,200]]}]} sets the color of the first segment to teal. CURL example This will toggle on and off and return the new state (v0.13+): curl -X POST \"http://[WLED-IP]/json/state\" -d '{\"on\":\"t\",\"v\":true}' -H \"Content-Type: application/json\" Sample JSON API response (v0.8.4): { \"state\" : { \"on\" : true , \"bri\" : 127 , \"transition\" : 7 , \"ps\" : -1 , \"pl\" : -1 , \"nl\" : { \"on\" : false , \"dur\" : 60 , \"fade\" : true , \"tbri\" : 0 }, \"udpn\" : { \"send\" : false , \"recv\" : true }, \"seg\" : [{ \"start\" : 0 , \"stop\" : 20 , \"len\" : 20 , \"col\" : [ [ 255 , 160 , 0 , 0 ], [ 0 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 0 ] ], \"fx\" : 0 , \"sx\" : 127 , \"ix\" : 127 , \"pal\" : 0 , \"sel\" : true , \"rev\" : false , \"cln\" : -1 }] }, \"info\" : { \"ver\" : \"0.8.4\" , \"vid\" : 1903252 , \"leds\" : { \"count\" : 20 , \"rgbw\" : true , \"pin\" : [ 2 ], \"pwr\" : 0 , \"maxpwr\" : 65000 , \"maxseg\" : 1 }, \"name\" : \"WLED Light\" , \"udpport\" : 21324 , \"live\" : false , \"fxcount\" : 80 , \"palcount\" : 47 , \"arch\" : \"esp8266\" , \"core\" : \"2_4_2\" , \"freeheap\" : 13264 , \"uptime\" : 17985 , \"opt\" : 127 , \"brand\" : \"WLED\" , \"product\" : \"DIY light\" , \"btype\" : \"src\" , \"mac\" : \"60019423b441\" }, \"effects\" : [ \"Solid\" , \"Blink\" , \"Breathe\" , \"Wipe\" , \"Wipe Random\" , \"Random Colors\" , \"Sweep\" , \"Dynamic\" , \"Colorloop\" , \"Rainbow\" , \"Scan\" , \"Dual Scan\" , \"Fade\" , \"Chase\" , \"Chase Rainbow\" , \"Running\" , \"Saw\" , \"Twinkle\" , \"Dissolve\" , \"Dissolve Rnd\" , \"Sparkle\" , \"Dark Sparkle\" , \"Sparkle+\" , \"Strobe\" , \"Strobe Rainbow\" , \"Mega Strobe\" , \"Blink Rainbow\" , \"Android\" , \"Chase\" , \"Chase Random\" , \"Chase Rainbow\" , \"Chase Flash\" , \"Chase Flash Rnd\" , \"Rainbow Runner\" , \"Colorful\" , \"Traffic Light\" , \"Sweep Random\" , \"Running 2\" , \"Red & Blue\" , \"Stream\" , \"Scanner\" , \"Lighthouse\" , \"Fireworks\" , \"Rain\" , \"Merry Christmas\" , \"Fire Flicker\" , \"Gradient\" , \"Loading\" , \"In Out\" , \"In In\" , \"Out Out\" , \"Out In\" , \"Circus\" , \"Halloween\" , \"Tri Chase\" , \"Tri Wipe\" , \"Tri Fade\" , \"Lightning\" , \"ICU\" , \"Multi Comet\" , \"Dual Scanner\" , \"Stream 2\" , \"Oscillate\" , \"Pride 2015\" , \"Juggle\" , \"Palette\" , \"Fire 2012\" , \"Colorwaves\" , \"BPM\" , \"Fill Noise\" , \"Noise 1\" , \"Noise 2\" , \"Noise 3\" , \"Noise 4\" , \"Colortwinkle\" , \"Lake\" , \"Meteor\" , \"Smooth Meteor\" , \"Railway\" , \"Ripple\" ], \"palettes\" : [ \"Default\" , \"Random Cycle\" , \"Primary Color\" , \"Based on Primary\" , \"Set Colors\" , \"Based on Set\" , \"Party\" , \"Cloud\" , \"Lava\" , \"Ocean\" , \"Forest\" , \"Rainbow\" , \"Rainbow Bands\" , \"Sunset\" , \"Rivendell\" , \"Breeze\" , \"Red & Blue\" , \"Yellowout\" , \"Analogous\" , \"Splash\" , \"Pastel\" , \"Sunset 2\" , \"Beech\" , \"Vintage\" , \"Departure\" , \"Landscape\" , \"Beach\" , \"Sherbet\" , \"Hult\" , \"Hult 64\" , \"Drywet\" , \"Jul\" , \"Grintage\" , \"Rewhi\" , \"Tertiary\" , \"Fire\" , \"Icefire\" , \"Cyane\" , \"Light Pink\" , \"Autumn\" , \"Magenta\" , \"Magred\" , \"Yelmag\" , \"Yelblu\" , \"Orange & Teal\" , \"Tiamat\" , \"April Night\" ] } Overview of values State object JSON key Value range Description on bool On/Off state of the light bri 0 to 255 Brightness of the light. If on is false , contains last brightness when light was on (aka brightness when on is set to true. Setting bri to 0 is supported but it is recommended to use the range 1-255 and use on: false to turn off. The state response will never havethe value 0 for bri . transition 0 to 255 Duration of the crossfade between different colors/brightness levels. One unit is 100ms, so a value of 4 results in atransition of 400ms. tt 0 to 255 Similar to transition, but applies to just the current API call. Not included in state response. ps -1 to 65535 ID of currently set preset. pss 0 to 65535 Bitwise indication of preset slots (0 - vacant, 1 - written). Always 0 in 0.11. Not changable. Removed as of v0.11.1 psave 1 to 16 (250 in 0.11) Save current light config to specified preset slot. Not included in state response. pl -1 to 0 ID of currently set playlist. For now, this sets the preset cycle feature, -1 is off and 0 is on. nl.on bool Nightlight currently active nl.dur 1 to 255 Duration of nightlight in minutes nl.fade bool If true , the light will gradually dim over the course of the nightlight duration. If false , it will instantly turn to the target brightness once the duration has elapsed. Removed in 0.13.0 (use mode instead) nl.mode 0 to 3 Nightlight mode (0: instant, 1: fade, 2: color fade, 3: sunrise) (available since 0.10.2) nl.tbri 0 to 255 Target brightness of nightlight feature nl.rem -1 to 15300 Remaining nightlight duration in seconds, -1 if not active. Only in state response, can not be set. udpn.send bool Send WLED broadcast (UDP sync) packet on state change udpn.recv bool Receive broadcast packets udpn.nn bool Don't send a broadcast packet (applies to just the current API call). Not included in state response. v bool If set to true in a JSON POST command, the response will contain the full JSON state object. Not included in state response rb bool If set to true , device will reboot immediately. Not included in state response. lor 0, 1, or 2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot (available since 0.10.0) time uint32 Set module time to unix timestamp. Not included in state response. mainseg 0 to info.leds.maxseg-1 Main Segment seg Array of segment objects Segments are individual parts of the LED strip. In 0.9.0 this will enables running different effects on differentparts of the strip. playlist object Custom preset playlists . Not included in state response (available since 0.11.0) Contents of the segment object Notice: start , stop , and len are not changeable in 0.8.4. Any segment with id > 0 is ignored. Unless stated otherwise, every value may be changed via an HTTP POST request. The tertiary color is not gamma-corrected in 0.8.4, but is in subsequent releases. JSON key Value range Description id 0 to info.maxseg -1 Zero-indexed ID of the segment. May be omitted, in that case the ID will be inferred from the order of the segment objects in the seg array. As such, not included in state response. start 0 to info.leds.count -1 LED the segment starts at. stop 0 to info.leds.count LED the segment stops at, not included in range. If stop is set to a lower or equal value than start (setting to 0 is recommended), the segment is invalidated and deleted. len 0 to info.leds.count Length of the segment ( stop - start ). stop has preference, so if it is included, len is ignored. grp 0 to 255 Grouping (how many consecutive LEDs of the same segment will be grouped to the same color) spc 0 to 255 Spacing (how many LEDs are turned off and skipped between each group) of -len+1 to len Offset (how many LEDs to rotate the virtual start of the segments, available since 0.13.0) col array of colors Array that has up to 3 color arrays as elements, the primary, secondary (background) and tertiary colors of the segment. Each color is an array of 3 or 4 bytes, which represent an RGB(W) color. fx 0 to info.fxcount -1 ID of the effect or ~ to increment, ~- to decrement, or r for random. sx 0 to 255 Relative effect speed ix 0 to 255 Effect intensity pal 0 to info.palcount -1 ID of the color palette or ~ to increment, ~- to decrement, or r for random. sel bool true if the segment is selected. Selected segments will have their state (color/FX) updated by APIs that don't support segments (currently any API except this JSON API). If no segment is selected, the first segment ( id : 0 ) will behave as if selected. WLED will report the state of the first (lowest id ) segment that is selected to APIs (UDP sync, HTTP, MQTT, Blynk...). rev bool Flips the segment, causing animations to change direction. on bool Turns on and off the individual segment. (available since 0.10.0) bri 0 to 255 Sets the individual segment brightness (available since 0.10.0) mi bool Mirrors the segment (available since 0.10.2) cct 0 to 255 or 1900 to 10091 White spectrum color temperature (available since 0.13.0) lx BBBGGGRRR : 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. lx 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) ly BBBGGGRRR : 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. ly 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) i array Individual LED control . Not included in state response (available since 0.10.2) Info object No value may be changed by means of this API. JSON key Value range Description ver string Version name. vid uint32 Build ID (YYMMDDB, B = daily build index). leds object Contains info about the LED setup. leds.cct bool true if the light supports color temperature control (available since 0.13.0) leds.count 1 to 1200 Total LED count. leds.fps 0 to 255 Current frames per second. (available since 0.12.0) leds.rgbw bool true if LEDs are 4-channel (RGBW). leds.wv bool true if a white channel slider should be displayed. (available since 0.10.0) leds.pin byte array LED strip pin(s). Always one element. Removed as of v0.13 leds.pwr 0 to 65000 Current LED power usage in milliamps as determined by the ABL. 0 if ABL is disabled. leds.maxpwr 0 to 65000 Maximum power budget in milliamps for the ABL. 0 if ABL is disabled. leds.maxseg byte Maximum number of segments supported by this version. str bool If true , an UI with only a single button for toggling sync should toggle receive+send, otherwise send only name string Friendly name of the light. Intended for display in lists and titles. udpport uint16 The UDP port for realtime packets and WLED broadcast. live bool If true , the software is currently receiving realtime data via UDP or E1.31. lm string Info about the realtime data source lip string Realtime data source IP address ws -1 to 8 Number of currently connected WebSockets clients. -1 indicates that WS is unsupported in this build. fxcount byte Number of effects included. palcount uint16 Number of palettes configured. wifi object Info about current signal strength wifi.bssid string The BSSID of the currently connected network. wifi.signal 0 to 100 Relative signal quality of the current connection. wifi.channel 1 to 14 The current WiFi channel. fs object Info about the embedded LittleFS filesystem (since 0.11.0) fs.u uint32 Estimate of used filesystem space in kilobytes fs.t uint32 Total filesystem size in kilobytes fs.pmt uint32 Unix timestamp for the last modification to the presets.json file. Not accurate after boot or after using /edit ndc -1 to 255 Number of other WLED devices discovered on the network. -1 if Node discovery disabled. (since 0.12.0) arch string Name of the platform. core string Version of the underlying (Arduino core) SDK. lwip 0, 1, or 2 Version of LwIP. 1 or 2 on ESP8266, 0 (does not apply) on ESP32. Deprecated, removal in 0.14.0 freeheap uint32 Bytes of heap memory (RAM) currently available. Problematic if < 10k . uptime uint32 Time since the last boot/reset in seconds. opt uint16 Used for debugging purposes only. brand string The producer/vendor of the light. Always WLED for standard installations. product string The product name. Always FOSS for standard installations. btype string The origin of the build. src if a release version is compiled from source, bin for an official release image, dev for a development build (regardless of src/bin origin) and exp for experimental versions. ogn if the image is flashed to hardware by the vendor. Removed as of v0.10 mac string The hexadecimal hardware MAC address of the light, lowercase and without colons. ip string The IP address of this instance. Empty string if not connected. (since 0.13.0) Per-segment individual LED control Using the i property of the segment object, you can set the LED colors in the segment using the JSON API. Keep in mind that this is non-persistent, if the light is turned off the segment will return to effect mode. The segment is blanked out when using individual control, the set effect will not run. To disable, change any property of the segment or turn off the light. To set individual LEDs starting from the beginning, use an array of Color arrays. {\"seg\":{\"i\":[[255,0,0], [0,255,0], [0,0,255]]}} will set the first LED red, the second green and the third blue. To set individual LEDs, use the LED index followed by its Color array. {\"seg\":{\"i\":[0,[255,0,0], 2,[0,255,0], 4,[0,0,255]]}} is the same as above, but leaves blank spaces between the lit LEDs. To set ranges of LEDs, use the LED start and stop index followed by its Color array. {\"seg\":{\"i\":[0,8,[255,0,0], 10,18,[0,0,255]]}} sets the first eight LEDs to red, leaves out two, and sets another 8 to blue. Keep in mind that the LED indices are segment-based, so LED 0 is the first LED of the segment, not of the entire strip. Segment features, including Grouping, Spacing, Mirroring and Reverse are functional. This feature is available in build 200829 and above. Playlists (Available since 0.11.0) Sample playlist API call: { \"playlist\" : { \"ps\" : [ 26 , 20 , 18 , 20 ], \"dur\" : [ 30 , 20 , 10 , 50 ], \"transition\" : 0 , \"repeat\" : 10 , \"end\" : 21 } } This example applies preset ID 26 for 3 seconds, then preset 20 for 2 seconds, then preset 18 for 1 second, lastly preset 20 again for 5 seconds.This repeats 10 times, then preset 21 is applied. Playlist object: JSON key Description ps Array of preset ID integers to be applied in this order. dur Array of time each preset should be kept, in tenths of seconds. If only one integer is supplied, all presets will be kept for that time.Defaults to 10 seconds if not provided. transition Array of time each preset should transition to the next one, in tenths of seconds. If only one integer is supplied, all presets will transition for that time. Defaults to the current transition time if not provided. repeat How many times the entire playlist should cycle before finishing. Set to 0 for an indefinite cycle. Default to indefinite if not provided. end Single preset ID to apply after the playlist finished. Has no effect when an indefinite cycle is set. If not provided, the light will stay on the last preset of the playlist. CCT control Please also see the general info about CCT . Supported value ranges Given that the white spectrum handling is agnostic to the true color temperature of the LEDs used, a relative range is preferred for the time being, where a value of 0 indicates the warmest possible color temperature, while a value of 255 indicates the coldest temperature. It is also possible to pass a value in the range of 1900 to 10091 , in which case it is treated as a Kelvin color temperature, where 1900 is mapped to a relative value of 0 and 10091 to a relative value of 255 . As such, it is unlikely to match the actual color temperature output by the light, therefore the relative values 0-255 are preferred for the time being. In the future, an option to specify the Kelvin temperatures of the utilized hardware may be added, once this is done, a color temperature can be set to more accurately match other lights. Therefore, for forward compatibility, your integration should expect both either a 0-255 value for seg.cct , in which case it is a relative value, or an absolute Kelvin value in the range 1000-20000 K. In case a Kelvin value is provided, you can consider the color temperature as accurate, which is not possible with relative 0-255 values as the Kelvin points of the white channels are unknown. It is preferred that you set a new CCT value in the same range as received from WLED, that is, use 0-255 if the original value was within this range, and 1000-20000 K otherwise. Effect of the seg.cct value seg.cct can always be set, but only has an effect on the physical state of the light if one or both of the following conditions is met: White Balance correction is enabled A bus supporting CCT is configured and Calculate CCT from RGB is not enabled CCT support is indicated by info.leds.cct being true , in which case you can regard the instance as a CCT light and e.g. display a color temperature control.","title":"JSON API"},{"location":"interfaces/json-api/#obtaining-light-information","text":"Sending a GET request will return an object similar to the sample below The response consists of four objects: state contains the current state of the light. All values may be modified by the client (see below) info contains general information about the device. No value can be modified using this API effects contains an array of the effect mode names palettes contains an array of the palette names You may also obtain those objects individually using the URLs /json/state /json/info /json/eff , and /json/pal","title":"Obtaining light information"},{"location":"interfaces/json-api/#setting-new-values","text":"Sending a POST request to /json or /json/state with (parts of) the state object will update the respective values. Example: {\"on\":true,\"bri\":255} sets the brightness to maximum. {\"seg\":[{\"col\":[[0,255,200]]}]} sets the color of the first segment to teal. CURL example This will toggle on and off and return the new state (v0.13+): curl -X POST \"http://[WLED-IP]/json/state\" -d '{\"on\":\"t\",\"v\":true}' -H \"Content-Type: application/json\" Sample JSON API response (v0.8.4): { \"state\" : { \"on\" : true , \"bri\" : 127 , \"transition\" : 7 , \"ps\" : -1 , \"pl\" : -1 , \"nl\" : { \"on\" : false , \"dur\" : 60 , \"fade\" : true , \"tbri\" : 0 }, \"udpn\" : { \"send\" : false , \"recv\" : true }, \"seg\" : [{ \"start\" : 0 , \"stop\" : 20 , \"len\" : 20 , \"col\" : [ [ 255 , 160 , 0 , 0 ], [ 0 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 0 ] ], \"fx\" : 0 , \"sx\" : 127 , \"ix\" : 127 , \"pal\" : 0 , \"sel\" : true , \"rev\" : false , \"cln\" : -1 }] }, \"info\" : { \"ver\" : \"0.8.4\" , \"vid\" : 1903252 , \"leds\" : { \"count\" : 20 , \"rgbw\" : true , \"pin\" : [ 2 ], \"pwr\" : 0 , \"maxpwr\" : 65000 , \"maxseg\" : 1 }, \"name\" : \"WLED Light\" , \"udpport\" : 21324 , \"live\" : false , \"fxcount\" : 80 , \"palcount\" : 47 , \"arch\" : \"esp8266\" , \"core\" : \"2_4_2\" , \"freeheap\" : 13264 , \"uptime\" : 17985 , \"opt\" : 127 , \"brand\" : \"WLED\" , \"product\" : \"DIY light\" , \"btype\" : \"src\" , \"mac\" : \"60019423b441\" }, \"effects\" : [ \"Solid\" , \"Blink\" , \"Breathe\" , \"Wipe\" , \"Wipe Random\" , \"Random Colors\" , \"Sweep\" , \"Dynamic\" , \"Colorloop\" , \"Rainbow\" , \"Scan\" , \"Dual Scan\" , \"Fade\" , \"Chase\" , \"Chase Rainbow\" , \"Running\" , \"Saw\" , \"Twinkle\" , \"Dissolve\" , \"Dissolve Rnd\" , \"Sparkle\" , \"Dark Sparkle\" , \"Sparkle+\" , \"Strobe\" , \"Strobe Rainbow\" , \"Mega Strobe\" , \"Blink Rainbow\" , \"Android\" , \"Chase\" , \"Chase Random\" , \"Chase Rainbow\" , \"Chase Flash\" , \"Chase Flash Rnd\" , \"Rainbow Runner\" , \"Colorful\" , \"Traffic Light\" , \"Sweep Random\" , \"Running 2\" , \"Red & Blue\" , \"Stream\" , \"Scanner\" , \"Lighthouse\" , \"Fireworks\" , \"Rain\" , \"Merry Christmas\" , \"Fire Flicker\" , \"Gradient\" , \"Loading\" , \"In Out\" , \"In In\" , \"Out Out\" , \"Out In\" , \"Circus\" , \"Halloween\" , \"Tri Chase\" , \"Tri Wipe\" , \"Tri Fade\" , \"Lightning\" , \"ICU\" , \"Multi Comet\" , \"Dual Scanner\" , \"Stream 2\" , \"Oscillate\" , \"Pride 2015\" , \"Juggle\" , \"Palette\" , \"Fire 2012\" , \"Colorwaves\" , \"BPM\" , \"Fill Noise\" , \"Noise 1\" , \"Noise 2\" , \"Noise 3\" , \"Noise 4\" , \"Colortwinkle\" , \"Lake\" , \"Meteor\" , \"Smooth Meteor\" , \"Railway\" , \"Ripple\" ], \"palettes\" : [ \"Default\" , \"Random Cycle\" , \"Primary Color\" , \"Based on Primary\" , \"Set Colors\" , \"Based on Set\" , \"Party\" , \"Cloud\" , \"Lava\" , \"Ocean\" , \"Forest\" , \"Rainbow\" , \"Rainbow Bands\" , \"Sunset\" , \"Rivendell\" , \"Breeze\" , \"Red & Blue\" , \"Yellowout\" , \"Analogous\" , \"Splash\" , \"Pastel\" , \"Sunset 2\" , \"Beech\" , \"Vintage\" , \"Departure\" , \"Landscape\" , \"Beach\" , \"Sherbet\" , \"Hult\" , \"Hult 64\" , \"Drywet\" , \"Jul\" , \"Grintage\" , \"Rewhi\" , \"Tertiary\" , \"Fire\" , \"Icefire\" , \"Cyane\" , \"Light Pink\" , \"Autumn\" , \"Magenta\" , \"Magred\" , \"Yelmag\" , \"Yelblu\" , \"Orange & Teal\" , \"Tiamat\" , \"April Night\" ] }","title":"Setting new values"},{"location":"interfaces/json-api/#overview-of-values","text":"","title":"Overview of values"},{"location":"interfaces/json-api/#state-object","text":"JSON key Value range Description on bool On/Off state of the light bri 0 to 255 Brightness of the light. If on is false , contains last brightness when light was on (aka brightness when on is set to true. Setting bri to 0 is supported but it is recommended to use the range 1-255 and use on: false to turn off. The state response will never havethe value 0 for bri . transition 0 to 255 Duration of the crossfade between different colors/brightness levels. One unit is 100ms, so a value of 4 results in atransition of 400ms. tt 0 to 255 Similar to transition, but applies to just the current API call. Not included in state response. ps -1 to 65535 ID of currently set preset. pss 0 to 65535 Bitwise indication of preset slots (0 - vacant, 1 - written). Always 0 in 0.11. Not changable. Removed as of v0.11.1 psave 1 to 16 (250 in 0.11) Save current light config to specified preset slot. Not included in state response. pl -1 to 0 ID of currently set playlist. For now, this sets the preset cycle feature, -1 is off and 0 is on. nl.on bool Nightlight currently active nl.dur 1 to 255 Duration of nightlight in minutes nl.fade bool If true , the light will gradually dim over the course of the nightlight duration. If false , it will instantly turn to the target brightness once the duration has elapsed. Removed in 0.13.0 (use mode instead) nl.mode 0 to 3 Nightlight mode (0: instant, 1: fade, 2: color fade, 3: sunrise) (available since 0.10.2) nl.tbri 0 to 255 Target brightness of nightlight feature nl.rem -1 to 15300 Remaining nightlight duration in seconds, -1 if not active. Only in state response, can not be set. udpn.send bool Send WLED broadcast (UDP sync) packet on state change udpn.recv bool Receive broadcast packets udpn.nn bool Don't send a broadcast packet (applies to just the current API call). Not included in state response. v bool If set to true in a JSON POST command, the response will contain the full JSON state object. Not included in state response rb bool If set to true , device will reboot immediately. Not included in state response. lor 0, 1, or 2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot (available since 0.10.0) time uint32 Set module time to unix timestamp. Not included in state response. mainseg 0 to info.leds.maxseg-1 Main Segment seg Array of segment objects Segments are individual parts of the LED strip. In 0.9.0 this will enables running different effects on differentparts of the strip. playlist object Custom preset playlists . Not included in state response (available since 0.11.0)","title":"State object"},{"location":"interfaces/json-api/#contents-of-the-segment-object","text":"Notice: start , stop , and len are not changeable in 0.8.4. Any segment with id > 0 is ignored. Unless stated otherwise, every value may be changed via an HTTP POST request. The tertiary color is not gamma-corrected in 0.8.4, but is in subsequent releases. JSON key Value range Description id 0 to info.maxseg -1 Zero-indexed ID of the segment. May be omitted, in that case the ID will be inferred from the order of the segment objects in the seg array. As such, not included in state response. start 0 to info.leds.count -1 LED the segment starts at. stop 0 to info.leds.count LED the segment stops at, not included in range. If stop is set to a lower or equal value than start (setting to 0 is recommended), the segment is invalidated and deleted. len 0 to info.leds.count Length of the segment ( stop - start ). stop has preference, so if it is included, len is ignored. grp 0 to 255 Grouping (how many consecutive LEDs of the same segment will be grouped to the same color) spc 0 to 255 Spacing (how many LEDs are turned off and skipped between each group) of -len+1 to len Offset (how many LEDs to rotate the virtual start of the segments, available since 0.13.0) col array of colors Array that has up to 3 color arrays as elements, the primary, secondary (background) and tertiary colors of the segment. Each color is an array of 3 or 4 bytes, which represent an RGB(W) color. fx 0 to info.fxcount -1 ID of the effect or ~ to increment, ~- to decrement, or r for random. sx 0 to 255 Relative effect speed ix 0 to 255 Effect intensity pal 0 to info.palcount -1 ID of the color palette or ~ to increment, ~- to decrement, or r for random. sel bool true if the segment is selected. Selected segments will have their state (color/FX) updated by APIs that don't support segments (currently any API except this JSON API). If no segment is selected, the first segment ( id : 0 ) will behave as if selected. WLED will report the state of the first (lowest id ) segment that is selected to APIs (UDP sync, HTTP, MQTT, Blynk...). rev bool Flips the segment, causing animations to change direction. on bool Turns on and off the individual segment. (available since 0.10.0) bri 0 to 255 Sets the individual segment brightness (available since 0.10.0) mi bool Mirrors the segment (available since 0.10.2) cct 0 to 255 or 1900 to 10091 White spectrum color temperature (available since 0.13.0) lx BBBGGGRRR : 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. lx 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) ly BBBGGGRRR : 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. ly 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) i array Individual LED control . Not included in state response (available since 0.10.2)","title":"Contents of the segment object"},{"location":"interfaces/json-api/#info-object","text":"No value may be changed by means of this API. JSON key Value range Description ver string Version name. vid uint32 Build ID (YYMMDDB, B = daily build index). leds object Contains info about the LED setup. leds.cct bool true if the light supports color temperature control (available since 0.13.0) leds.count 1 to 1200 Total LED count. leds.fps 0 to 255 Current frames per second. (available since 0.12.0) leds.rgbw bool true if LEDs are 4-channel (RGBW). leds.wv bool true if a white channel slider should be displayed. (available since 0.10.0) leds.pin byte array LED strip pin(s). Always one element. Removed as of v0.13 leds.pwr 0 to 65000 Current LED power usage in milliamps as determined by the ABL. 0 if ABL is disabled. leds.maxpwr 0 to 65000 Maximum power budget in milliamps for the ABL. 0 if ABL is disabled. leds.maxseg byte Maximum number of segments supported by this version. str bool If true , an UI with only a single button for toggling sync should toggle receive+send, otherwise send only name string Friendly name of the light. Intended for display in lists and titles. udpport uint16 The UDP port for realtime packets and WLED broadcast. live bool If true , the software is currently receiving realtime data via UDP or E1.31. lm string Info about the realtime data source lip string Realtime data source IP address ws -1 to 8 Number of currently connected WebSockets clients. -1 indicates that WS is unsupported in this build. fxcount byte Number of effects included. palcount uint16 Number of palettes configured. wifi object Info about current signal strength wifi.bssid string The BSSID of the currently connected network. wifi.signal 0 to 100 Relative signal quality of the current connection. wifi.channel 1 to 14 The current WiFi channel. fs object Info about the embedded LittleFS filesystem (since 0.11.0) fs.u uint32 Estimate of used filesystem space in kilobytes fs.t uint32 Total filesystem size in kilobytes fs.pmt uint32 Unix timestamp for the last modification to the presets.json file. Not accurate after boot or after using /edit ndc -1 to 255 Number of other WLED devices discovered on the network. -1 if Node discovery disabled. (since 0.12.0) arch string Name of the platform. core string Version of the underlying (Arduino core) SDK. lwip 0, 1, or 2 Version of LwIP. 1 or 2 on ESP8266, 0 (does not apply) on ESP32. Deprecated, removal in 0.14.0 freeheap uint32 Bytes of heap memory (RAM) currently available. Problematic if < 10k . uptime uint32 Time since the last boot/reset in seconds. opt uint16 Used for debugging purposes only. brand string The producer/vendor of the light. Always WLED for standard installations. product string The product name. Always FOSS for standard installations. btype string The origin of the build. src if a release version is compiled from source, bin for an official release image, dev for a development build (regardless of src/bin origin) and exp for experimental versions. ogn if the image is flashed to hardware by the vendor. Removed as of v0.10 mac string The hexadecimal hardware MAC address of the light, lowercase and without colons. ip string The IP address of this instance. Empty string if not connected. (since 0.13.0)","title":"Info object"},{"location":"interfaces/json-api/#per-segment-individual-led-control","text":"Using the i property of the segment object, you can set the LED colors in the segment using the JSON API. Keep in mind that this is non-persistent, if the light is turned off the segment will return to effect mode. The segment is blanked out when using individual control, the set effect will not run. To disable, change any property of the segment or turn off the light. To set individual LEDs starting from the beginning, use an array of Color arrays. {\"seg\":{\"i\":[[255,0,0], [0,255,0], [0,0,255]]}} will set the first LED red, the second green and the third blue. To set individual LEDs, use the LED index followed by its Color array. {\"seg\":{\"i\":[0,[255,0,0], 2,[0,255,0], 4,[0,0,255]]}} is the same as above, but leaves blank spaces between the lit LEDs. To set ranges of LEDs, use the LED start and stop index followed by its Color array. {\"seg\":{\"i\":[0,8,[255,0,0], 10,18,[0,0,255]]}} sets the first eight LEDs to red, leaves out two, and sets another 8 to blue. Keep in mind that the LED indices are segment-based, so LED 0 is the first LED of the segment, not of the entire strip. Segment features, including Grouping, Spacing, Mirroring and Reverse are functional. This feature is available in build 200829 and above.","title":"Per-segment individual LED control"},{"location":"interfaces/json-api/#playlists","text":"(Available since 0.11.0) Sample playlist API call: { \"playlist\" : { \"ps\" : [ 26 , 20 , 18 , 20 ], \"dur\" : [ 30 , 20 , 10 , 50 ], \"transition\" : 0 , \"repeat\" : 10 , \"end\" : 21 } } This example applies preset ID 26 for 3 seconds, then preset 20 for 2 seconds, then preset 18 for 1 second, lastly preset 20 again for 5 seconds.This repeats 10 times, then preset 21 is applied. Playlist object: JSON key Description ps Array of preset ID integers to be applied in this order. dur Array of time each preset should be kept, in tenths of seconds. If only one integer is supplied, all presets will be kept for that time.Defaults to 10 seconds if not provided. transition Array of time each preset should transition to the next one, in tenths of seconds. If only one integer is supplied, all presets will transition for that time. Defaults to the current transition time if not provided. repeat How many times the entire playlist should cycle before finishing. Set to 0 for an indefinite cycle. Default to indefinite if not provided. end Single preset ID to apply after the playlist finished. Has no effect when an indefinite cycle is set. If not provided, the light will stay on the last preset of the playlist.","title":"Playlists"},{"location":"interfaces/json-api/#cct-control","text":"Please also see the general info about CCT .","title":"CCT control"},{"location":"interfaces/json-api/#supported-value-ranges","text":"Given that the white spectrum handling is agnostic to the true color temperature of the LEDs used, a relative range is preferred for the time being, where a value of 0 indicates the warmest possible color temperature, while a value of 255 indicates the coldest temperature. It is also possible to pass a value in the range of 1900 to 10091 , in which case it is treated as a Kelvin color temperature, where 1900 is mapped to a relative value of 0 and 10091 to a relative value of 255 . As such, it is unlikely to match the actual color temperature output by the light, therefore the relative values 0-255 are preferred for the time being. In the future, an option to specify the Kelvin temperatures of the utilized hardware may be added, once this is done, a color temperature can be set to more accurately match other lights. Therefore, for forward compatibility, your integration should expect both either a 0-255 value for seg.cct , in which case it is a relative value, or an absolute Kelvin value in the range 1000-20000 K. In case a Kelvin value is provided, you can consider the color temperature as accurate, which is not possible with relative 0-255 values as the Kelvin points of the white channels are unknown. It is preferred that you set a new CCT value in the same range as received from WLED, that is, use 0-255 if the original value was within this range, and 1000-20000 K otherwise.","title":"Supported value ranges"},{"location":"interfaces/json-api/#effect-of-the-segcct-value","text":"seg.cct can always be set, but only has an effect on the physical state of the light if one or both of the following conditions is met: White Balance correction is enabled A bus supporting CCT is configured and Calculate CCT from RGB is not enabled CCT support is indicated by info.leds.cct being true , in which case you can regard the instance as a CCT light and e.g. display a color temperature control.","title":"Effect of the seg.cct value"},{"location":"interfaces/mqtt/","text":"Important Notice: The MQTT implementation is currently being restructured to provide a better experience for users of Home Assistant and other automation software. This will be a breaking change . For details regarding the rework, please see #207 ! WLED versions from 0.8.0 up are able to connect to an MQTT broker for smart home control. Connection to both domains and IP servers is supported on port 1883. Warning Secure connections are not currently supported. I recommend only connecting to local MQTT brokers. In v0.8.4-0.8.6 only, WLED supports MQTT autodiscovery by the HomeAssistant software. This has been removed because of bootloop issues and in favor of the native HomeAssistant integration. WLED will subscribe to up to six topics to change the state of the lights. [mqttDeviceTopic] -> Send brightness as ASCII number 0-255 or the strings \"ON\", \"OFF\", and \"T\" (for toggle) [mqttDeviceTopic]/col -> Send color as HEX (#WWRRGGBB or #RRGGBB) or 32bit DEC. Hex has '#','h' or 'H' as prefix. [mqttDeviceTopic]/api -> Send an API call (using the HTTP API or, since 0.11, JSON API syntax). You may omit the \"win\" and just send e.g. \"FX=73\" [mqttGroupTopic] [mqttGroupTopic]/col [mqttGroupTopic]/api The topic paths [mqttDeviceTopic] and [mqttGroupTopic] are customizable in Sync settings. If [mqttGroupTopic] is left empty, it will not subscribe to anything. An empty [mqttDeviceTopic] will instead be replaced with the default \"wled/macaddr\". [mqttDeviceTopic] is intended to be unique to one WLED device and just control that device. [mqttGroupTopic] is intended to control a group of or all WLED devices. UDP notifications will be sent just as if the change was done via the UI or HTTP API. Additionally, on light change, WLED will publish to 3 topics for MQTT clients to query the state of the light. [mqttDeviceTopic]/g -> Contains current brightness as ASCII number 0-255 [mqttDeviceTopic]/c -> Contains current color as HEX (#RRGGBB if white is 0, else #WWRRGGBB) [mqttDeviceTopic]/v -> Contains XML API response (same as HTTP API) There is support for client ID and authentication, but this is presently transmitted over an unencrypted connection, so please do not use the same password for other services. Attention The maximal length of a MQTT messages for WLED is 1024 bytes.","title":"MQTT"},{"location":"interfaces/philips-hue/","text":"WLED can sync to your Philips hue lights. Info This feature allows your WLED light to set it color to that of one of your Hue lights. It does NOT enable individual control of your WLED light from the hue app. To activate it, please go to Sync settings, fill in the IP of your hue bridge. Also you need to fill in the numeric ID of the hue light you want to sync to. Newer versions of the Hue app do not display light IDs in the \"About\" section of the app anymore, to find it, the app Hue Config Viewer is highly recommended. It is available on the Play Store as well as the App Store . After pairing the app to your Hue bridge, you can see the numeric IDs of all your Hue lights in the Lights menu. The poll interval specifies how often WLED asks the hue bridge for a light change. Lower values will mean a quicker response of WLED to hue light changes, but also decrease responsiveness and stability of WLED and potentially the hue bridge. It is recommended to set it to 1000-2000ms. Due to the nature of the hue protocol, WLED can only sync itself to a native hue bulb. At this time, there is no way to add WLED to the hue bridge and control it individually as if it was a native light. Please don't expect the same level of stability with this feature active, the ESP may reset itself because of the increased traffic it needs to handle. With DiyHue you can emulate a hue bridge that will show all WLED strips as Hue Strip Plus which will work with Hue Sync in realtime.","title":"Philips Hue"},{"location":"interfaces/udp-notifier/","text":"Usage The UDP notifier function of WLED makes it easy to sync multiple lights to the same color/effect, enabled by default. You can set the specific behavior of it in Sync settings, also you can choose if all aspects or only brightness/color/effects are applied. Additionally, there is a \"Sync\" quick toggle for it in the main control UI! In UI settings, you can set whether this button only turns on/off sending (default) or also receiving, with the option Sync button toggles both send and receive . If your sync settings are not the way you like on boot, check the WLED Broadcast section in Sync settings, where you can specify what is sent and received by default: Receiving settings Setting Description Receive Brightness If there is a sync notification, whether its brightness should be applied Color Whether the color of the synced device should be applied Effects Whether the effect settings should be applied If all checkboxes are disabled, nothing is received by default after each boot. If the sync is toggled on in the main UI and the corresponding checkbox in UI settings is checked, everything is received. A sync receiver will not assume the state of the last sender directly after booting, a new packet must be send for it to react. Sending settings Setting Description Send on direct change Whether to send a sync notification when state changed via the web UI or API Send on button press Whether to send sync when toggled by the physical hardware button Send Alexa notifications Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Whether to send sync after a connected Philips light changed Send Macro notifications Whether to send sync after a macro was triggered Send notifications twice Sends notifications twice (if you have issues with UDP packet loss) The quick toggle in the main UI will only apply to direct changes (UI + API), all other sync type sending behavior remains unaffected. You can easily group WLED devices (for example all in one room) by changing the UDP port of all devices you want in that group. Sync groups From v0.13.0, 8 Sync groups are available. This allows syncing select instances only without changing the UDP port. For example, you might use one sync group per room you use WLED devices in. Make sure the sender and receiver you want to sync both have the same sync group ticked (a sender can send to multiple groups and a receiver can listen to multiple groups). Sync packets received from pre-0.13.0 instances are treated as if sent in sync group 1 only. Protocol description Warning Note: this info is partly out of date, see updated functionality in the code ( udp.cpp ) When enabled, the module where a value was changed will send an UDP broadcast to a port (default 21324). Other modules that listen on this port will set themselves to the same color. For interoperability, the protocol was designed so that even modules with different WLED versions can sync. Therefore, if a WLED 0.4 system receives a WLED 0.3 UDP notification it will apply the primary color but keep its current secondary color. The UDP packet is currently 24 bytes long. It is laid out in the following: Byte Index Var Name Description Notifier Version 0 - Packet Purpose Byte* 0 1 callMode Packet Reason** 0 2 bri Master Brightness 0 3 col[0] Primary Red Value 0 4 col[1] Primary Green Value 0 5 col[2] Primary Blue Value 0 6 nightlightActive Nightlight running? 0 7 nightlightDelayMins Nightlight Time 0 8 effectCurrent Effect Index 0 9 effectSpeed Effect Speed 0 10 white Primary White Value 1 11 - Version Byte*** 1 12 colSec[0] Secondary Red Value 2 13 colSec[1] Secondary Green Value 2 14 colSec[2] Secondary Blue Value 2 15 whiteSec Secondary White Value 2 16 effectIntensity Effect Intensity 3 17 transitionDelay Transition Duration Upper 4 18 transitionDelay Transition Duration Lower 4 19 effectPalette FastLED palette 5 20-23 - Zeros - *The notifier protocol is only used if this byte is 0. Otherwise, one of the UDP Realtime protocols will be used. **The callMode variable specifies the reason for the notification. Every color update has the potential to trigger a notification. callMode Description Behavior 0 Initial Boot Do not notify 1 Direct Change via UI or API notifyDirect? 2 Button was pressed notifyButton? 3 Update by other notification Do not notify 4 Nightlight activated notifyDirect? 5 Other (Req. with &NN) Do not notify 6 Effect changed notifyDirect? 7 Hue light changed notifyHue? 8 Preset Cycle active notifyDirect? 9 Updated via Blynk notifyDirect? ***This is the version of the UDP protocol. UDP Version Description WLED Version 0 Basic Support 0.3 1 White Value supported 0.4p 2 Secondary Color supported 0.4 3 Effect Intensity supported 0.5.0 4 Transition Time supported 0.6.0 5 Palettes supported 0.8.0","title":"WLED UDP Sync"},{"location":"interfaces/udp-notifier/#usage","text":"The UDP notifier function of WLED makes it easy to sync multiple lights to the same color/effect, enabled by default. You can set the specific behavior of it in Sync settings, also you can choose if all aspects or only brightness/color/effects are applied. Additionally, there is a \"Sync\" quick toggle for it in the main control UI! In UI settings, you can set whether this button only turns on/off sending (default) or also receiving, with the option Sync button toggles both send and receive . If your sync settings are not the way you like on boot, check the WLED Broadcast section in Sync settings, where you can specify what is sent and received by default:","title":"Usage"},{"location":"interfaces/udp-notifier/#receiving-settings","text":"Setting Description Receive Brightness If there is a sync notification, whether its brightness should be applied Color Whether the color of the synced device should be applied Effects Whether the effect settings should be applied If all checkboxes are disabled, nothing is received by default after each boot. If the sync is toggled on in the main UI and the corresponding checkbox in UI settings is checked, everything is received. A sync receiver will not assume the state of the last sender directly after booting, a new packet must be send for it to react.","title":"Receiving settings"},{"location":"interfaces/udp-notifier/#sending-settings","text":"Setting Description Send on direct change Whether to send a sync notification when state changed via the web UI or API Send on button press Whether to send sync when toggled by the physical hardware button Send Alexa notifications Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Whether to send sync after a connected Philips light changed Send Macro notifications Whether to send sync after a macro was triggered Send notifications twice Sends notifications twice (if you have issues with UDP packet loss) The quick toggle in the main UI will only apply to direct changes (UI + API), all other sync type sending behavior remains unaffected. You can easily group WLED devices (for example all in one room) by changing the UDP port of all devices you want in that group.","title":"Sending settings"},{"location":"interfaces/udp-notifier/#sync-groups","text":"From v0.13.0, 8 Sync groups are available. This allows syncing select instances only without changing the UDP port. For example, you might use one sync group per room you use WLED devices in. Make sure the sender and receiver you want to sync both have the same sync group ticked (a sender can send to multiple groups and a receiver can listen to multiple groups). Sync packets received from pre-0.13.0 instances are treated as if sent in sync group 1 only.","title":"Sync groups"},{"location":"interfaces/udp-notifier/#protocol-description","text":"Warning Note: this info is partly out of date, see updated functionality in the code ( udp.cpp ) When enabled, the module where a value was changed will send an UDP broadcast to a port (default 21324). Other modules that listen on this port will set themselves to the same color. For interoperability, the protocol was designed so that even modules with different WLED versions can sync. Therefore, if a WLED 0.4 system receives a WLED 0.3 UDP notification it will apply the primary color but keep its current secondary color. The UDP packet is currently 24 bytes long. It is laid out in the following: Byte Index Var Name Description Notifier Version 0 - Packet Purpose Byte* 0 1 callMode Packet Reason** 0 2 bri Master Brightness 0 3 col[0] Primary Red Value 0 4 col[1] Primary Green Value 0 5 col[2] Primary Blue Value 0 6 nightlightActive Nightlight running? 0 7 nightlightDelayMins Nightlight Time 0 8 effectCurrent Effect Index 0 9 effectSpeed Effect Speed 0 10 white Primary White Value 1 11 - Version Byte*** 1 12 colSec[0] Secondary Red Value 2 13 colSec[1] Secondary Green Value 2 14 colSec[2] Secondary Blue Value 2 15 whiteSec Secondary White Value 2 16 effectIntensity Effect Intensity 3 17 transitionDelay Transition Duration Upper 4 18 transitionDelay Transition Duration Lower 4 19 effectPalette FastLED palette 5 20-23 - Zeros - *The notifier protocol is only used if this byte is 0. Otherwise, one of the UDP Realtime protocols will be used. **The callMode variable specifies the reason for the notification. Every color update has the potential to trigger a notification. callMode Description Behavior 0 Initial Boot Do not notify 1 Direct Change via UI or API notifyDirect? 2 Button was pressed notifyButton? 3 Update by other notification Do not notify 4 Nightlight activated notifyDirect? 5 Other (Req. with &NN) Do not notify 6 Effect changed notifyDirect? 7 Hue light changed notifyHue? 8 Preset Cycle active notifyDirect? 9 Updated via Blynk notifyDirect? ***This is the version of the UDP protocol. UDP Version Description WLED Version 0 Basic Support 0.3 1 White Value supported 0.4p 2 Secondary Color supported 0.4 3 Effect Intensity supported 0.5.0 4 Transition Time supported 0.6.0 5 Palettes supported 0.8.0","title":"Protocol description"},{"location":"interfaces/udp-realtime/","text":"Hyperion You can now use WLED with the popular Ambilight software Hyperion. Just configure Hyperion to use an UDP device with protocol 0 on port 19446! The maximum number of LEDs supported in this mode is 490. (WLED 0.8.0 and lower: 341) Prismatik Prismatik is another Ambilight option. Select one of the UDP options in the device configuration wizard. TPM2.NET Supported in latest master and will be available in WLED 0.10.1. Please set the WLED broadcast UDP port to 65506 in Sync settings to enable receiving TPM2.NET data. UDP Realtime Additionally, WLED offers a way to directly drive the connected LEDs via UDP. The protocol is referred to as WLED Audio-Reactive-Led-Strip (WARLS), since the support of that project was its primary goal. However, it can also be used for other realtime applications like an ambilight. WARLS uses the same UDP port the notifier uses (default 21324, can be changed in settings). At the moment, the web UI will be disabled while active, the HTTP API, Alexa and button control remains functional. It uses the current brightness and gamma correction settings. Byte 0 of the UDP packet tells the server which realtime protocol to use. Value Description Max. LEDs 1 WARLS 255 2 DRGB 490 3 DRGBW 367 4 DNRGB 489/packet 0 WLED Notifier - In every protocol, Byte 1 tells the server how many seconds to wait after the last received packet before returning to normal mode, in practice you should use 1-2 (seconds) here in most cases so that the module returns to normal mode quickly after the end of transmission. Use 255 to stay on the UDP data without a timeout until a request is requested via another method. After this the LED color information is transmitted like this: WARLS Byte Description 2 + n*4 LED Index 3 + n*4 Red Value 4 + n*4 Green Value 5 + n*4 Blue Value DRGB: This mode has the difference that the LED indices are not part of the packet, instead every LED is updated. This leads to a higher speed when all LEDs are changed, but a drastically lower speed if only one LED is updated per packet. Byte Description 2 + n*3 Red Value 3 + n*3 Green Value 4 + n*3 Blue Value DRGBW: Like DRGB, but supports the White value for RGBW strips. Byte Description 2 + n*4 Red Value 3 + n*4 Green Value 4 + n*4 Blue Value 5 + n*4 White Value DNRGB: DRGB, but with 2 additional bytes that signify the starting LED index. This allows for more than 490 LEDs in realtime mode by sending multiple packets. Byte Description 2 Start index high byte 3 Start index low byte 4 + n*3 Red Value 5 + n*3 Green Value 6 + n*3 Blue Value When realtime mode starts, all LEDs will be black. However, you don't have to change all LEDs using one packet. Changing a single LED therefore only requires a packet of 2+4 bytes. All LEDs maintain their color until it is changed or the module exits WARLS mode because of a timeout. Setup with ARLS The software now supports audio-reactive-led-strip! Download audio-reactive-led-strip and follow its installation instruction. You can also use my (untested) fork . In that case, you can skip step 2. Insert the following code in led.py after line 66: m.append(1); m.append(2); These are the first two bytes of the protocol. In config.py set your led amount, ESP IP and WLED UDP notifier port. For FPS, a setting between 15-30 is recommended. Run visualization.py! If you have a low amount of LEDS (e.g. 10) try lowering the sigma values in line 129-131. If you have multiple WLED devices, you can sync them all with music. Use the led count of your largest device and set the IP to X.X.X.255 (UDP broadcast). You can adjust the position of the amplitude with the WARLS offset setting. Note that web control currently does not work while it is active.","title":"UDP Realtime / tpm2.net"},{"location":"interfaces/udp-realtime/#hyperion","text":"You can now use WLED with the popular Ambilight software Hyperion. Just configure Hyperion to use an UDP device with protocol 0 on port 19446! The maximum number of LEDs supported in this mode is 490. (WLED 0.8.0 and lower: 341)","title":"Hyperion"},{"location":"interfaces/udp-realtime/#prismatik","text":"Prismatik is another Ambilight option. Select one of the UDP options in the device configuration wizard.","title":"Prismatik"},{"location":"interfaces/udp-realtime/#tpm2net","text":"Supported in latest master and will be available in WLED 0.10.1. Please set the WLED broadcast UDP port to 65506 in Sync settings to enable receiving TPM2.NET data.","title":"TPM2.NET"},{"location":"interfaces/udp-realtime/#udp-realtime","text":"Additionally, WLED offers a way to directly drive the connected LEDs via UDP. The protocol is referred to as WLED Audio-Reactive-Led-Strip (WARLS), since the support of that project was its primary goal. However, it can also be used for other realtime applications like an ambilight. WARLS uses the same UDP port the notifier uses (default 21324, can be changed in settings). At the moment, the web UI will be disabled while active, the HTTP API, Alexa and button control remains functional. It uses the current brightness and gamma correction settings. Byte 0 of the UDP packet tells the server which realtime protocol to use. Value Description Max. LEDs 1 WARLS 255 2 DRGB 490 3 DRGBW 367 4 DNRGB 489/packet 0 WLED Notifier - In every protocol, Byte 1 tells the server how many seconds to wait after the last received packet before returning to normal mode, in practice you should use 1-2 (seconds) here in most cases so that the module returns to normal mode quickly after the end of transmission. Use 255 to stay on the UDP data without a timeout until a request is requested via another method. After this the LED color information is transmitted like this: WARLS Byte Description 2 + n*4 LED Index 3 + n*4 Red Value 4 + n*4 Green Value 5 + n*4 Blue Value DRGB: This mode has the difference that the LED indices are not part of the packet, instead every LED is updated. This leads to a higher speed when all LEDs are changed, but a drastically lower speed if only one LED is updated per packet. Byte Description 2 + n*3 Red Value 3 + n*3 Green Value 4 + n*3 Blue Value DRGBW: Like DRGB, but supports the White value for RGBW strips. Byte Description 2 + n*4 Red Value 3 + n*4 Green Value 4 + n*4 Blue Value 5 + n*4 White Value DNRGB: DRGB, but with 2 additional bytes that signify the starting LED index. This allows for more than 490 LEDs in realtime mode by sending multiple packets. Byte Description 2 Start index high byte 3 Start index low byte 4 + n*3 Red Value 5 + n*3 Green Value 6 + n*3 Blue Value When realtime mode starts, all LEDs will be black. However, you don't have to change all LEDs using one packet. Changing a single LED therefore only requires a packet of 2+4 bytes. All LEDs maintain their color until it is changed or the module exits WARLS mode because of a timeout.","title":"UDP Realtime"},{"location":"interfaces/udp-realtime/#setup-with-arls","text":"The software now supports audio-reactive-led-strip! Download audio-reactive-led-strip and follow its installation instruction. You can also use my (untested) fork . In that case, you can skip step 2. Insert the following code in led.py after line 66: m.append(1); m.append(2); These are the first two bytes of the protocol. In config.py set your led amount, ESP IP and WLED UDP notifier port. For FPS, a setting between 15-30 is recommended. Run visualization.py! If you have a low amount of LEDS (e.g. 10) try lowering the sigma values in line 129-131. If you have multiple WLED devices, you can sync them all with music. Use the led count of your largest device and set the IP to X.X.X.255 (UDP broadcast). You can adjust the position of the amplitude with the WARLS offset setting. Note that web control currently does not work while it is active.","title":"Setup with ARLS"},{"location":"interfaces/websocket/","text":"Version Info Since WLED 0.10.2, a WebSocket server is enabled by default and can be used to access a subset of the JSON API . The server is available at the /ws endpoint, you can access it like ws://[WLED-IP]/ws . You may send any JSON state update to the socket. On change of the lighting state, the server will send a JSON object containing the state and info objects (this is equivalent to HTTP GET /json/si ) to all connected clients. This object will also be sent to a client upon connecting. You can also request a live stream of the LED values (e.g. the \"Peek\" feature of WLED-UI) by sending {\"lv\":true} to the websocket. The returned format is the same as for /json/live . Only one client can receive this at a time, if a new client requests it the stream will stop for the previous client (but the websocket will stay connected). There can be a maximum of 4 clients connected at a time. If a fifth client connects, a different client will be disconnected. On ESP8266, it is recommended to have no more than 2 clients connected simultaneously.","title":"Websocket"},{"location":"interfaces/json-ir/json_infrared/","text":"Version Info Since v0.13.0, infrared control for any IR remote compatible with your IR receiver with JSON remote. A dedicated infrared receiver module is required. (KY-022 or TSOP38238 are confirmed to work and inexpensive) The default sensor pin is GPIO4. It can be changed in the WLED settings. JSON IR Remote The JSON IR remote allows users to customize IR remote behavior without writing custom C code or compiling. Using the JSON IR remote, you can map buttons from any compatible remote to any HTTP request API or JSON API command. The map of IR codes to API commands is stored on your ESP's file system in ir.json . From the \"LED Preferences\" page, set the IR pin and remote type to \"JSON remote\". Once \"JSON remote\" is selected, a file upload control will appear. You can also upload and edit ir.json from the /edit page, which can be reached by going to http://[controller-ip]/edit. If you use the edit page to upload your config file, be sure to name it ir.json . Preconfigured Remotes LED remotes typically are not sold separately. But you can purchase with an RGB controller for $2-4 on AliExpress and $5-10 on Amazon. When purchasing a remote, be sure that it is an infrared (IR) remote and not a radio (RF) remote as they are not supported at this time. 44-key white ir.json 40-key blue ir.json 40-key black ir.json 38-key ir.json (Sold with WLED compatible SP511E controllers) 32-key ir.json (commonly sold with fairy string lights) 24-key (very common, but buttons need repurposed to be very useful with WLED) ir.json v1 gray buttons load presets 1-4 ir.json v2 gray buttons cycle effects, palettes and change speed 24-key grey ir.json 24-key music ir.json v3 21-key ir.json 6-key ir.json Editing ir.json First see if a JSON file already exists for your remote. If not, see if there is a JSON file for a remote with the same number of buttons. Often remotes with the same number of buttons have different labels but emit the same codes. The JSON keys are the hex encoded IR codes emitted by each button. The keys are strings and case is important, be sure to use the same format as the sample below. It is also the same format used when codes are echoed on the serial console. In the JSON document, each button object should have a cmd attribute containing the HTTP request or JSON API command. In addition to HTTP and JSON API commands, several C functions are supported (!incBrightness, !decBrightness, !presetFallback). The !incBrightness and !decBrightness functions, take smaller steps at the dim end of the range with progressively larger steps at the bright end. The !presetFallback function applies a preset (attribute PL) and falls back to the specified effect and palette (attributes FX and FP) if preset does not exist. (see sample below) If an IR remote button is pressed rapidly or held down, subsequent presses have a different code (0xFFFFFFFF). If your command is repeatable but does not contain the \"~\" character and is not calling incBrightness or decBrightness, then add a \"rpt\" attribute with a value of true. Label and position attributes are ignored by WLED but useful when making edits. If an ir.json file does not already exist for your remote, you will need to determine what code each button emits. To do this, connect your ESP8266 or ESP32 to a computer and open Arduino or VSCode serial monitor. Then press each button and record the code printed on the serial monitor. You should see something like this: IR recv 0xFFDE10 You should get a 24-bit hex encoded integer. If you get 0xFFFFFFFF, that means the button has been pressed repeatedly or held down. Try tapping quickly. Tips Map play or auto buttons to a playlist. They currently just turn on preset cycling CY=1 or load a playlist of presets 1-5. You can define the playlist in ir.json as in the sample below, or save a playlist as a preset and load that. Save your 'every day' presets in one range of ids, maybe 1-30; your 'holiday' presets in another range, maybe 31-40. Then you can devote two buttons to cycle through presets. In our example, the command on the 'holiday cycle' button would be P1=31&P2=40&PL=~ You can also group your presets by color; for instance reddish animations in 1-10, greenish in 11-20, bluish in 21-30. The 44-key remote has up and down arrows for red, green and blue. So the command on the 'blue down' button would be P1=21&P2=30&PL=~- Most of the 24-key and fewer remotes are designed with analog LEDs in mind and do not have very useful labels for WLED. With JSON IR and a fine-tip Sharpie, you can repurpose buttons to make them more useful. ir.json sample { \"0xF740BF\" : { \"label\" : \"On/Off\" , \"cmd\" : \"T=2\" , \"rpt\" : true }, \"0xF700FF\" : { \"label\" : \"Speed +\" , \"cmd\" : \"SX=~16\" }, \"0xF720DF\" : { \"label\" : \"Red\" , \"cmnt\" : \"Lava palette + primary, secondary and tertiary colors\" , \"cmd\" : \"FP=8&CL=hFF7F00&C2=hFF0000&C3=hCC3D60\" }, \"0xF710EF\" : { \"label\" : \"Timer1\" , \"cmnt\" : \"Timer 60 min\" , \"cmd\" : \"NL=60&NT=0\" }, \"0xF730CF\" : { \"label\" : \"Play\" , \"cmnt\" : \"prime example of a playlist that cycles every 180 seconds and continues to repeat\" , \"cmd\" : { \"playlist\" :{ \"ps\" :[ 1 , 3 , 5 , 7 , 11 , 13 , 17 ], \"dur\" : 1800 , \"transition\" : 7 , \"repeat\" : 0 , \"end\" : 0 }} }, \"0xFF9867\" : { \"label\" : \"Bright+\" , \"cmnt\" : \"smaller steps at beginning, larger steps at the end\" , \"cmd\" : \"!incBrightness\" }, \"0xF78877\" : { \"label\" : \"DIY1\" , \"cmnt\" : \"Preset 1, fallback to Saw(16) - Party(6) if it doesn't exist\" , \"cmd\" : \"!presetFallback\" , \"PL\" : 1 , \"FX\" : 16 , \"FP\" : 6 }, }","title":"Infrared"},{"location":"interfaces/json-ir/json_infrared/#json-ir-remote","text":"The JSON IR remote allows users to customize IR remote behavior without writing custom C code or compiling. Using the JSON IR remote, you can map buttons from any compatible remote to any HTTP request API or JSON API command. The map of IR codes to API commands is stored on your ESP's file system in ir.json . From the \"LED Preferences\" page, set the IR pin and remote type to \"JSON remote\". Once \"JSON remote\" is selected, a file upload control will appear. You can also upload and edit ir.json from the /edit page, which can be reached by going to http://[controller-ip]/edit. If you use the edit page to upload your config file, be sure to name it ir.json .","title":"JSON IR Remote"},{"location":"interfaces/json-ir/json_infrared/#preconfigured-remotes","text":"LED remotes typically are not sold separately. But you can purchase with an RGB controller for $2-4 on AliExpress and $5-10 on Amazon. When purchasing a remote, be sure that it is an infrared (IR) remote and not a radio (RF) remote as they are not supported at this time. 44-key white ir.json 40-key blue ir.json 40-key black ir.json 38-key ir.json (Sold with WLED compatible SP511E controllers) 32-key ir.json (commonly sold with fairy string lights) 24-key (very common, but buttons need repurposed to be very useful with WLED) ir.json v1 gray buttons load presets 1-4 ir.json v2 gray buttons cycle effects, palettes and change speed 24-key grey ir.json 24-key music ir.json v3 21-key ir.json 6-key ir.json","title":"Preconfigured Remotes"},{"location":"interfaces/json-ir/json_infrared/#editing-irjson","text":"First see if a JSON file already exists for your remote. If not, see if there is a JSON file for a remote with the same number of buttons. Often remotes with the same number of buttons have different labels but emit the same codes. The JSON keys are the hex encoded IR codes emitted by each button. The keys are strings and case is important, be sure to use the same format as the sample below. It is also the same format used when codes are echoed on the serial console. In the JSON document, each button object should have a cmd attribute containing the HTTP request or JSON API command. In addition to HTTP and JSON API commands, several C functions are supported (!incBrightness, !decBrightness, !presetFallback). The !incBrightness and !decBrightness functions, take smaller steps at the dim end of the range with progressively larger steps at the bright end. The !presetFallback function applies a preset (attribute PL) and falls back to the specified effect and palette (attributes FX and FP) if preset does not exist. (see sample below) If an IR remote button is pressed rapidly or held down, subsequent presses have a different code (0xFFFFFFFF). If your command is repeatable but does not contain the \"~\" character and is not calling incBrightness or decBrightness, then add a \"rpt\" attribute with a value of true. Label and position attributes are ignored by WLED but useful when making edits. If an ir.json file does not already exist for your remote, you will need to determine what code each button emits. To do this, connect your ESP8266 or ESP32 to a computer and open Arduino or VSCode serial monitor. Then press each button and record the code printed on the serial monitor. You should see something like this: IR recv 0xFFDE10 You should get a 24-bit hex encoded integer. If you get 0xFFFFFFFF, that means the button has been pressed repeatedly or held down. Try tapping quickly.","title":"Editing ir.json"},{"location":"interfaces/json-ir/json_infrared/#tips","text":"Map play or auto buttons to a playlist. They currently just turn on preset cycling CY=1 or load a playlist of presets 1-5. You can define the playlist in ir.json as in the sample below, or save a playlist as a preset and load that. Save your 'every day' presets in one range of ids, maybe 1-30; your 'holiday' presets in another range, maybe 31-40. Then you can devote two buttons to cycle through presets. In our example, the command on the 'holiday cycle' button would be P1=31&P2=40&PL=~ You can also group your presets by color; for instance reddish animations in 1-10, greenish in 11-20, bluish in 21-30. The 44-key remote has up and down arrows for red, green and blue. So the command on the 'blue down' button would be P1=21&P2=30&PL=~- Most of the 24-key and fewer remotes are designed with analog LEDs in mind and do not have very useful labels for WLED. With JSON IR and a fine-tip Sharpie, you can repurpose buttons to make them more useful.","title":"Tips"},{"location":"interfaces/json-ir/json_infrared/#irjson-sample","text":"{ \"0xF740BF\" : { \"label\" : \"On/Off\" , \"cmd\" : \"T=2\" , \"rpt\" : true }, \"0xF700FF\" : { \"label\" : \"Speed +\" , \"cmd\" : \"SX=~16\" }, \"0xF720DF\" : { \"label\" : \"Red\" , \"cmnt\" : \"Lava palette + primary, secondary and tertiary colors\" , \"cmd\" : \"FP=8&CL=hFF7F00&C2=hFF0000&C3=hCC3D60\" }, \"0xF710EF\" : { \"label\" : \"Timer1\" , \"cmnt\" : \"Timer 60 min\" , \"cmd\" : \"NL=60&NT=0\" }, \"0xF730CF\" : { \"label\" : \"Play\" , \"cmnt\" : \"prime example of a playlist that cycles every 180 seconds and continues to repeat\" , \"cmd\" : { \"playlist\" :{ \"ps\" :[ 1 , 3 , 5 , 7 , 11 , 13 , 17 ], \"dur\" : 1800 , \"transition\" : 7 , \"repeat\" : 0 , \"end\" : 0 }} }, \"0xFF9867\" : { \"label\" : \"Bright+\" , \"cmnt\" : \"smaller steps at beginning, larger steps at the end\" , \"cmd\" : \"!incBrightness\" }, \"0xF78877\" : { \"label\" : \"DIY1\" , \"cmnt\" : \"Preset 1, fallback to Saw(16) - Party(6) if it doesn't exist\" , \"cmd\" : \"!presetFallback\" , \"PL\" : 1 , \"FX\" : 16 , \"FP\" : 6 }, }","title":"ir.json sample"}]}